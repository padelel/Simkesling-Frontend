"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apexcharts";
exports.ids = ["vendor-chunks/apexcharts"];
exports.modules = {

/***/ "(pages-dir-node)/./node_modules/apexcharts/dist/apexcharts.common.js":
/*!***********************************************************!*\
  !*** ./node_modules/apexcharts/dist/apexcharts.common.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("/*!\n * ApexCharts v4.7.0\n * (c) 2018-2025 ApexCharts\n * Released under the MIT License.\n */ \nfunction t(t, e) {\n    (null == e || e > t.length) && (e = t.length);\n    for(var i = 0, a = Array(e); i < e; i++)a[i] = t[i];\n    return a;\n}\nfunction e(t) {\n    if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t;\n}\nfunction i(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction a(t, e) {\n    for(var i = 0; i < e.length; i++){\n        var a = e[i];\n        a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, x(a.key), a);\n    }\n}\nfunction s(t, e, i) {\n    return e && a(t.prototype, e), i && a(t, i), Object.defineProperty(t, \"prototype\", {\n        writable: !1\n    }), t;\n}\nfunction r(t, e) {\n    var i = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n    if (!i) {\n        if (Array.isArray(t) || (i = m(t)) || e && t && \"number\" == typeof t.length) {\n            i && (t = i);\n            var a = 0, s = function() {};\n            return {\n                s: s,\n                n: function() {\n                    return a >= t.length ? {\n                        done: !0\n                    } : {\n                        done: !1,\n                        value: t[a++]\n                    };\n                },\n                e: function(t) {\n                    throw t;\n                },\n                f: s\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var r, n = !0, o = !1;\n    return {\n        s: function() {\n            i = i.call(t);\n        },\n        n: function() {\n            var t = i.next();\n            return n = t.done, t;\n        },\n        e: function(t) {\n            o = !0, r = t;\n        },\n        f: function() {\n            try {\n                n || null == i.return || i.return();\n            } finally{\n                if (o) throw r;\n            }\n        }\n    };\n}\nfunction n(t) {\n    var i = c();\n    return function() {\n        var a, s = l(t);\n        if (i) {\n            var r = l(this).constructor;\n            a = Reflect.construct(s, arguments, r);\n        } else a = s.apply(this, arguments);\n        return function(t, i) {\n            if (i && (\"object\" == typeof i || \"function\" == typeof i)) return i;\n            if (void 0 !== i) throw new TypeError(\"Derived constructors may only return object or undefined\");\n            return e(t);\n        }(this, a);\n    };\n}\nfunction o(t, e, i) {\n    return (e = x(e)) in t ? Object.defineProperty(t, e, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : t[e] = i, t;\n}\nfunction l(t) {\n    return l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {\n        return t.__proto__ || Object.getPrototypeOf(t);\n    }, l(t);\n}\nfunction h(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n            value: t,\n            writable: !0,\n            configurable: !0\n        }\n    }), Object.defineProperty(t, \"prototype\", {\n        writable: !1\n    }), e && g(t, e);\n}\nfunction c() {\n    try {\n        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t) {}\n    return (c = function() {\n        return !!t;\n    })();\n}\nfunction d(t, e) {\n    var i = Object.keys(t);\n    if (Object.getOwnPropertySymbols) {\n        var a = Object.getOwnPropertySymbols(t);\n        e && (a = a.filter(function(e) {\n            return Object.getOwnPropertyDescriptor(t, e).enumerable;\n        })), i.push.apply(i, a);\n    }\n    return i;\n}\nfunction u(t) {\n    for(var e = 1; e < arguments.length; e++){\n        var i = null != arguments[e] ? arguments[e] : {};\n        e % 2 ? d(Object(i), !0).forEach(function(e) {\n            o(t, e, i[e]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : d(Object(i)).forEach(function(e) {\n            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));\n        });\n    }\n    return t;\n}\nfunction g(t, e) {\n    return g = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {\n        return t.__proto__ = e, t;\n    }, g(t, e);\n}\nfunction p(t, e) {\n    return function(t) {\n        if (Array.isArray(t)) return t;\n    }(t) || function(t, e) {\n        var i = null == t ? null : \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n        if (null != i) {\n            var a, s, r, n, o = [], l = !0, h = !1;\n            try {\n                if (r = (i = i.call(t)).next, 0 === e) {\n                    if (Object(i) !== i) return;\n                    l = !1;\n                } else for(; !(l = (a = r.call(i)).done) && (o.push(a.value), o.length !== e); l = !0);\n            } catch (t) {\n                h = !0, s = t;\n            } finally{\n                try {\n                    if (!l && null != i.return && (n = i.return(), Object(n) !== n)) return;\n                } finally{\n                    if (h) throw s;\n                }\n            }\n            return o;\n        }\n    }(t, e) || m(t, e) || function() {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction f(e) {\n    return function(e) {\n        if (Array.isArray(e)) return t(e);\n    }(e) || function(t) {\n        if (\"undefined\" != typeof Symbol && null != t[Symbol.iterator] || null != t[\"@@iterator\"]) return Array.from(t);\n    }(e) || m(e) || function() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction x(t) {\n    var e = function(t, e) {\n        if (\"object\" != typeof t || !t) return t;\n        var i = t[Symbol.toPrimitive];\n        if (void 0 !== i) {\n            var a = i.call(t, e || \"default\");\n            if (\"object\" != typeof a) return a;\n            throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (\"string\" === e ? String : Number)(t);\n    }(t, \"string\");\n    return \"symbol\" == typeof e ? e : e + \"\";\n}\nfunction b(t) {\n    return b = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n        return typeof t;\n    } : function(t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    }, b(t);\n}\nfunction m(e, i) {\n    if (e) {\n        if (\"string\" == typeof e) return t(e, i);\n        var a = ({}).toString.call(e).slice(8, -1);\n        return \"Object\" === a && e.constructor && (a = e.constructor.name), \"Map\" === a || \"Set\" === a ? Array.from(e) : \"Arguments\" === a || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a) ? t(e, i) : void 0;\n    }\n}\nvar v = function() {\n    function t() {\n        i(this, t);\n    }\n    return s(t, [\n        {\n            key: \"shadeRGBColor\",\n            value: function(t, e) {\n                var i = e.split(\",\"), a = t < 0 ? 0 : 255, s = t < 0 ? -1 * t : t, r = parseInt(i[0].slice(4), 10), n = parseInt(i[1], 10), o = parseInt(i[2], 10);\n                return \"rgb(\" + (Math.round((a - r) * s) + r) + \",\" + (Math.round((a - n) * s) + n) + \",\" + (Math.round((a - o) * s) + o) + \")\";\n            }\n        },\n        {\n            key: \"shadeHexColor\",\n            value: function(t, e) {\n                var i = parseInt(e.slice(1), 16), a = t < 0 ? 0 : 255, s = t < 0 ? -1 * t : t, r = i >> 16, n = i >> 8 & 255, o = 255 & i;\n                return \"#\" + (16777216 + 65536 * (Math.round((a - r) * s) + r) + 256 * (Math.round((a - n) * s) + n) + (Math.round((a - o) * s) + o)).toString(16).slice(1);\n            }\n        },\n        {\n            key: \"shadeColor\",\n            value: function(e, i) {\n                return t.isColorHex(i) ? this.shadeHexColor(e, i) : this.shadeRGBColor(e, i);\n            }\n        }\n    ], [\n        {\n            key: \"bind\",\n            value: function(t, e) {\n                return function() {\n                    return t.apply(e, arguments);\n                };\n            }\n        },\n        {\n            key: \"isObject\",\n            value: function(t) {\n                return t && \"object\" === b(t) && !Array.isArray(t) && null != t;\n            }\n        },\n        {\n            key: \"is\",\n            value: function(t, e) {\n                return Object.prototype.toString.call(e) === \"[object \" + t + \"]\";\n            }\n        },\n        {\n            key: \"isSafari\",\n            value: function() {\n                return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n            }\n        },\n        {\n            key: \"listToArray\",\n            value: function(t) {\n                var e, i = [];\n                for(e = 0; e < t.length; e++)i[e] = t[e];\n                return i;\n            }\n        },\n        {\n            key: \"extend\",\n            value: function(t, e) {\n                var i = this;\n                \"function\" != typeof Object.assign && (Object.assign = function(t) {\n                    if (null == t) throw new TypeError(\"Cannot convert undefined or null to object\");\n                    for(var e = Object(t), i = 1; i < arguments.length; i++){\n                        var a = arguments[i];\n                        if (null != a) for(var s in a)a.hasOwnProperty(s) && (e[s] = a[s]);\n                    }\n                    return e;\n                });\n                var a = Object.assign({}, t);\n                return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function(s) {\n                    i.isObject(e[s]) && s in t ? a[s] = i.extend(t[s], e[s]) : Object.assign(a, o({}, s, e[s]));\n                }), a;\n            }\n        },\n        {\n            key: \"extendArray\",\n            value: function(e, i) {\n                var a = [];\n                return e.map(function(e) {\n                    a.push(t.extend(i, e));\n                }), e = a;\n            }\n        },\n        {\n            key: \"monthMod\",\n            value: function(t) {\n                return t % 12;\n            }\n        },\n        {\n            key: \"clone\",\n            value: function(t) {\n                var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new WeakMap;\n                if (null === t || \"object\" !== b(t)) return t;\n                if (i.has(t)) return i.get(t);\n                if (Array.isArray(t)) {\n                    e = [], i.set(t, e);\n                    for(var a = 0; a < t.length; a++)e[a] = this.clone(t[a], i);\n                } else if (t instanceof Date) e = new Date(t.getTime());\n                else for(var s in e = {}, i.set(t, e), t)t.hasOwnProperty(s) && (e[s] = this.clone(t[s], i));\n                return e;\n            }\n        },\n        {\n            key: \"log10\",\n            value: function(t) {\n                return Math.log(t) / Math.LN10;\n            }\n        },\n        {\n            key: \"roundToBase10\",\n            value: function(t) {\n                return Math.pow(10, Math.floor(Math.log10(t)));\n            }\n        },\n        {\n            key: \"roundToBase\",\n            value: function(t, e) {\n                return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));\n            }\n        },\n        {\n            key: \"parseNumber\",\n            value: function(t) {\n                return null === t ? t : parseFloat(t);\n            }\n        },\n        {\n            key: \"stripNumber\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;\n                return Number.isInteger(t) ? t : parseFloat(t.toPrecision(e));\n            }\n        },\n        {\n            key: \"randomId\",\n            value: function() {\n                return (Math.random() + 1).toString(36).substring(4);\n            }\n        },\n        {\n            key: \"noExponents\",\n            value: function(t) {\n                return t.toString().includes(\"e\") ? Math.round(t) : t;\n            }\n        },\n        {\n            key: \"elementExists\",\n            value: function(t) {\n                return !(!t || !t.isConnected);\n            }\n        },\n        {\n            key: \"getDimensions\",\n            value: function(t) {\n                var e = getComputedStyle(t, null), i = t.clientHeight, a = t.clientWidth;\n                return i -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), [\n                    a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight),\n                    i\n                ];\n            }\n        },\n        {\n            key: \"getBoundingClientRect\",\n            value: function(t) {\n                var e = t.getBoundingClientRect();\n                return {\n                    top: e.top,\n                    right: e.right,\n                    bottom: e.bottom,\n                    left: e.left,\n                    width: t.clientWidth,\n                    height: t.clientHeight,\n                    x: e.left,\n                    y: e.top\n                };\n            }\n        },\n        {\n            key: \"getLargestStringFromArr\",\n            value: function(t) {\n                return t.reduce(function(t, e) {\n                    return Array.isArray(e) && (e = e.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    })), t.length > e.length ? t : e;\n                }, 0);\n            }\n        },\n        {\n            key: \"hexToRgba\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"#999999\", e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;\n                \"#\" !== t.substring(0, 1) && (t = \"#999999\");\n                var i = t.replace(\"#\", \"\");\n                i = i.match(new RegExp(\"(.{\" + i.length / 3 + \"})\", \"g\"));\n                for(var a = 0; a < i.length; a++)i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);\n                return void 0 !== e && i.push(e), \"rgba(\" + i.join(\",\") + \")\";\n            }\n        },\n        {\n            key: \"getOpacityFromRGBA\",\n            value: function(t) {\n                return parseFloat(t.replace(/^.*,(.+)\\)/, \"$1\"));\n            }\n        },\n        {\n            key: \"rgb2hex\",\n            value: function(t) {\n                return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)) && 4 === t.length ? \"#\" + (\"0\" + parseInt(t[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[3], 10).toString(16)).slice(-2) : \"\";\n            }\n        },\n        {\n            key: \"isColorHex\",\n            value: function(t) {\n                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t);\n            }\n        },\n        {\n            key: \"getPolygonPos\",\n            value: function(t, e) {\n                for(var i = [], a = 2 * Math.PI / e, s = 0; s < e; s++){\n                    var r = {};\n                    r.x = t * Math.sin(s * a), r.y = -t * Math.cos(s * a), i.push(r);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"polarToCartesian\",\n            value: function(t, e, i, a) {\n                var s = (a - 90) * Math.PI / 180;\n                return {\n                    x: t + i * Math.cos(s),\n                    y: e + i * Math.sin(s)\n                };\n            }\n        },\n        {\n            key: \"escapeString\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"x\", i = t.toString().slice();\n                return i = i.replace(/[` ~!@#$%^&*()|+\\=?;:'\",.<>{}[\\]\\\\/]/gi, e);\n            }\n        },\n        {\n            key: \"negToZero\",\n            value: function(t) {\n                return t < 0 ? 0 : t;\n            }\n        },\n        {\n            key: \"moveIndexInArray\",\n            value: function(t, e, i) {\n                if (i >= t.length) for(var a = i - t.length + 1; a--;)t.push(void 0);\n                return t.splice(i, 0, t.splice(e, 1)[0]), t;\n            }\n        },\n        {\n            key: \"extractNumber\",\n            value: function(t) {\n                return parseFloat(t.replace(/[^\\d.]*/g, \"\"));\n            }\n        },\n        {\n            key: \"findAncestor\",\n            value: function(t, e) {\n                for(; (t = t.parentElement) && !t.classList.contains(e););\n                return t;\n            }\n        },\n        {\n            key: \"setELstyles\",\n            value: function(t, e) {\n                for(var i in e)e.hasOwnProperty(i) && (t.style.key = e[i]);\n            }\n        },\n        {\n            key: \"preciseAddition\",\n            value: function(t, e) {\n                var i = (String(t).split(\".\")[1] || \"\").length, a = (String(e).split(\".\")[1] || \"\").length, s = Math.pow(10, Math.max(i, a));\n                return (Math.round(t * s) + Math.round(e * s)) / s;\n            }\n        },\n        {\n            key: \"isNumber\",\n            value: function(t) {\n                return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));\n            }\n        },\n        {\n            key: \"isFloat\",\n            value: function(t) {\n                return Number(t) === t && t % 1 != 0;\n            }\n        },\n        {\n            key: \"isMsEdge\",\n            value: function() {\n                var t = window.navigator.userAgent, e = t.indexOf(\"Edge/\");\n                return e > 0 && parseInt(t.substring(e + 5, t.indexOf(\".\", e)), 10);\n            }\n        },\n        {\n            key: \"getGCD\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a = Math.pow(10, i - Math.floor(Math.log10(Math.max(t, e))));\n                for(t = Math.round(Math.abs(t) * a), e = Math.round(Math.abs(e) * a); e;){\n                    var s = e;\n                    e = t % e, t = s;\n                }\n                return t / a;\n            }\n        },\n        {\n            key: \"getPrimeFactors\",\n            value: function(t) {\n                for(var e = [], i = 2; t >= 2;)t % i == 0 ? (e.push(i), t /= i) : i++;\n                return e;\n            }\n        },\n        {\n            key: \"mod\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a = Math.pow(10, i - Math.floor(Math.log10(Math.max(t, e))));\n                return (t = Math.round(Math.abs(t) * a)) % (e = Math.round(Math.abs(e) * a)) / a;\n            }\n        }\n    ]), t;\n}(), y = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"animateLine\",\n            value: function(t, e, i, a) {\n                t.attr(e).animate(a).attr(i);\n            }\n        },\n        {\n            key: \"animateMarker\",\n            value: function(t, e, i, a) {\n                t.attr({\n                    opacity: 0\n                }).animate(e).attr({\n                    opacity: 1\n                }).after(function() {\n                    a();\n                });\n            }\n        },\n        {\n            key: \"animateRect\",\n            value: function(t, e, i, a, s) {\n                t.attr(e).animate(a).attr(i).after(function() {\n                    return s();\n                });\n            }\n        },\n        {\n            key: \"animatePathsGradually\",\n            value: function(t) {\n                var e = t.el, i = t.realIndex, a = t.j, s = t.fill, r = t.pathFrom, n = t.pathTo, o = t.speed, l = t.delay, h = this.w, c = 0;\n                h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && \"bar\" !== h.config.chart.type && (c = 0), this.morphSVG(e, i, a, \"line\" !== h.config.chart.type || h.globals.comboCharts ? s : \"stroke\", r, n, o, l * c);\n            }\n        },\n        {\n            key: \"showDelayedElements\",\n            value: function() {\n                this.w.globals.delayedElements.forEach(function(t) {\n                    var e = t.el;\n                    e.classList.remove(\"apexcharts-element-hidden\"), e.classList.add(\"apexcharts-hidden-element-shown\");\n                });\n            }\n        },\n        {\n            key: \"animationCompleted\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.animationEnded || (e.globals.animationEnded = !0, this.showDelayedElements(), \"function\" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {\n                    el: t,\n                    w: e\n                }));\n            }\n        },\n        {\n            key: \"morphSVG\",\n            value: function(t, e, i, a, s, r, n, o) {\n                var l = this, h = this.w;\n                s || (s = t.attr(\"pathFrom\")), r || (r = t.attr(\"pathTo\"));\n                var c = function(t) {\n                    return \"radar\" === h.config.chart.type && (n = 1), \"M 0 \".concat(h.globals.gridHeight);\n                };\n                (!s || s.indexOf(\"undefined\") > -1 || s.indexOf(\"NaN\") > -1) && (s = c()), (!r.trim() || r.indexOf(\"undefined\") > -1 || r.indexOf(\"NaN\") > -1) && (r = c()), h.globals.shouldAnimate || (n = 1), t.plot(s).animate(1, o).plot(s).animate(n, o).plot(r).after(function() {\n                    v.isNumber(i) ? i === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && l.animationCompleted(t) : \"none\" !== a && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && l.animationCompleted(t), l.showDelayedElements();\n                });\n            }\n        }\n    ]), t;\n}();\nconst w = {}, k = [];\nfunction A(t, e) {\n    if (Array.isArray(t)) for (const i of t)A(i, e);\n    else if (\"object\" != typeof t) S(Object.getOwnPropertyNames(e)), w[t] = Object.assign(w[t] || {}, e);\n    else for(const e in t)A(e, t[e]);\n}\nfunction C(t) {\n    return w[t] || {};\n}\nfunction S(t) {\n    k.push(...t);\n}\nfunction L(t, e) {\n    let i;\n    const a = t.length, s = [];\n    for(i = 0; i < a; i++)s.push(e(t[i]));\n    return s;\n}\nfunction M(t) {\n    return t % 360 * Math.PI / 180;\n}\nfunction P(t) {\n    return t.charAt(0).toUpperCase() + t.slice(1);\n}\nfunction I(t, e, i, a) {\n    return null != e && null != i || (a = a || t.bbox(), null == e ? e = a.width / a.height * i : null == i && (i = a.height / a.width * e)), {\n        width: e,\n        height: i\n    };\n}\nfunction T(t, e) {\n    const i = t.origin;\n    let a = null != t.ox ? t.ox : null != t.originX ? t.originX : \"center\", s = null != t.oy ? t.oy : null != t.originY ? t.originY : \"center\";\n    null != i && ([a, s] = Array.isArray(i) ? i : \"object\" == typeof i ? [\n        i.x,\n        i.y\n    ] : [\n        i,\n        i\n    ]);\n    const r = \"string\" == typeof a, n = \"string\" == typeof s;\n    if (r || n) {\n        const { height: t, width: i, x: o, y: l } = e.bbox();\n        r && (a = a.includes(\"left\") ? o : a.includes(\"right\") ? o + i : o + i / 2), n && (s = s.includes(\"top\") ? l : s.includes(\"bottom\") ? l + t : l + t / 2);\n    }\n    return [\n        a,\n        s\n    ];\n}\nconst z = new Set([\n    \"desc\",\n    \"metadata\",\n    \"title\"\n]), X = (t)=>z.has(t.nodeName), R = (t, e, i = {})=>{\n    const a = {\n        ...e\n    };\n    for(const t in a)a[t].valueOf() === i[t] && delete a[t];\n    Object.keys(a).length ? t.node.setAttribute(\"data-svgjs\", JSON.stringify(a)) : (t.node.removeAttribute(\"data-svgjs\"), t.node.removeAttribute(\"svgjs:data\"));\n}, E = \"http://www.w3.org/2000/svg\", Y = \"http://www.w3.org/2000/xmlns/\", H = \"http://www.w3.org/1999/xlink\", O = {\n    window:  true ? null : 0,\n    document: \"undefined\" == typeof document ? null : document\n};\nfunction F() {\n    return O.window;\n}\nlet D = class {\n};\nconst _ = {}, N = \"___SYMBOL___ROOT___\";\nfunction W(t, e = E) {\n    return O.document.createElementNS(e, t);\n}\nfunction B(t, e = !1) {\n    if (t instanceof D) return t;\n    if (\"object\" == typeof t) return U(t);\n    if (null == t) return new _[N];\n    if (\"string\" == typeof t && \"<\" !== t.charAt(0)) return U(O.document.querySelector(t));\n    const i = e ? O.document.createElement(\"div\") : W(\"svg\");\n    return i.innerHTML = t, t = U(i.firstChild), i.removeChild(i.firstChild), t;\n}\nfunction G(t, e) {\n    return e && (e instanceof O.window.Node || e.ownerDocument && e instanceof e.ownerDocument.defaultView.Node) ? e : W(t);\n}\nfunction V(t) {\n    if (!t) return null;\n    if (t.instance instanceof D) return t.instance;\n    if (\"#document-fragment\" === t.nodeName) return new _.Fragment(t);\n    let e = P(t.nodeName || \"Dom\");\n    return \"LinearGradient\" === e || \"RadialGradient\" === e ? e = \"Gradient\" : _[e] || (e = \"Dom\"), new _[e](t);\n}\nlet U = V;\nfunction q(t, e = t.name, i = !1) {\n    return _[e] = t, i && (_[N] = t), S(Object.getOwnPropertyNames(t.prototype)), t;\n}\nlet Z = 1e3;\nfunction $(t) {\n    return \"Svgjs\" + P(t) + Z++;\n}\nfunction J(t) {\n    for(let e = t.children.length - 1; e >= 0; e--)J(t.children[e]);\n    return t.id ? (t.id = $(t.nodeName), t) : t;\n}\nfunction Q(t, e) {\n    let i, a;\n    for(a = (t = Array.isArray(t) ? t : [\n        t\n    ]).length - 1; a >= 0; a--)for(i in e)t[a].prototype[i] = e[i];\n}\nfunction K(t) {\n    return function(...e) {\n        const i = e[e.length - 1];\n        return !i || i.constructor !== Object || i instanceof Array ? t.apply(this, e) : t.apply(this, e.slice(0, -1)).attr(i);\n    };\n}\nA(\"Dom\", {\n    siblings: function() {\n        return this.parent().children();\n    },\n    position: function() {\n        return this.parent().index(this);\n    },\n    next: function() {\n        return this.siblings()[this.position() + 1];\n    },\n    prev: function() {\n        return this.siblings()[this.position() - 1];\n    },\n    forward: function() {\n        const t = this.position();\n        return this.parent().add(this.remove(), t + 1), this;\n    },\n    backward: function() {\n        const t = this.position();\n        return this.parent().add(this.remove(), t ? t - 1 : 0), this;\n    },\n    front: function() {\n        return this.parent().add(this.remove()), this;\n    },\n    back: function() {\n        return this.parent().add(this.remove(), 0), this;\n    },\n    before: function(t) {\n        (t = B(t)).remove();\n        const e = this.position();\n        return this.parent().add(t, e), this;\n    },\n    after: function(t) {\n        (t = B(t)).remove();\n        const e = this.position();\n        return this.parent().add(t, e + 1), this;\n    },\n    insertBefore: function(t) {\n        return (t = B(t)).before(this), this;\n    },\n    insertAfter: function(t) {\n        return (t = B(t)).after(this), this;\n    }\n});\nconst tt = /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i, et = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i, it = /rgb\\((\\d+),(\\d+),(\\d+)\\)/, at = /(#[a-z_][a-z0-9\\-_]*)/i, st = /\\)\\s*,?\\s*/, rt = /\\s/g, nt = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i, ot = /^rgb\\(/, lt = /^(\\s+)?$/, ht = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, ct = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i, dt = /[\\s,]+/, ut = /[MLHVCSQTAZ]/i;\nfunction gt(t) {\n    const e = Math.round(t), i = Math.max(0, Math.min(255, e)).toString(16);\n    return 1 === i.length ? \"0\" + i : i;\n}\nfunction pt(t, e) {\n    for(let i = e.length; i--;)if (null == t[e[i]]) return !1;\n    return !0;\n}\nfunction ft(t, e, i) {\n    return i < 0 && (i += 1), i > 1 && (i -= 1), i < 1 / 6 ? t + 6 * (e - t) * i : i < .5 ? e : i < 2 / 3 ? t + (e - t) * (2 / 3 - i) * 6 : t;\n}\nA(\"Dom\", {\n    classes: function() {\n        const t = this.attr(\"class\");\n        return null == t ? [] : t.trim().split(dt);\n    },\n    hasClass: function(t) {\n        return -1 !== this.classes().indexOf(t);\n    },\n    addClass: function(t) {\n        if (!this.hasClass(t)) {\n            const e = this.classes();\n            e.push(t), this.attr(\"class\", e.join(\" \"));\n        }\n        return this;\n    },\n    removeClass: function(t) {\n        return this.hasClass(t) && this.attr(\"class\", this.classes().filter(function(e) {\n            return e !== t;\n        }).join(\" \")), this;\n    },\n    toggleClass: function(t) {\n        return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);\n    }\n}), A(\"Dom\", {\n    css: function(t, e) {\n        const i = {};\n        if (0 === arguments.length) return this.node.style.cssText.split(/\\s*;\\s*/).filter(function(t) {\n            return !!t.length;\n        }).forEach(function(t) {\n            const e = t.split(/\\s*:\\s*/);\n            i[e[0]] = e[1];\n        }), i;\n        if (arguments.length < 2) {\n            if (Array.isArray(t)) {\n                for (const e of t){\n                    const t = e;\n                    i[e] = this.node.style.getPropertyValue(t);\n                }\n                return i;\n            }\n            if (\"string\" == typeof t) return this.node.style.getPropertyValue(t);\n            if (\"object\" == typeof t) for(const e in t)this.node.style.setProperty(e, null == t[e] || lt.test(t[e]) ? \"\" : t[e]);\n        }\n        return 2 === arguments.length && this.node.style.setProperty(t, null == e || lt.test(e) ? \"\" : e), this;\n    },\n    show: function() {\n        return this.css(\"display\", \"\");\n    },\n    hide: function() {\n        return this.css(\"display\", \"none\");\n    },\n    visible: function() {\n        return \"none\" !== this.css(\"display\");\n    }\n}), A(\"Dom\", {\n    data: function(t, e, i) {\n        if (null == t) return this.data(L(function(t, e) {\n            let i;\n            const a = t.length, s = [];\n            for(i = 0; i < a; i++)e(t[i]) && s.push(t[i]);\n            return s;\n        }(this.node.attributes, (t)=>0 === t.nodeName.indexOf(\"data-\")), (t)=>t.nodeName.slice(5)));\n        if (t instanceof Array) {\n            const e = {};\n            for (const i of t)e[i] = this.data(i);\n            return e;\n        }\n        if (\"object\" == typeof t) for(e in t)this.data(e, t[e]);\n        else if (arguments.length < 2) try {\n            return JSON.parse(this.attr(\"data-\" + t));\n        } catch (e) {\n            return this.attr(\"data-\" + t);\n        }\n        else this.attr(\"data-\" + t, null === e ? null : !0 === i || \"string\" == typeof e || \"number\" == typeof e ? e : JSON.stringify(e));\n        return this;\n    }\n}), A(\"Dom\", {\n    remember: function(t, e) {\n        if (\"object\" == typeof arguments[0]) for(const e in t)this.remember(e, t[e]);\n        else {\n            if (1 === arguments.length) return this.memory()[t];\n            this.memory()[t] = e;\n        }\n        return this;\n    },\n    forget: function() {\n        if (0 === arguments.length) this._memory = {};\n        else for(let t = arguments.length - 1; t >= 0; t--)delete this.memory()[arguments[t]];\n        return this;\n    },\n    memory: function() {\n        return this._memory = this._memory || {};\n    }\n});\nclass xt {\n    constructor(...t){\n        this.init(...t);\n    }\n    static isColor(t) {\n        return t && (t instanceof xt || this.isRgb(t) || this.test(t));\n    }\n    static isRgb(t) {\n        return t && \"number\" == typeof t.r && \"number\" == typeof t.g && \"number\" == typeof t.b;\n    }\n    static random(t = \"vibrant\", e) {\n        const { random: i, round: a, sin: s, PI: r } = Math;\n        if (\"vibrant\" === t) {\n            const t = 24 * i() + 57, e = 38 * i() + 45, a = 360 * i();\n            return new xt(t, e, a, \"lch\");\n        }\n        if (\"sine\" === t) {\n            const t = a(80 * s(2 * r * (e = null == e ? i() : e) / .5 + .01) + 150), n = a(50 * s(2 * r * e / .5 + 4.6) + 200), o = a(100 * s(2 * r * e / .5 + 2.3) + 150);\n            return new xt(t, n, o);\n        }\n        if (\"pastel\" === t) {\n            const t = 8 * i() + 86, e = 17 * i() + 9, a = 360 * i();\n            return new xt(t, e, a, \"lch\");\n        }\n        if (\"dark\" === t) {\n            const t = 10 + 10 * i(), e = 50 * i() + 86, a = 360 * i();\n            return new xt(t, e, a, \"lch\");\n        }\n        if (\"rgb\" === t) {\n            const t = 255 * i(), e = 255 * i(), a = 255 * i();\n            return new xt(t, e, a);\n        }\n        if (\"lab\" === t) {\n            const t = 100 * i(), e = 256 * i() - 128, a = 256 * i() - 128;\n            return new xt(t, e, a, \"lab\");\n        }\n        if (\"grey\" === t) {\n            const t = 255 * i();\n            return new xt(t, t, t);\n        }\n        throw new Error(\"Unsupported random color mode\");\n    }\n    static test(t) {\n        return \"string\" == typeof t && (nt.test(t) || ot.test(t));\n    }\n    cmyk() {\n        const { _a: t, _b: e, _c: i } = this.rgb(), [a, s, r] = [\n            t,\n            e,\n            i\n        ].map((t)=>t / 255), n = Math.min(1 - a, 1 - s, 1 - r);\n        if (1 === n) return new xt(0, 0, 0, 1, \"cmyk\");\n        return new xt((1 - a - n) / (1 - n), (1 - s - n) / (1 - n), (1 - r - n) / (1 - n), n, \"cmyk\");\n    }\n    hsl() {\n        const { _a: t, _b: e, _c: i } = this.rgb(), [a, s, r] = [\n            t,\n            e,\n            i\n        ].map((t)=>t / 255), n = Math.max(a, s, r), o = Math.min(a, s, r), l = (n + o) / 2, h = n === o, c = n - o;\n        return new xt(360 * (h ? 0 : n === a ? ((s - r) / c + (s < r ? 6 : 0)) / 6 : n === s ? ((r - a) / c + 2) / 6 : n === r ? ((a - s) / c + 4) / 6 : 0), 100 * (h ? 0 : l > .5 ? c / (2 - n - o) : c / (n + o)), 100 * l, \"hsl\");\n    }\n    init(t = 0, e = 0, i = 0, a = 0, s = \"rgb\") {\n        if (t = t || 0, this.space) for(const t in this.space)delete this[this.space[t]];\n        if (\"number\" == typeof t) s = \"string\" == typeof a ? a : s, a = \"string\" == typeof a ? 0 : a, Object.assign(this, {\n            _a: t,\n            _b: e,\n            _c: i,\n            _d: a,\n            space: s\n        });\n        else if (t instanceof Array) this.space = e || (\"string\" == typeof t[3] ? t[3] : t[4]) || \"rgb\", Object.assign(this, {\n            _a: t[0],\n            _b: t[1],\n            _c: t[2],\n            _d: t[3] || 0\n        });\n        else if (t instanceof Object) {\n            const i = function(t, e) {\n                const i = pt(t, \"rgb\") ? {\n                    _a: t.r,\n                    _b: t.g,\n                    _c: t.b,\n                    _d: 0,\n                    space: \"rgb\"\n                } : pt(t, \"xyz\") ? {\n                    _a: t.x,\n                    _b: t.y,\n                    _c: t.z,\n                    _d: 0,\n                    space: \"xyz\"\n                } : pt(t, \"hsl\") ? {\n                    _a: t.h,\n                    _b: t.s,\n                    _c: t.l,\n                    _d: 0,\n                    space: \"hsl\"\n                } : pt(t, \"lab\") ? {\n                    _a: t.l,\n                    _b: t.a,\n                    _c: t.b,\n                    _d: 0,\n                    space: \"lab\"\n                } : pt(t, \"lch\") ? {\n                    _a: t.l,\n                    _b: t.c,\n                    _c: t.h,\n                    _d: 0,\n                    space: \"lch\"\n                } : pt(t, \"cmyk\") ? {\n                    _a: t.c,\n                    _b: t.m,\n                    _c: t.y,\n                    _d: t.k,\n                    space: \"cmyk\"\n                } : {\n                    _a: 0,\n                    _b: 0,\n                    _c: 0,\n                    space: \"rgb\"\n                };\n                return i.space = e || i.space, i;\n            }(t, e);\n            Object.assign(this, i);\n        } else if (\"string\" == typeof t) if (ot.test(t)) {\n            const e = t.replace(rt, \"\"), [i, a, s] = it.exec(e).slice(1, 4).map((t)=>parseInt(t));\n            Object.assign(this, {\n                _a: i,\n                _b: a,\n                _c: s,\n                _d: 0,\n                space: \"rgb\"\n            });\n        } else {\n            if (!nt.test(t)) throw Error(\"Unsupported string format, can't construct Color\");\n            {\n                const e = (t)=>parseInt(t, 16), [, i, a, s] = et.exec(function(t) {\n                    return 4 === t.length ? [\n                        \"#\",\n                        t.substring(1, 2),\n                        t.substring(1, 2),\n                        t.substring(2, 3),\n                        t.substring(2, 3),\n                        t.substring(3, 4),\n                        t.substring(3, 4)\n                    ].join(\"\") : t;\n                }(t)).map(e);\n                Object.assign(this, {\n                    _a: i,\n                    _b: a,\n                    _c: s,\n                    _d: 0,\n                    space: \"rgb\"\n                });\n            }\n        }\n        const { _a: r, _b: n, _c: o, _d: l } = this, h = \"rgb\" === this.space ? {\n            r: r,\n            g: n,\n            b: o\n        } : \"xyz\" === this.space ? {\n            x: r,\n            y: n,\n            z: o\n        } : \"hsl\" === this.space ? {\n            h: r,\n            s: n,\n            l: o\n        } : \"lab\" === this.space ? {\n            l: r,\n            a: n,\n            b: o\n        } : \"lch\" === this.space ? {\n            l: r,\n            c: n,\n            h: o\n        } : \"cmyk\" === this.space ? {\n            c: r,\n            m: n,\n            y: o,\n            k: l\n        } : {};\n        Object.assign(this, h);\n    }\n    lab() {\n        const { x: t, y: e, z: i } = this.xyz();\n        return new xt(116 * e - 16, 500 * (t - e), 200 * (e - i), \"lab\");\n    }\n    lch() {\n        const { l: t, a: e, b: i } = this.lab(), a = Math.sqrt(e ** 2 + i ** 2);\n        let s = 180 * Math.atan2(i, e) / Math.PI;\n        s < 0 && (s *= -1, s = 360 - s);\n        return new xt(t, a, s, \"lch\");\n    }\n    rgb() {\n        if (\"rgb\" === this.space) return this;\n        if (\"lab\" === (t = this.space) || \"xyz\" === t || \"lch\" === t) {\n            let { x: t, y: e, z: i } = this;\n            if (\"lab\" === this.space || \"lch\" === this.space) {\n                let { l: a, a: s, b: r } = this;\n                if (\"lch\" === this.space) {\n                    const { c: t, h: e } = this, i = Math.PI / 180;\n                    s = t * Math.cos(i * e), r = t * Math.sin(i * e);\n                }\n                const n = (a + 16) / 116, o = s / 500 + n, l = n - r / 200, h = 16 / 116, c = .008856, d = 7.787;\n                t = .95047 * (o ** 3 > c ? o ** 3 : (o - h) / d), e = 1 * (n ** 3 > c ? n ** 3 : (n - h) / d), i = 1.08883 * (l ** 3 > c ? l ** 3 : (l - h) / d);\n            }\n            const a = 3.2406 * t + -1.5372 * e + -.4986 * i, s = -.9689 * t + 1.8758 * e + .0415 * i, r = .0557 * t + -.204 * e + 1.057 * i, n = Math.pow, o = .0031308, l = a > o ? 1.055 * n(a, 1 / 2.4) - .055 : 12.92 * a, h = s > o ? 1.055 * n(s, 1 / 2.4) - .055 : 12.92 * s, c = r > o ? 1.055 * n(r, 1 / 2.4) - .055 : 12.92 * r;\n            return new xt(255 * l, 255 * h, 255 * c);\n        }\n        if (\"hsl\" === this.space) {\n            let { h: t, s: e, l: i } = this;\n            if (t /= 360, e /= 100, i /= 100, 0 === e) {\n                i *= 255;\n                return new xt(i, i, i);\n            }\n            const a = i < .5 ? i * (1 + e) : i + e - i * e, s = 2 * i - a, r = 255 * ft(s, a, t + 1 / 3), n = 255 * ft(s, a, t), o = 255 * ft(s, a, t - 1 / 3);\n            return new xt(r, n, o);\n        }\n        if (\"cmyk\" === this.space) {\n            const { c: t, m: e, y: i, k: a } = this, s = 255 * (1 - Math.min(1, t * (1 - a) + a)), r = 255 * (1 - Math.min(1, e * (1 - a) + a)), n = 255 * (1 - Math.min(1, i * (1 - a) + a));\n            return new xt(s, r, n);\n        }\n        return this;\n        var t;\n    }\n    toArray() {\n        const { _a: t, _b: e, _c: i, _d: a, space: s } = this;\n        return [\n            t,\n            e,\n            i,\n            a,\n            s\n        ];\n    }\n    toHex() {\n        const [t, e, i] = this._clamped().map(gt);\n        return `#${t}${e}${i}`;\n    }\n    toRgb() {\n        const [t, e, i] = this._clamped();\n        return `rgb(${t},${e},${i})`;\n    }\n    toString() {\n        return this.toHex();\n    }\n    xyz() {\n        const { _a: t, _b: e, _c: i } = this.rgb(), [a, s, r] = [\n            t,\n            e,\n            i\n        ].map((t)=>t / 255), n = a > .04045 ? Math.pow((a + .055) / 1.055, 2.4) : a / 12.92, o = s > .04045 ? Math.pow((s + .055) / 1.055, 2.4) : s / 12.92, l = r > .04045 ? Math.pow((r + .055) / 1.055, 2.4) : r / 12.92, h = (.4124 * n + .3576 * o + .1805 * l) / .95047, c = (.2126 * n + .7152 * o + .0722 * l) / 1, d = (.0193 * n + .1192 * o + .9505 * l) / 1.08883, u = h > .008856 ? Math.pow(h, 1 / 3) : 7.787 * h + 16 / 116, g = c > .008856 ? Math.pow(c, 1 / 3) : 7.787 * c + 16 / 116, p = d > .008856 ? Math.pow(d, 1 / 3) : 7.787 * d + 16 / 116;\n        return new xt(u, g, p, \"xyz\");\n    }\n    _clamped() {\n        const { _a: t, _b: e, _c: i } = this.rgb(), { max: a, min: s, round: r } = Math;\n        return [\n            t,\n            e,\n            i\n        ].map((t)=>a(0, s(r(t), 255)));\n    }\n}\nclass bt {\n    constructor(...t){\n        this.init(...t);\n    }\n    clone() {\n        return new bt(this);\n    }\n    init(t, e) {\n        const i = 0, a = 0, s = Array.isArray(t) ? {\n            x: t[0],\n            y: t[1]\n        } : \"object\" == typeof t ? {\n            x: t.x,\n            y: t.y\n        } : {\n            x: t,\n            y: e\n        };\n        return this.x = null == s.x ? i : s.x, this.y = null == s.y ? a : s.y, this;\n    }\n    toArray() {\n        return [\n            this.x,\n            this.y\n        ];\n    }\n    transform(t) {\n        return this.clone().transformO(t);\n    }\n    transformO(t) {\n        vt.isMatrixLike(t) || (t = new vt(t));\n        const { x: e, y: i } = this;\n        return this.x = t.a * e + t.c * i + t.e, this.y = t.b * e + t.d * i + t.f, this;\n    }\n}\nfunction mt(t, e, i) {\n    return Math.abs(e - t) < (i || 1e-6);\n}\nclass vt {\n    constructor(...t){\n        this.init(...t);\n    }\n    static formatTransforms(t) {\n        const e = \"both\" === t.flip || !0 === t.flip, i = t.flip && (e || \"x\" === t.flip) ? -1 : 1, a = t.flip && (e || \"y\" === t.flip) ? -1 : 1, s = t.skew && t.skew.length ? t.skew[0] : isFinite(t.skew) ? t.skew : isFinite(t.skewX) ? t.skewX : 0, r = t.skew && t.skew.length ? t.skew[1] : isFinite(t.skew) ? t.skew : isFinite(t.skewY) ? t.skewY : 0, n = t.scale && t.scale.length ? t.scale[0] * i : isFinite(t.scale) ? t.scale * i : isFinite(t.scaleX) ? t.scaleX * i : i, o = t.scale && t.scale.length ? t.scale[1] * a : isFinite(t.scale) ? t.scale * a : isFinite(t.scaleY) ? t.scaleY * a : a, l = t.shear || 0, h = t.rotate || t.theta || 0, c = new bt(t.origin || t.around || t.ox || t.originX, t.oy || t.originY), d = c.x, u = c.y, g = new bt(t.position || t.px || t.positionX || NaN, t.py || t.positionY || NaN), p = g.x, f = g.y, x = new bt(t.translate || t.tx || t.translateX, t.ty || t.translateY), b = x.x, m = x.y, v = new bt(t.relative || t.rx || t.relativeX, t.ry || t.relativeY);\n        return {\n            scaleX: n,\n            scaleY: o,\n            skewX: s,\n            skewY: r,\n            shear: l,\n            theta: h,\n            rx: v.x,\n            ry: v.y,\n            tx: b,\n            ty: m,\n            ox: d,\n            oy: u,\n            px: p,\n            py: f\n        };\n    }\n    static fromArray(t) {\n        return {\n            a: t[0],\n            b: t[1],\n            c: t[2],\n            d: t[3],\n            e: t[4],\n            f: t[5]\n        };\n    }\n    static isMatrixLike(t) {\n        return null != t.a || null != t.b || null != t.c || null != t.d || null != t.e || null != t.f;\n    }\n    static matrixMultiply(t, e, i) {\n        const a = t.a * e.a + t.c * e.b, s = t.b * e.a + t.d * e.b, r = t.a * e.c + t.c * e.d, n = t.b * e.c + t.d * e.d, o = t.e + t.a * e.e + t.c * e.f, l = t.f + t.b * e.e + t.d * e.f;\n        return i.a = a, i.b = s, i.c = r, i.d = n, i.e = o, i.f = l, i;\n    }\n    around(t, e, i) {\n        return this.clone().aroundO(t, e, i);\n    }\n    aroundO(t, e, i) {\n        const a = t || 0, s = e || 0;\n        return this.translateO(-a, -s).lmultiplyO(i).translateO(a, s);\n    }\n    clone() {\n        return new vt(this);\n    }\n    decompose(t = 0, e = 0) {\n        const i = this.a, a = this.b, s = this.c, r = this.d, n = this.e, o = this.f, l = i * r - a * s, h = l > 0 ? 1 : -1, c = h * Math.sqrt(i * i + a * a), d = Math.atan2(h * a, h * i), u = 180 / Math.PI * d, g = Math.cos(d), p = Math.sin(d), f = (i * s + a * r) / l, x = s * c / (f * i - a) || r * c / (f * a + i);\n        return {\n            scaleX: c,\n            scaleY: x,\n            shear: f,\n            rotate: u,\n            translateX: n - t + t * g * c + e * (f * g * c - p * x),\n            translateY: o - e + t * p * c + e * (f * p * c + g * x),\n            originX: t,\n            originY: e,\n            a: this.a,\n            b: this.b,\n            c: this.c,\n            d: this.d,\n            e: this.e,\n            f: this.f\n        };\n    }\n    equals(t) {\n        if (t === this) return !0;\n        const e = new vt(t);\n        return mt(this.a, e.a) && mt(this.b, e.b) && mt(this.c, e.c) && mt(this.d, e.d) && mt(this.e, e.e) && mt(this.f, e.f);\n    }\n    flip(t, e) {\n        return this.clone().flipO(t, e);\n    }\n    flipO(t, e) {\n        return \"x\" === t ? this.scaleO(-1, 1, e, 0) : \"y\" === t ? this.scaleO(1, -1, 0, e) : this.scaleO(-1, -1, t, e || t);\n    }\n    init(t) {\n        const e = vt.fromArray([\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ]);\n        return t = t instanceof Gt ? t.matrixify() : \"string\" == typeof t ? vt.fromArray(t.split(dt).map(parseFloat)) : Array.isArray(t) ? vt.fromArray(t) : \"object\" == typeof t && vt.isMatrixLike(t) ? t : \"object\" == typeof t ? (new vt).transform(t) : 6 === arguments.length ? vt.fromArray([].slice.call(arguments)) : e, this.a = null != t.a ? t.a : e.a, this.b = null != t.b ? t.b : e.b, this.c = null != t.c ? t.c : e.c, this.d = null != t.d ? t.d : e.d, this.e = null != t.e ? t.e : e.e, this.f = null != t.f ? t.f : e.f, this;\n    }\n    inverse() {\n        return this.clone().inverseO();\n    }\n    inverseO() {\n        const t = this.a, e = this.b, i = this.c, a = this.d, s = this.e, r = this.f, n = t * a - e * i;\n        if (!n) throw new Error(\"Cannot invert \" + this);\n        const o = a / n, l = -e / n, h = -i / n, c = t / n, d = -(o * s + h * r), u = -(l * s + c * r);\n        return this.a = o, this.b = l, this.c = h, this.d = c, this.e = d, this.f = u, this;\n    }\n    lmultiply(t) {\n        return this.clone().lmultiplyO(t);\n    }\n    lmultiplyO(t) {\n        const e = t instanceof vt ? t : new vt(t);\n        return vt.matrixMultiply(e, this, this);\n    }\n    multiply(t) {\n        return this.clone().multiplyO(t);\n    }\n    multiplyO(t) {\n        const e = t instanceof vt ? t : new vt(t);\n        return vt.matrixMultiply(this, e, this);\n    }\n    rotate(t, e, i) {\n        return this.clone().rotateO(t, e, i);\n    }\n    rotateO(t, e = 0, i = 0) {\n        t = M(t);\n        const a = Math.cos(t), s = Math.sin(t), { a: r, b: n, c: o, d: l, e: h, f: c } = this;\n        return this.a = r * a - n * s, this.b = n * a + r * s, this.c = o * a - l * s, this.d = l * a + o * s, this.e = h * a - c * s + i * s - e * a + e, this.f = c * a + h * s - e * s - i * a + i, this;\n    }\n    scale() {\n        return this.clone().scaleO(...arguments);\n    }\n    scaleO(t, e = t, i = 0, a = 0) {\n        3 === arguments.length && (a = i, i = e, e = t);\n        const { a: s, b: r, c: n, d: o, e: l, f: h } = this;\n        return this.a = s * t, this.b = r * e, this.c = n * t, this.d = o * e, this.e = l * t - i * t + i, this.f = h * e - a * e + a, this;\n    }\n    shear(t, e, i) {\n        return this.clone().shearO(t, e, i);\n    }\n    shearO(t, e = 0, i = 0) {\n        const { a: a, b: s, c: r, d: n, e: o, f: l } = this;\n        return this.a = a + s * t, this.c = r + n * t, this.e = o + l * t - i * t, this;\n    }\n    skew() {\n        return this.clone().skewO(...arguments);\n    }\n    skewO(t, e = t, i = 0, a = 0) {\n        3 === arguments.length && (a = i, i = e, e = t), t = M(t), e = M(e);\n        const s = Math.tan(t), r = Math.tan(e), { a: n, b: o, c: l, d: h, e: c, f: d } = this;\n        return this.a = n + o * s, this.b = o + n * r, this.c = l + h * s, this.d = h + l * r, this.e = c + d * s - a * s, this.f = d + c * r - i * r, this;\n    }\n    skewX(t, e, i) {\n        return this.skew(t, 0, e, i);\n    }\n    skewY(t, e, i) {\n        return this.skew(0, t, e, i);\n    }\n    toArray() {\n        return [\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        ];\n    }\n    toString() {\n        return \"matrix(\" + this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d + \",\" + this.e + \",\" + this.f + \")\";\n    }\n    transform(t) {\n        if (vt.isMatrixLike(t)) {\n            return new vt(t).multiplyO(this);\n        }\n        const e = vt.formatTransforms(t), { x: i, y: a } = new bt(e.ox, e.oy).transform(this), s = (new vt).translateO(e.rx, e.ry).lmultiplyO(this).translateO(-i, -a).scaleO(e.scaleX, e.scaleY).skewO(e.skewX, e.skewY).shearO(e.shear).rotateO(e.theta).translateO(i, a);\n        if (isFinite(e.px) || isFinite(e.py)) {\n            const t = new bt(i, a).transform(s), r = isFinite(e.px) ? e.px - t.x : 0, n = isFinite(e.py) ? e.py - t.y : 0;\n            s.translateO(r, n);\n        }\n        return s.translateO(e.tx, e.ty), s;\n    }\n    translate(t, e) {\n        return this.clone().translateO(t, e);\n    }\n    translateO(t, e) {\n        return this.e += t || 0, this.f += e || 0, this;\n    }\n    valueOf() {\n        return {\n            a: this.a,\n            b: this.b,\n            c: this.c,\n            d: this.d,\n            e: this.e,\n            f: this.f\n        };\n    }\n}\nfunction yt() {\n    if (!yt.nodes) {\n        const t = B().size(2, 0);\n        t.node.style.cssText = [\n            \"opacity: 0\",\n            \"position: absolute\",\n            \"left: -100%\",\n            \"top: -100%\",\n            \"overflow: hidden\"\n        ].join(\";\"), t.attr(\"focusable\", \"false\"), t.attr(\"aria-hidden\", \"true\");\n        const e = t.path().node;\n        yt.nodes = {\n            svg: t,\n            path: e\n        };\n    }\n    if (!yt.nodes.svg.node.parentNode) {\n        const t = O.document.body || O.document.documentElement;\n        yt.nodes.svg.addTo(t);\n    }\n    return yt.nodes;\n}\nfunction wt(t) {\n    return !(t.width || t.height || t.x || t.y);\n}\nq(vt, \"Matrix\");\nclass kt {\n    constructor(...t){\n        this.init(...t);\n    }\n    addOffset() {\n        return this.x += O.window.pageXOffset, this.y += O.window.pageYOffset, new kt(this);\n    }\n    init(t) {\n        return t = \"string\" == typeof t ? t.split(dt).map(parseFloat) : Array.isArray(t) ? t : \"object\" == typeof t ? [\n            null != t.left ? t.left : t.x,\n            null != t.top ? t.top : t.y,\n            t.width,\n            t.height\n        ] : 4 === arguments.length ? [].slice.call(arguments) : [\n            0,\n            0,\n            0,\n            0\n        ], this.x = t[0] || 0, this.y = t[1] || 0, this.width = this.w = t[2] || 0, this.height = this.h = t[3] || 0, this.x2 = this.x + this.w, this.y2 = this.y + this.h, this.cx = this.x + this.w / 2, this.cy = this.y + this.h / 2, this;\n    }\n    isNulled() {\n        return wt(this);\n    }\n    merge(t) {\n        const e = Math.min(this.x, t.x), i = Math.min(this.y, t.y), a = Math.max(this.x + this.width, t.x + t.width) - e, s = Math.max(this.y + this.height, t.y + t.height) - i;\n        return new kt(e, i, a, s);\n    }\n    toArray() {\n        return [\n            this.x,\n            this.y,\n            this.width,\n            this.height\n        ];\n    }\n    toString() {\n        return this.x + \" \" + this.y + \" \" + this.width + \" \" + this.height;\n    }\n    transform(t) {\n        t instanceof vt || (t = new vt(t));\n        let e = 1 / 0, i = -1 / 0, a = 1 / 0, s = -1 / 0;\n        return [\n            new bt(this.x, this.y),\n            new bt(this.x2, this.y),\n            new bt(this.x, this.y2),\n            new bt(this.x2, this.y2)\n        ].forEach(function(r) {\n            r = r.transform(t), e = Math.min(e, r.x), i = Math.max(i, r.x), a = Math.min(a, r.y), s = Math.max(s, r.y);\n        }), new kt(e, a, i - e, s - a);\n    }\n}\nfunction At(t, e, i) {\n    let a;\n    try {\n        if (a = e(t.node), wt(a) && (s = t.node) !== O.document && !(O.document.documentElement.contains || function(t) {\n            for(; t.parentNode;)t = t.parentNode;\n            return t === O.document;\n        }).call(O.document.documentElement, s)) throw new Error(\"Element not in the dom\");\n    } catch (e) {\n        a = i(t);\n    }\n    var s;\n    return a;\n}\nA({\n    viewbox: {\n        viewbox (t, e, i, a) {\n            return null == t ? new kt(this.attr(\"viewBox\")) : this.attr(\"viewBox\", new kt(t, e, i, a));\n        },\n        zoom (t, e) {\n            let { width: i, height: a } = this.attr([\n                \"width\",\n                \"height\"\n            ]);\n            if ((i || a) && \"string\" != typeof i && \"string\" != typeof a || (i = this.node.clientWidth, a = this.node.clientHeight), !i || !a) throw new Error(\"Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element\");\n            const s = this.viewbox(), r = i / s.width, n = a / s.height, o = Math.min(r, n);\n            if (null == t) return o;\n            let l = o / t;\n            l === 1 / 0 && (l = Number.MAX_SAFE_INTEGER / 100), e = e || new bt(i / 2 / r + s.x, a / 2 / n + s.y);\n            const h = new kt(s).transform(new vt({\n                scale: l,\n                origin: e\n            }));\n            return this.viewbox(h);\n        }\n    }\n}), q(kt, \"Box\");\nclass Ct extends Array {\n    constructor(t = [], ...e){\n        if (super(t, ...e), \"number\" == typeof t) return this;\n        this.length = 0, this.push(...t);\n    }\n}\nQ([\n    Ct\n], {\n    each (t, ...e) {\n        return \"function\" == typeof t ? this.map((e, i, a)=>t.call(e, e, i, a)) : this.map((i)=>i[t](...e));\n    },\n    toArray () {\n        return Array.prototype.concat.apply([], this);\n    }\n});\nconst St = [\n    \"toArray\",\n    \"constructor\",\n    \"each\"\n];\nfunction Lt(t, e) {\n    return new Ct(L((e || O.document).querySelectorAll(t), function(t) {\n        return V(t);\n    }));\n}\nCt.extend = function(t) {\n    t = t.reduce((t, e)=>(St.includes(e) || \"_\" === e[0] || (e in Array.prototype && (t[\"$\" + e] = Array.prototype[e]), t[e] = function(...t) {\n            return this.each(e, ...t);\n        }), t), {}), Q([\n        Ct\n    ], t);\n};\nlet Mt = 0;\nconst Pt = {};\nfunction It(t) {\n    let e = t.getEventHolder();\n    return e === O.window && (e = Pt), e.events || (e.events = {}), e.events;\n}\nfunction Tt(t) {\n    return t.getEventTarget();\n}\nfunction zt(t, e, i, a, s) {\n    const r = i.bind(a || t), n = B(t), o = It(n), l = Tt(n);\n    e = Array.isArray(e) ? e : e.split(dt), i._svgjsListenerId || (i._svgjsListenerId = ++Mt), e.forEach(function(t) {\n        const e = t.split(\".\")[0], a = t.split(\".\")[1] || \"*\";\n        o[e] = o[e] || {}, o[e][a] = o[e][a] || {}, o[e][a][i._svgjsListenerId] = r, l.addEventListener(e, r, s || !1);\n    });\n}\nfunction Xt(t, e, i, a) {\n    const s = B(t), r = It(s), n = Tt(s);\n    (\"function\" != typeof i || (i = i._svgjsListenerId)) && (e = Array.isArray(e) ? e : (e || \"\").split(dt)).forEach(function(t) {\n        const e = t && t.split(\".\")[0], o = t && t.split(\".\")[1];\n        let l, h;\n        if (i) r[e] && r[e][o || \"*\"] && (n.removeEventListener(e, r[e][o || \"*\"][i], a || !1), delete r[e][o || \"*\"][i]);\n        else if (e && o) {\n            if (r[e] && r[e][o]) {\n                for(h in r[e][o])Xt(n, [\n                    e,\n                    o\n                ].join(\".\"), h);\n                delete r[e][o];\n            }\n        } else if (o) for(t in r)for(l in r[t])o === l && Xt(n, [\n            t,\n            o\n        ].join(\".\"));\n        else if (e) {\n            if (r[e]) {\n                for(l in r[e])Xt(n, [\n                    e,\n                    l\n                ].join(\".\"));\n                delete r[e];\n            }\n        } else {\n            for(t in r)Xt(n, t);\n            !function(t) {\n                let e = t.getEventHolder();\n                e === O.window && (e = Pt), e.events && (e.events = {});\n            }(s);\n        }\n    });\n}\nclass Rt extends D {\n    addEventListener() {}\n    dispatch(t, e, i) {\n        return function(t, e, i, a) {\n            const s = Tt(t);\n            return e instanceof O.window.Event || (e = new O.window.CustomEvent(e, {\n                detail: i,\n                cancelable: !0,\n                ...a\n            })), s.dispatchEvent(e), e;\n        }(this, t, e, i);\n    }\n    dispatchEvent(t) {\n        const e = this.getEventHolder().events;\n        if (!e) return !0;\n        const i = e[t.type];\n        for(const e in i)for(const a in i[e])i[e][a](t);\n        return !t.defaultPrevented;\n    }\n    fire(t, e, i) {\n        return this.dispatch(t, e, i), this;\n    }\n    getEventHolder() {\n        return this;\n    }\n    getEventTarget() {\n        return this;\n    }\n    off(t, e, i) {\n        return Xt(this, t, e, i), this;\n    }\n    on(t, e, i, a) {\n        return zt(this, t, e, i, a), this;\n    }\n    removeEventListener() {}\n}\nfunction Et() {}\nq(Rt, \"EventTarget\");\nconst Yt = 400, Ht = \">\", Ot = 0, Ft = {\n    \"fill-opacity\": 1,\n    \"stroke-opacity\": 1,\n    \"stroke-width\": 0,\n    \"stroke-linejoin\": \"miter\",\n    \"stroke-linecap\": \"butt\",\n    fill: \"#000000\",\n    stroke: \"#000000\",\n    opacity: 1,\n    x: 0,\n    y: 0,\n    cx: 0,\n    cy: 0,\n    width: 0,\n    height: 0,\n    r: 0,\n    rx: 0,\n    ry: 0,\n    offset: 0,\n    \"stop-opacity\": 1,\n    \"stop-color\": \"#000000\",\n    \"text-anchor\": \"start\"\n};\nclass Dt extends Array {\n    constructor(...t){\n        super(...t), this.init(...t);\n    }\n    clone() {\n        return new this.constructor(this);\n    }\n    init(t) {\n        return \"number\" == typeof t || (this.length = 0, this.push(...this.parse(t))), this;\n    }\n    parse(t = []) {\n        return t instanceof Array ? t : t.trim().split(dt).map(parseFloat);\n    }\n    toArray() {\n        return Array.prototype.concat.apply([], this);\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toString() {\n        return this.join(\" \");\n    }\n    valueOf() {\n        const t = [];\n        return t.push(...this), t;\n    }\n}\nclass _t {\n    constructor(...t){\n        this.init(...t);\n    }\n    convert(t) {\n        return new _t(this.value, t);\n    }\n    divide(t) {\n        return t = new _t(t), new _t(this / t, this.unit || t.unit);\n    }\n    init(t, e) {\n        return e = Array.isArray(t) ? t[1] : e, t = Array.isArray(t) ? t[0] : t, this.value = 0, this.unit = e || \"\", \"number\" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : \"string\" == typeof t ? (e = t.match(tt)) && (this.value = parseFloat(e[1]), \"%\" === e[5] ? this.value /= 100 : \"s\" === e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof _t && (this.value = t.valueOf(), this.unit = t.unit), this;\n    }\n    minus(t) {\n        return t = new _t(t), new _t(this - t, this.unit || t.unit);\n    }\n    plus(t) {\n        return t = new _t(t), new _t(this + t, this.unit || t.unit);\n    }\n    times(t) {\n        return t = new _t(t), new _t(this * t, this.unit || t.unit);\n    }\n    toArray() {\n        return [\n            this.value,\n            this.unit\n        ];\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return (\"%\" === this.unit ? ~~(1e8 * this.value) / 1e6 : \"s\" === this.unit ? this.value / 1e3 : this.value) + this.unit;\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nconst Nt = new Set([\n    \"fill\",\n    \"stroke\",\n    \"color\",\n    \"bgcolor\",\n    \"stop-color\",\n    \"flood-color\",\n    \"lighting-color\"\n]), Wt = [];\nclass Bt extends Rt {\n    constructor(t, e){\n        super(), this.node = t, this.type = t.nodeName, e && t !== e && this.attr(e);\n    }\n    add(t, e) {\n        return (t = B(t)).removeNamespace && this.node instanceof O.window.SVGElement && t.removeNamespace(), null == e ? this.node.appendChild(t.node) : t.node !== this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;\n    }\n    addTo(t, e) {\n        return B(t).put(this, e);\n    }\n    children() {\n        return new Ct(L(this.node.children, function(t) {\n            return V(t);\n        }));\n    }\n    clear() {\n        for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);\n        return this;\n    }\n    clone(t = !0, e = !0) {\n        this.writeDataToDom();\n        let i = this.node.cloneNode(t);\n        return e && (i = J(i)), new this.constructor(i);\n    }\n    each(t, e) {\n        const i = this.children();\n        let a, s;\n        for(a = 0, s = i.length; a < s; a++)t.apply(i[a], [\n            a,\n            i\n        ]), e && i[a].each(t, e);\n        return this;\n    }\n    element(t, e) {\n        return this.put(new Bt(W(t), e));\n    }\n    first() {\n        return V(this.node.firstChild);\n    }\n    get(t) {\n        return V(this.node.childNodes[t]);\n    }\n    getEventHolder() {\n        return this.node;\n    }\n    getEventTarget() {\n        return this.node;\n    }\n    has(t) {\n        return this.index(t) >= 0;\n    }\n    html(t, e) {\n        return this.xml(t, e, \"http://www.w3.org/1999/xhtml\");\n    }\n    id(t) {\n        return void 0 !== t || this.node.id || (this.node.id = $(this.type)), this.attr(\"id\", t);\n    }\n    index(t) {\n        return [].slice.call(this.node.childNodes).indexOf(t.node);\n    }\n    last() {\n        return V(this.node.lastChild);\n    }\n    matches(t) {\n        const e = this.node, i = e.matches || e.matchesSelector || e.msMatchesSelector || e.mozMatchesSelector || e.webkitMatchesSelector || e.oMatchesSelector || null;\n        return i && i.call(e, t);\n    }\n    parent(t) {\n        let e = this;\n        if (!e.node.parentNode) return null;\n        if (e = V(e.node.parentNode), !t) return e;\n        do {\n            if (\"string\" == typeof t ? e.matches(t) : e instanceof t) return e;\n        }while (e = V(e.node.parentNode));\n        return e;\n    }\n    put(t, e) {\n        return t = B(t), this.add(t, e), t;\n    }\n    putIn(t, e) {\n        return B(t).add(this, e);\n    }\n    remove() {\n        return this.parent() && this.parent().removeElement(this), this;\n    }\n    removeElement(t) {\n        return this.node.removeChild(t.node), this;\n    }\n    replace(t) {\n        return t = B(t), this.node.parentNode && this.node.parentNode.replaceChild(t.node, this.node), t;\n    }\n    round(t = 2, e = null) {\n        const i = 10 ** t, a = this.attr(e);\n        for(const t in a)\"number\" == typeof a[t] && (a[t] = Math.round(a[t] * i) / i);\n        return this.attr(a), this;\n    }\n    svg(t, e) {\n        return this.xml(t, e, E);\n    }\n    toString() {\n        return this.id();\n    }\n    words(t) {\n        return this.node.textContent = t, this;\n    }\n    wrap(t) {\n        const e = this.parent();\n        if (!e) return this.addTo(t);\n        const i = e.index(this);\n        return e.put(t, i).put(this);\n    }\n    writeDataToDom() {\n        return this.each(function() {\n            this.writeDataToDom();\n        }), this;\n    }\n    xml(t, e, i) {\n        if (\"boolean\" == typeof t && (i = e, e = t, t = null), null == t || \"function\" == typeof t) {\n            e = null == e || e, this.writeDataToDom();\n            let i = this;\n            if (null != t) {\n                if (i = V(i.node.cloneNode(!0)), e) {\n                    const e = t(i);\n                    if (i = e || i, !1 === e) return \"\";\n                }\n                i.each(function() {\n                    const e = t(this), i = e || this;\n                    !1 === e ? this.remove() : e && this !== i && this.replace(i);\n                }, !0);\n            }\n            return e ? i.node.outerHTML : i.node.innerHTML;\n        }\n        e = null != e && e;\n        const a = W(\"wrapper\", i), s = O.document.createDocumentFragment();\n        a.innerHTML = t;\n        for(let t = a.children.length; t--;)s.appendChild(a.firstElementChild);\n        const r = this.parent();\n        return e ? this.replace(s) && r : this.add(s);\n    }\n}\nQ(Bt, {\n    attr: function(t, e, i) {\n        if (null == t) {\n            t = {}, e = this.node.attributes;\n            for (const i of e)t[i.nodeName] = ht.test(i.nodeValue) ? parseFloat(i.nodeValue) : i.nodeValue;\n            return t;\n        }\n        if (t instanceof Array) return t.reduce((t, e)=>(t[e] = this.attr(e), t), {});\n        if (\"object\" == typeof t && t.constructor === Object) for(e in t)this.attr(e, t[e]);\n        else if (null === e) this.node.removeAttribute(t);\n        else {\n            if (null == e) return null == (e = this.node.getAttribute(t)) ? Ft[t] : ht.test(e) ? parseFloat(e) : e;\n            \"number\" == typeof (e = Wt.reduce((e, i)=>i(t, e, this), e)) ? e = new _t(e) : Nt.has(t) && xt.isColor(e) ? e = new xt(e) : e.constructor === Array && (e = new Dt(e)), \"leading\" === t ? this.leading && this.leading(e) : \"string\" == typeof i ? this.node.setAttributeNS(i, t, e.toString()) : this.node.setAttribute(t, e.toString()), !this.rebuild || \"font-size\" !== t && \"x\" !== t || this.rebuild();\n        }\n        return this;\n    },\n    find: function(t) {\n        return Lt(t, this.node);\n    },\n    findOne: function(t) {\n        return V(this.node.querySelector(t));\n    }\n}), q(Bt, \"Dom\");\nlet Gt = class extends Bt {\n    constructor(t, e){\n        super(t, e), this.dom = {}, this.node.instance = this, (t.hasAttribute(\"data-svgjs\") || t.hasAttribute(\"svgjs:data\")) && this.setData(JSON.parse(t.getAttribute(\"data-svgjs\")) ?? JSON.parse(t.getAttribute(\"svgjs:data\")) ?? {});\n    }\n    center(t, e) {\n        return this.cx(t).cy(e);\n    }\n    cx(t) {\n        return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);\n    }\n    cy(t) {\n        return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);\n    }\n    defs() {\n        const t = this.root();\n        return t && t.defs();\n    }\n    dmove(t, e) {\n        return this.dx(t).dy(e);\n    }\n    dx(t = 0) {\n        return this.x(new _t(t).plus(this.x()));\n    }\n    dy(t = 0) {\n        return this.y(new _t(t).plus(this.y()));\n    }\n    getEventHolder() {\n        return this;\n    }\n    height(t) {\n        return this.attr(\"height\", t);\n    }\n    move(t, e) {\n        return this.x(t).y(e);\n    }\n    parents(t = this.root()) {\n        const e = \"string\" == typeof t;\n        e || (t = B(t));\n        const i = new Ct;\n        let a = this;\n        for(; (a = a.parent()) && a.node !== O.document && \"#document-fragment\" !== a.nodeName && (i.push(a), e || a.node !== t.node) && (!e || !a.matches(t));)if (a.node === this.root().node) return null;\n        return i;\n    }\n    reference(t) {\n        if (!(t = this.attr(t))) return null;\n        const e = (t + \"\").match(at);\n        return e ? B(e[1]) : null;\n    }\n    root() {\n        const t = this.parent(function(t) {\n            return _[t];\n        }(N));\n        return t && t.root();\n    }\n    setData(t) {\n        return this.dom = t, this;\n    }\n    size(t, e) {\n        const i = I(this, t, e);\n        return this.width(new _t(i.width)).height(new _t(i.height));\n    }\n    width(t) {\n        return this.attr(\"width\", t);\n    }\n    writeDataToDom() {\n        return R(this, this.dom), super.writeDataToDom();\n    }\n    x(t) {\n        return this.attr(\"x\", t);\n    }\n    y(t) {\n        return this.attr(\"y\", t);\n    }\n};\nQ(Gt, {\n    bbox: function() {\n        const t = At(this, (t)=>t.getBBox(), (t)=>{\n            try {\n                const e = t.clone().addTo(yt().svg).show(), i = e.node.getBBox();\n                return e.remove(), i;\n            } catch (e) {\n                throw new Error(`Getting bbox of element \"${t.node.nodeName}\" is not possible: ${e.toString()}`);\n            }\n        });\n        return new kt(t);\n    },\n    rbox: function(t) {\n        const e = At(this, (t)=>t.getBoundingClientRect(), (t)=>{\n            throw new Error(`Getting rbox of element \"${t.node.nodeName}\" is not possible`);\n        }), i = new kt(e);\n        return t ? i.transform(t.screenCTM().inverseO()) : i.addOffset();\n    },\n    inside: function(t, e) {\n        const i = this.bbox();\n        return t > i.x && e > i.y && t < i.x + i.width && e < i.y + i.height;\n    },\n    point: function(t, e) {\n        return new bt(t, e).transformO(this.screenCTM().inverseO());\n    },\n    ctm: function() {\n        return new vt(this.node.getCTM());\n    },\n    screenCTM: function() {\n        try {\n            if (\"function\" == typeof this.isRoot && !this.isRoot()) {\n                const t = this.rect(1, 1), e = t.node.getScreenCTM();\n                return t.remove(), new vt(e);\n            }\n            return new vt(this.node.getScreenCTM());\n        } catch (t) {\n            return console.warn(`Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`), new vt;\n        }\n    }\n}), q(Gt, \"Element\");\nconst jt = {\n    stroke: [\n        \"color\",\n        \"width\",\n        \"opacity\",\n        \"linecap\",\n        \"linejoin\",\n        \"miterlimit\",\n        \"dasharray\",\n        \"dashoffset\"\n    ],\n    fill: [\n        \"color\",\n        \"opacity\",\n        \"rule\"\n    ],\n    prefix: function(t, e) {\n        return \"color\" === e ? t : t + \"-\" + e;\n    }\n};\n[\n    \"fill\",\n    \"stroke\"\n].forEach(function(t) {\n    const e = {};\n    let i;\n    e[t] = function(e) {\n        if (void 0 === e) return this.attr(t);\n        if (\"string\" == typeof e || e instanceof xt || xt.isRgb(e) || e instanceof Gt) this.attr(t, e);\n        else for(i = jt[t].length - 1; i >= 0; i--)null != e[jt[t][i]] && this.attr(jt.prefix(t, jt[t][i]), e[jt[t][i]]);\n        return this;\n    }, A([\n        \"Element\",\n        \"Runner\"\n    ], e);\n}), A([\n    \"Element\",\n    \"Runner\"\n], {\n    matrix: function(t, e, i, a, s, r) {\n        return null == t ? new vt(this) : this.attr(\"transform\", new vt(t, e, i, a, s, r));\n    },\n    rotate: function(t, e, i) {\n        return this.transform({\n            rotate: t,\n            ox: e,\n            oy: i\n        }, !0);\n    },\n    skew: function(t, e, i, a) {\n        return 1 === arguments.length || 3 === arguments.length ? this.transform({\n            skew: t,\n            ox: e,\n            oy: i\n        }, !0) : this.transform({\n            skew: [\n                t,\n                e\n            ],\n            ox: i,\n            oy: a\n        }, !0);\n    },\n    shear: function(t, e, i) {\n        return this.transform({\n            shear: t,\n            ox: e,\n            oy: i\n        }, !0);\n    },\n    scale: function(t, e, i, a) {\n        return 1 === arguments.length || 3 === arguments.length ? this.transform({\n            scale: t,\n            ox: e,\n            oy: i\n        }, !0) : this.transform({\n            scale: [\n                t,\n                e\n            ],\n            ox: i,\n            oy: a\n        }, !0);\n    },\n    translate: function(t, e) {\n        return this.transform({\n            translate: [\n                t,\n                e\n            ]\n        }, !0);\n    },\n    relative: function(t, e) {\n        return this.transform({\n            relative: [\n                t,\n                e\n            ]\n        }, !0);\n    },\n    flip: function(t = \"both\", e = \"center\") {\n        return -1 === \"xybothtrue\".indexOf(t) && (e = t, t = \"both\"), this.transform({\n            flip: t,\n            origin: e\n        }, !0);\n    },\n    opacity: function(t) {\n        return this.attr(\"opacity\", t);\n    }\n}), A(\"radius\", {\n    radius: function(t, e = t) {\n        return \"radialGradient\" === (this._element || this).type ? this.attr(\"r\", new _t(t)) : this.rx(t).ry(e);\n    }\n}), A(\"Path\", {\n    length: function() {\n        return this.node.getTotalLength();\n    },\n    pointAt: function(t) {\n        return new bt(this.node.getPointAtLength(t));\n    }\n}), A([\n    \"Element\",\n    \"Runner\"\n], {\n    font: function(t, e) {\n        if (\"object\" == typeof t) {\n            for(e in t)this.font(e, t[e]);\n            return this;\n        }\n        return \"leading\" === t ? this.leading(e) : \"anchor\" === t ? this.attr(\"text-anchor\", e) : \"size\" === t || \"family\" === t || \"weight\" === t || \"stretch\" === t || \"variant\" === t || \"style\" === t ? this.attr(\"font-\" + t, e) : this.attr(t, e);\n    }\n});\nA(\"Element\", [\n    \"click\",\n    \"dblclick\",\n    \"mousedown\",\n    \"mouseup\",\n    \"mouseover\",\n    \"mouseout\",\n    \"mousemove\",\n    \"mouseenter\",\n    \"mouseleave\",\n    \"touchstart\",\n    \"touchmove\",\n    \"touchleave\",\n    \"touchend\",\n    \"touchcancel\",\n    \"contextmenu\",\n    \"wheel\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerup\",\n    \"pointerleave\",\n    \"pointercancel\"\n].reduce(function(t, e) {\n    return t[e] = function(t) {\n        return null === t ? this.off(e) : this.on(e, t), this;\n    }, t;\n}, {})), A(\"Element\", {\n    untransform: function() {\n        return this.attr(\"transform\", null);\n    },\n    matrixify: function() {\n        const t = (this.attr(\"transform\") || \"\").split(st).slice(0, -1).map(function(t) {\n            const e = t.trim().split(\"(\");\n            return [\n                e[0],\n                e[1].split(dt).map(function(t) {\n                    return parseFloat(t);\n                })\n            ];\n        }).reverse().reduce(function(t, e) {\n            return \"matrix\" === e[0] ? t.lmultiply(vt.fromArray(e[1])) : t[e[0]].apply(t, e[1]);\n        }, new vt);\n        return t;\n    },\n    toParent: function(t, e) {\n        if (this === t) return this;\n        if (X(this.node)) return this.addTo(t, e);\n        const i = this.screenCTM(), a = t.screenCTM().inverse();\n        return this.addTo(t, e).untransform().transform(a.multiply(i)), this;\n    },\n    toRoot: function(t) {\n        return this.toParent(this.root(), t);\n    },\n    transform: function(t, e) {\n        if (null == t || \"string\" == typeof t) {\n            const e = new vt(this).decompose();\n            return null == t ? e : e[t];\n        }\n        vt.isMatrixLike(t) || (t = {\n            ...t,\n            origin: T(t, this)\n        });\n        const i = new vt(!0 === e ? this : e || !1).transform(t);\n        return this.attr(\"transform\", i);\n    }\n});\nclass Vt extends Gt {\n    flatten() {\n        return this.each(function() {\n            if (this instanceof Vt) return this.flatten().ungroup();\n        }), this;\n    }\n    ungroup(t = this.parent(), e = t.index(this)) {\n        return e = -1 === e ? t.children().length : e, this.each(function(i, a) {\n            return a[a.length - i - 1].toParent(t, e);\n        }), this.remove();\n    }\n}\nq(Vt, \"Container\");\nclass Ut extends Vt {\n    constructor(t, e = t){\n        super(G(\"defs\", t), e);\n    }\n    flatten() {\n        return this;\n    }\n    ungroup() {\n        return this;\n    }\n}\nq(Ut, \"Defs\");\nclass qt extends Gt {\n}\nfunction Zt(t) {\n    return this.attr(\"rx\", t);\n}\nfunction $t(t) {\n    return this.attr(\"ry\", t);\n}\nfunction Jt(t) {\n    return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());\n}\nfunction Qt(t) {\n    return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());\n}\nfunction Kt(t) {\n    return this.attr(\"cx\", t);\n}\nfunction te(t) {\n    return this.attr(\"cy\", t);\n}\nfunction ee(t) {\n    return null == t ? 2 * this.rx() : this.rx(new _t(t).divide(2));\n}\nfunction ie(t) {\n    return null == t ? 2 * this.ry() : this.ry(new _t(t).divide(2));\n}\nq(qt, \"Shape\");\nvar ae = Object.freeze({\n    __proto__: null,\n    cx: Kt,\n    cy: te,\n    height: ie,\n    rx: Zt,\n    ry: $t,\n    width: ee,\n    x: Jt,\n    y: Qt\n});\nclass se extends qt {\n    constructor(t, e = t){\n        super(G(\"ellipse\", t), e);\n    }\n    size(t, e) {\n        const i = I(this, t, e);\n        return this.rx(new _t(i.width).divide(2)).ry(new _t(i.height).divide(2));\n    }\n}\nQ(se, ae), A(\"Container\", {\n    ellipse: K(function(t = 0, e = t) {\n        return this.put(new se).size(t, e).move(0, 0);\n    })\n}), q(se, \"Ellipse\");\nclass re extends Bt {\n    constructor(t = O.document.createDocumentFragment()){\n        super(t);\n    }\n    xml(t, e, i) {\n        if (\"boolean\" == typeof t && (i = e, e = t, t = null), null == t || \"function\" == typeof t) {\n            const t = new Bt(W(\"wrapper\", i));\n            return t.add(this.node.cloneNode(!0)), t.xml(!1, i);\n        }\n        return super.xml(t, !1, i);\n    }\n}\nfunction ne(t, e) {\n    return \"radialGradient\" === (this._element || this).type ? this.attr({\n        fx: new _t(t),\n        fy: new _t(e)\n    }) : this.attr({\n        x1: new _t(t),\n        y1: new _t(e)\n    });\n}\nfunction oe(t, e) {\n    return \"radialGradient\" === (this._element || this).type ? this.attr({\n        cx: new _t(t),\n        cy: new _t(e)\n    }) : this.attr({\n        x2: new _t(t),\n        y2: new _t(e)\n    });\n}\nq(re, \"Fragment\");\nvar le = Object.freeze({\n    __proto__: null,\n    from: ne,\n    to: oe\n});\nclass he extends Vt {\n    constructor(t, e){\n        super(G(t + \"Gradient\", \"string\" == typeof t ? null : t), e);\n    }\n    attr(t, e, i) {\n        return \"transform\" === t && (t = \"gradientTransform\"), super.attr(t, e, i);\n    }\n    bbox() {\n        return new kt;\n    }\n    targets() {\n        return Lt(\"svg [fill*=\" + this.id() + \"]\");\n    }\n    toString() {\n        return this.url();\n    }\n    update(t) {\n        return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n    }\n    url() {\n        return \"url(#\" + this.id() + \")\";\n    }\n}\nQ(he, le), A({\n    Container: {\n        gradient (...t) {\n            return this.defs().gradient(...t);\n        }\n    },\n    Defs: {\n        gradient: K(function(t, e) {\n            return this.put(new he(t)).update(e);\n        })\n    }\n}), q(he, \"Gradient\");\nclass ce extends Vt {\n    constructor(t, e = t){\n        super(G(\"pattern\", t), e);\n    }\n    attr(t, e, i) {\n        return \"transform\" === t && (t = \"patternTransform\"), super.attr(t, e, i);\n    }\n    bbox() {\n        return new kt;\n    }\n    targets() {\n        return Lt(\"svg [fill*=\" + this.id() + \"]\");\n    }\n    toString() {\n        return this.url();\n    }\n    update(t) {\n        return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n    }\n    url() {\n        return \"url(#\" + this.id() + \")\";\n    }\n}\nA({\n    Container: {\n        pattern (...t) {\n            return this.defs().pattern(...t);\n        }\n    },\n    Defs: {\n        pattern: K(function(t, e, i) {\n            return this.put(new ce).update(i).attr({\n                x: 0,\n                y: 0,\n                width: t,\n                height: e,\n                patternUnits: \"userSpaceOnUse\"\n            });\n        })\n    }\n}), q(ce, \"Pattern\");\nlet de = class extends qt {\n    constructor(t, e = t){\n        super(G(\"image\", t), e);\n    }\n    load(t, e) {\n        if (!t) return this;\n        const i = new O.window.Image;\n        return zt(i, \"load\", function(t) {\n            const a = this.parent(ce);\n            0 === this.width() && 0 === this.height() && this.size(i.width, i.height), a instanceof ce && 0 === a.width() && 0 === a.height() && a.size(this.width(), this.height()), \"function\" == typeof e && e.call(this, t);\n        }, this), zt(i, \"load error\", function() {\n            Xt(i);\n        }), this.attr(\"href\", i.src = t, H);\n    }\n};\nvar ue;\nue = function(t, e, i) {\n    return \"fill\" !== t && \"stroke\" !== t || ct.test(e) && (e = i.root().defs().image(e)), e instanceof de && (e = i.root().defs().pattern(0, 0, (t)=>{\n        t.add(e);\n    })), e;\n}, Wt.push(ue), A({\n    Container: {\n        image: K(function(t, e) {\n            return this.put(new de).size(0, 0).load(t, e);\n        })\n    }\n}), q(de, \"Image\");\nclass ge extends Dt {\n    bbox() {\n        let t = -1 / 0, e = -1 / 0, i = 1 / 0, a = 1 / 0;\n        return this.forEach(function(s) {\n            t = Math.max(s[0], t), e = Math.max(s[1], e), i = Math.min(s[0], i), a = Math.min(s[1], a);\n        }), new kt(i, a, t - i, e - a);\n    }\n    move(t, e) {\n        const i = this.bbox();\n        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for(let i = this.length - 1; i >= 0; i--)this[i] = [\n            this[i][0] + t,\n            this[i][1] + e\n        ];\n        return this;\n    }\n    parse(t = [\n        0,\n        0\n    ]) {\n        const e = [];\n        (t = t instanceof Array ? Array.prototype.concat.apply([], t) : t.trim().split(dt).map(parseFloat)).length % 2 != 0 && t.pop();\n        for(let i = 0, a = t.length; i < a; i += 2)e.push([\n            t[i],\n            t[i + 1]\n        ]);\n        return e;\n    }\n    size(t, e) {\n        let i;\n        const a = this.bbox();\n        for(i = this.length - 1; i >= 0; i--)a.width && (this[i][0] = (this[i][0] - a.x) * t / a.width + a.x), a.height && (this[i][1] = (this[i][1] - a.y) * e / a.height + a.y);\n        return this;\n    }\n    toLine() {\n        return {\n            x1: this[0][0],\n            y1: this[0][1],\n            x2: this[1][0],\n            y2: this[1][1]\n        };\n    }\n    toString() {\n        const t = [];\n        for(let e = 0, i = this.length; e < i; e++)t.push(this[e].join(\",\"));\n        return t.join(\" \");\n    }\n    transform(t) {\n        return this.clone().transformO(t);\n    }\n    transformO(t) {\n        vt.isMatrixLike(t) || (t = new vt(t));\n        for(let e = this.length; e--;){\n            const [i, a] = this[e];\n            this[e][0] = t.a * i + t.c * a + t.e, this[e][1] = t.b * i + t.d * a + t.f;\n        }\n        return this;\n    }\n}\nconst pe = ge;\nvar fe = Object.freeze({\n    __proto__: null,\n    MorphArray: pe,\n    height: function(t) {\n        const e = this.bbox();\n        return null == t ? e.height : this.size(e.width, t);\n    },\n    width: function(t) {\n        const e = this.bbox();\n        return null == t ? e.width : this.size(t, e.height);\n    },\n    x: function(t) {\n        return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n    },\n    y: function(t) {\n        return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n    }\n});\nlet xe = class extends qt {\n    constructor(t, e = t){\n        super(G(\"line\", t), e);\n    }\n    array() {\n        return new ge([\n            [\n                this.attr(\"x1\"),\n                this.attr(\"y1\")\n            ],\n            [\n                this.attr(\"x2\"),\n                this.attr(\"y2\")\n            ]\n        ]);\n    }\n    move(t, e) {\n        return this.attr(this.array().move(t, e).toLine());\n    }\n    plot(t, e, i, a) {\n        return null == t ? this.array() : (t = void 0 !== e ? {\n            x1: t,\n            y1: e,\n            x2: i,\n            y2: a\n        } : new ge(t).toLine(), this.attr(t));\n    }\n    size(t, e) {\n        const i = I(this, t, e);\n        return this.attr(this.array().size(i.width, i.height).toLine());\n    }\n};\nQ(xe, fe), A({\n    Container: {\n        line: K(function(...t) {\n            return xe.prototype.plot.apply(this.put(new xe), null != t[0] ? t : [\n                0,\n                0,\n                0,\n                0\n            ]);\n        })\n    }\n}), q(xe, \"Line\");\nlet be = class extends Vt {\n    constructor(t, e = t){\n        super(G(\"marker\", t), e);\n    }\n    height(t) {\n        return this.attr(\"markerHeight\", t);\n    }\n    orient(t) {\n        return this.attr(\"orient\", t);\n    }\n    ref(t, e) {\n        return this.attr(\"refX\", t).attr(\"refY\", e);\n    }\n    toString() {\n        return \"url(#\" + this.id() + \")\";\n    }\n    update(t) {\n        return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n    }\n    width(t) {\n        return this.attr(\"markerWidth\", t);\n    }\n};\nfunction me(t, e) {\n    return function(i) {\n        return null == i ? this[t] : (this[t] = i, e && e.call(this), this);\n    };\n}\nA({\n    Container: {\n        marker (...t) {\n            return this.defs().marker(...t);\n        }\n    },\n    Defs: {\n        marker: K(function(t, e, i) {\n            return this.put(new be).size(t, e).ref(t / 2, e / 2).viewbox(0, 0, t, e).attr(\"orient\", \"auto\").update(i);\n        })\n    },\n    marker: {\n        marker (t, e, i, a) {\n            let s = [\n                \"marker\"\n            ];\n            return \"all\" !== t && s.push(t), s = s.join(\"-\"), t = arguments[1] instanceof be ? arguments[1] : this.defs().marker(e, i, a), this.attr(s, t);\n        }\n    }\n}), q(be, \"Marker\");\nconst ve = {\n    \"-\": function(t) {\n        return t;\n    },\n    \"<>\": function(t) {\n        return -Math.cos(t * Math.PI) / 2 + .5;\n    },\n    \">\": function(t) {\n        return Math.sin(t * Math.PI / 2);\n    },\n    \"<\": function(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n    },\n    bezier: function(t, e, i, a) {\n        return function(s) {\n            return s < 0 ? t > 0 ? e / t * s : i > 0 ? a / i * s : 0 : s > 1 ? i < 1 ? (1 - a) / (1 - i) * s + (a - i) / (1 - i) : t < 1 ? (1 - e) / (1 - t) * s + (e - t) / (1 - t) : 1 : 3 * s * (1 - s) ** 2 * e + 3 * s ** 2 * (1 - s) * a + s ** 3;\n        };\n    },\n    steps: function(t, e = \"end\") {\n        e = e.split(\"-\").reverse()[0];\n        let i = t;\n        return \"none\" === e ? --i : \"both\" === e && ++i, (a, s = !1)=>{\n            let r = Math.floor(a * t);\n            const n = a * r % 1 == 0;\n            return \"start\" !== e && \"both\" !== e || ++r, s && n && --r, a >= 0 && r < 0 && (r = 0), a <= 1 && r > i && (r = i), r / i;\n        };\n    }\n};\nclass ye {\n    done() {\n        return !1;\n    }\n}\nclass we extends ye {\n    constructor(t = Ht){\n        super(), this.ease = ve[t] || t;\n    }\n    step(t, e, i) {\n        return \"number\" != typeof t ? i < 1 ? t : e : t + (e - t) * this.ease(i);\n    }\n}\nclass ke extends ye {\n    constructor(t){\n        super(), this.stepper = t;\n    }\n    done(t) {\n        return t.done;\n    }\n    step(t, e, i, a) {\n        return this.stepper(t, e, i, a);\n    }\n}\nfunction Ae() {\n    const t = (this._duration || 500) / 1e3, e = this._overshoot || 0, i = Math.PI, a = Math.log(e / 100 + 1e-10), s = -a / Math.sqrt(i * i + a * a), r = 3.9 / (s * t);\n    this.d = 2 * s * r, this.k = r * r;\n}\nQ(class extends ke {\n    constructor(t = 500, e = 0){\n        super(), this.duration(t).overshoot(e);\n    }\n    step(t, e, i, a) {\n        if (\"string\" == typeof t) return t;\n        if (a.done = i === 1 / 0, i === 1 / 0) return e;\n        if (0 === i) return t;\n        i > 100 && (i = 16), i /= 1e3;\n        const s = a.velocity || 0, r = -this.d * s - this.k * (t - e), n = t + s * i + r * i * i / 2;\n        return a.velocity = s + r * i, a.done = Math.abs(e - n) + Math.abs(s) < .002, a.done ? e : n;\n    }\n}, {\n    duration: me(\"_duration\", Ae),\n    overshoot: me(\"_overshoot\", Ae)\n});\nQ(class extends ke {\n    constructor(t = .1, e = .01, i = 0, a = 1e3){\n        super(), this.p(t).i(e).d(i).windup(a);\n    }\n    step(t, e, i, a) {\n        if (\"string\" == typeof t) return t;\n        if (a.done = i === 1 / 0, i === 1 / 0) return e;\n        if (0 === i) return t;\n        const s = e - t;\n        let r = (a.integral || 0) + s * i;\n        const n = (s - (a.error || 0)) / i, o = this._windup;\n        return !1 !== o && (r = Math.max(-o, Math.min(r, o))), a.error = s, a.integral = r, a.done = Math.abs(s) < .001, a.done ? e : t + (this.P * s + this.I * r + this.D * n);\n    }\n}, {\n    windup: me(\"_windup\"),\n    p: me(\"P\"),\n    i: me(\"I\"),\n    d: me(\"D\")\n});\nconst Ce = {\n    M: 2,\n    L: 2,\n    H: 1,\n    V: 1,\n    C: 6,\n    S: 4,\n    Q: 4,\n    T: 2,\n    A: 7,\n    Z: 0\n}, Se = {\n    M: function(t, e, i) {\n        return e.x = i.x = t[0], e.y = i.y = t[1], [\n            \"M\",\n            e.x,\n            e.y\n        ];\n    },\n    L: function(t, e) {\n        return e.x = t[0], e.y = t[1], [\n            \"L\",\n            t[0],\n            t[1]\n        ];\n    },\n    H: function(t, e) {\n        return e.x = t[0], [\n            \"H\",\n            t[0]\n        ];\n    },\n    V: function(t, e) {\n        return e.y = t[0], [\n            \"V\",\n            t[0]\n        ];\n    },\n    C: function(t, e) {\n        return e.x = t[4], e.y = t[5], [\n            \"C\",\n            t[0],\n            t[1],\n            t[2],\n            t[3],\n            t[4],\n            t[5]\n        ];\n    },\n    S: function(t, e) {\n        return e.x = t[2], e.y = t[3], [\n            \"S\",\n            t[0],\n            t[1],\n            t[2],\n            t[3]\n        ];\n    },\n    Q: function(t, e) {\n        return e.x = t[2], e.y = t[3], [\n            \"Q\",\n            t[0],\n            t[1],\n            t[2],\n            t[3]\n        ];\n    },\n    T: function(t, e) {\n        return e.x = t[0], e.y = t[1], [\n            \"T\",\n            t[0],\n            t[1]\n        ];\n    },\n    Z: function(t, e, i) {\n        return e.x = i.x, e.y = i.y, [\n            \"Z\"\n        ];\n    },\n    A: function(t, e) {\n        return e.x = t[5], e.y = t[6], [\n            \"A\",\n            t[0],\n            t[1],\n            t[2],\n            t[3],\n            t[4],\n            t[5],\n            t[6]\n        ];\n    }\n}, Le = \"mlhvqtcsaz\".split(\"\");\nfor(let t = 0, e = Le.length; t < e; ++t)Se[Le[t]] = function(t) {\n    return function(e, i, a) {\n        if (\"H\" === t) e[0] = e[0] + i.x;\n        else if (\"V\" === t) e[0] = e[0] + i.y;\n        else if (\"A\" === t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;\n        else for(let t = 0, a = e.length; t < a; ++t)e[t] = e[t] + (t % 2 ? i.y : i.x);\n        return Se[t](e, i, a);\n    };\n}(Le[t].toUpperCase());\nfunction Me(t) {\n    return t.segment.length && t.segment.length - 1 === Ce[t.segment[0].toUpperCase()];\n}\nfunction Pe(t, e) {\n    t.inNumber && Ie(t, !1);\n    const i = ut.test(e);\n    if (i) t.segment = [\n        e\n    ];\n    else {\n        const e = t.lastCommand, i = e.toLowerCase(), a = e === i;\n        t.segment = [\n            \"m\" === i ? a ? \"l\" : \"L\" : e\n        ];\n    }\n    return t.inSegment = !0, t.lastCommand = t.segment[0], i;\n}\nfunction Ie(t, e) {\n    if (!t.inNumber) throw new Error(\"Parser Error\");\n    t.number && t.segment.push(parseFloat(t.number)), t.inNumber = e, t.number = \"\", t.pointSeen = !1, t.hasExponent = !1, Me(t) && Te(t);\n}\nfunction Te(t) {\n    t.inSegment = !1, t.absolute && (t.segment = function(t) {\n        const e = t.segment[0];\n        return Se[e](t.segment.slice(1), t.p, t.p0);\n    }(t)), t.segments.push(t.segment);\n}\nfunction ze(t) {\n    if (!t.segment.length) return !1;\n    const e = \"A\" === t.segment[0].toUpperCase(), i = t.segment.length;\n    return e && (4 === i || 5 === i);\n}\nfunction Xe(t) {\n    return \"E\" === t.lastToken.toUpperCase();\n}\nconst Re = new Set([\n    \" \",\n    \",\",\n    \"\\t\",\n    \"\\n\",\n    \"\\r\",\n    \"\\f\"\n]);\nclass Ee extends Dt {\n    bbox() {\n        return yt().path.setAttribute(\"d\", this.toString()), new kt(yt.nodes.path.getBBox());\n    }\n    move(t, e) {\n        const i = this.bbox();\n        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for(let i, a = this.length - 1; a >= 0; a--)i = this[a][0], \"M\" === i || \"L\" === i || \"T\" === i ? (this[a][1] += t, this[a][2] += e) : \"H\" === i ? this[a][1] += t : \"V\" === i ? this[a][1] += e : \"C\" === i || \"S\" === i || \"Q\" === i ? (this[a][1] += t, this[a][2] += e, this[a][3] += t, this[a][4] += e, \"C\" === i && (this[a][5] += t, this[a][6] += e)) : \"A\" === i && (this[a][6] += t, this[a][7] += e);\n        return this;\n    }\n    parse(t = \"M0 0\") {\n        return Array.isArray(t) && (t = Array.prototype.concat.apply([], t).toString()), function(t, e = !0) {\n            let i = 0, a = \"\";\n            const s = {\n                segment: [],\n                inNumber: !1,\n                number: \"\",\n                lastToken: \"\",\n                inSegment: !1,\n                segments: [],\n                pointSeen: !1,\n                hasExponent: !1,\n                absolute: e,\n                p0: new bt,\n                p: new bt\n            };\n            for(; s.lastToken = a, a = t.charAt(i++);)if (s.inSegment || !Pe(s, a)) if (\".\" !== a) if (isNaN(parseInt(a))) if (Re.has(a)) s.inNumber && Ie(s, !1);\n            else if (\"-\" !== a && \"+\" !== a) if (\"E\" !== a.toUpperCase()) {\n                if (ut.test(a)) {\n                    if (s.inNumber) Ie(s, !1);\n                    else {\n                        if (!Me(s)) throw new Error(\"parser Error\");\n                        Te(s);\n                    }\n                    --i;\n                }\n            } else s.number += a, s.hasExponent = !0;\n            else {\n                if (s.inNumber && !Xe(s)) {\n                    Ie(s, !1), --i;\n                    continue;\n                }\n                s.number += a, s.inNumber = !0;\n            }\n            else {\n                if (\"0\" === s.number || ze(s)) {\n                    s.inNumber = !0, s.number = a, Ie(s, !0);\n                    continue;\n                }\n                s.inNumber = !0, s.number += a;\n            }\n            else {\n                if (s.pointSeen || s.hasExponent) {\n                    Ie(s, !1), --i;\n                    continue;\n                }\n                s.inNumber = !0, s.pointSeen = !0, s.number += a;\n            }\n            return s.inNumber && Ie(s, !1), s.inSegment && Me(s) && Te(s), s.segments;\n        }(t);\n    }\n    size(t, e) {\n        const i = this.bbox();\n        let a, s;\n        for(i.width = 0 === i.width ? 1 : i.width, i.height = 0 === i.height ? 1 : i.height, a = this.length - 1; a >= 0; a--)s = this[a][0], \"M\" === s || \"L\" === s || \"T\" === s ? (this[a][1] = (this[a][1] - i.x) * t / i.width + i.x, this[a][2] = (this[a][2] - i.y) * e / i.height + i.y) : \"H\" === s ? this[a][1] = (this[a][1] - i.x) * t / i.width + i.x : \"V\" === s ? this[a][1] = (this[a][1] - i.y) * e / i.height + i.y : \"C\" === s || \"S\" === s || \"Q\" === s ? (this[a][1] = (this[a][1] - i.x) * t / i.width + i.x, this[a][2] = (this[a][2] - i.y) * e / i.height + i.y, this[a][3] = (this[a][3] - i.x) * t / i.width + i.x, this[a][4] = (this[a][4] - i.y) * e / i.height + i.y, \"C\" === s && (this[a][5] = (this[a][5] - i.x) * t / i.width + i.x, this[a][6] = (this[a][6] - i.y) * e / i.height + i.y)) : \"A\" === s && (this[a][1] = this[a][1] * t / i.width, this[a][2] = this[a][2] * e / i.height, this[a][6] = (this[a][6] - i.x) * t / i.width + i.x, this[a][7] = (this[a][7] - i.y) * e / i.height + i.y);\n        return this;\n    }\n    toString() {\n        return function(t) {\n            let e = \"\";\n            for(let i = 0, a = t.length; i < a; i++)e += t[i][0], null != t[i][1] && (e += t[i][1], null != t[i][2] && (e += \" \", e += t[i][2], null != t[i][3] && (e += \" \", e += t[i][3], e += \" \", e += t[i][4], null != t[i][5] && (e += \" \", e += t[i][5], e += \" \", e += t[i][6], null != t[i][7] && (e += \" \", e += t[i][7])))));\n            return e + \" \";\n        }(this);\n    }\n}\nconst Ye = (t)=>{\n    const e = typeof t;\n    return \"number\" === e ? _t : \"string\" === e ? xt.isColor(t) ? xt : dt.test(t) ? ut.test(t) ? Ee : Dt : tt.test(t) ? _t : Oe : Ne.indexOf(t.constructor) > -1 ? t.constructor : Array.isArray(t) ? Dt : \"object\" === e ? _e : Oe;\n};\nclass He {\n    constructor(t){\n        this._stepper = t || new we(\"-\"), this._from = null, this._to = null, this._type = null, this._context = null, this._morphObj = null;\n    }\n    at(t) {\n        return this._morphObj.morph(this._from, this._to, t, this._stepper, this._context);\n    }\n    done() {\n        return this._context.map(this._stepper.done).reduce(function(t, e) {\n            return t && e;\n        }, !0);\n    }\n    from(t) {\n        return null == t ? this._from : (this._from = this._set(t), this);\n    }\n    stepper(t) {\n        return null == t ? this._stepper : (this._stepper = t, this);\n    }\n    to(t) {\n        return null == t ? this._to : (this._to = this._set(t), this);\n    }\n    type(t) {\n        return null == t ? this._type : (this._type = t, this);\n    }\n    _set(t) {\n        this._type || this.type(Ye(t));\n        let e = new this._type(t);\n        return this._type === xt && (e = this._to ? e[this._to[4]]() : this._from ? e[this._from[4]]() : e), this._type === _e && (e = this._to ? e.align(this._to) : this._from ? e.align(this._from) : e), e = e.toConsumable(), this._morphObj = this._morphObj || new this._type, this._context = this._context || Array.apply(null, Array(e.length)).map(Object).map(function(t) {\n            return t.done = !0, t;\n        }), e;\n    }\n}\nclass Oe {\n    constructor(...t){\n        this.init(...t);\n    }\n    init(t) {\n        return t = Array.isArray(t) ? t[0] : t, this.value = t, this;\n    }\n    toArray() {\n        return [\n            this.value\n        ];\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nclass Fe {\n    constructor(...t){\n        this.init(...t);\n    }\n    init(t) {\n        return Array.isArray(t) && (t = {\n            scaleX: t[0],\n            scaleY: t[1],\n            shear: t[2],\n            rotate: t[3],\n            translateX: t[4],\n            translateY: t[5],\n            originX: t[6],\n            originY: t[7]\n        }), Object.assign(this, Fe.defaults, t), this;\n    }\n    toArray() {\n        const t = this;\n        return [\n            t.scaleX,\n            t.scaleY,\n            t.shear,\n            t.rotate,\n            t.translateX,\n            t.translateY,\n            t.originX,\n            t.originY\n        ];\n    }\n}\nFe.defaults = {\n    scaleX: 1,\n    scaleY: 1,\n    shear: 0,\n    rotate: 0,\n    translateX: 0,\n    translateY: 0,\n    originX: 0,\n    originY: 0\n};\nconst De = (t, e)=>t[0] < e[0] ? -1 : t[0] > e[0] ? 1 : 0;\nclass _e {\n    constructor(...t){\n        this.init(...t);\n    }\n    align(t) {\n        const e = this.values;\n        for(let i = 0, a = e.length; i < a; ++i){\n            if (e[i + 1] === t[i + 1]) {\n                if (e[i + 1] === xt && t[i + 7] !== e[i + 7]) {\n                    const e = t[i + 7], a = new xt(this.values.splice(i + 3, 5))[e]().toArray();\n                    this.values.splice(i + 3, 0, ...a);\n                }\n                i += e[i + 2] + 2;\n                continue;\n            }\n            if (!t[i + 1]) return this;\n            const a = (new t[i + 1]).toArray(), s = e[i + 2] + 3;\n            e.splice(i, s, t[i], t[i + 1], t[i + 2], ...a), i += e[i + 2] + 2;\n        }\n        return this;\n    }\n    init(t) {\n        if (this.values = [], Array.isArray(t)) return void (this.values = t.slice());\n        t = t || {};\n        const e = [];\n        for(const i in t){\n            const a = Ye(t[i]), s = new a(t[i]).toArray();\n            e.push([\n                i,\n                a,\n                s.length,\n                ...s\n            ]);\n        }\n        return e.sort(De), this.values = e.reduce((t, e)=>t.concat(e), []), this;\n    }\n    toArray() {\n        return this.values;\n    }\n    valueOf() {\n        const t = {}, e = this.values;\n        for(; e.length;){\n            const i = e.shift(), a = e.shift(), s = e.shift(), r = e.splice(0, s);\n            t[i] = new a(r);\n        }\n        return t;\n    }\n}\nconst Ne = [\n    Oe,\n    Fe,\n    _e\n];\nclass We extends qt {\n    constructor(t, e = t){\n        super(G(\"path\", t), e);\n    }\n    array() {\n        return this._array || (this._array = new Ee(this.attr(\"d\")));\n    }\n    clear() {\n        return delete this._array, this;\n    }\n    height(t) {\n        return null == t ? this.bbox().height : this.size(this.bbox().width, t);\n    }\n    move(t, e) {\n        return this.attr(\"d\", this.array().move(t, e));\n    }\n    plot(t) {\n        return null == t ? this.array() : this.clear().attr(\"d\", \"string\" == typeof t ? t : this._array = new Ee(t));\n    }\n    size(t, e) {\n        const i = I(this, t, e);\n        return this.attr(\"d\", this.array().size(i.width, i.height));\n    }\n    width(t) {\n        return null == t ? this.bbox().width : this.size(t, this.bbox().height);\n    }\n    x(t) {\n        return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n    }\n    y(t) {\n        return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n    }\n}\nWe.prototype.MorphArray = Ee, A({\n    Container: {\n        path: K(function(t) {\n            return this.put(new We).plot(t || new Ee);\n        })\n    }\n}), q(We, \"Path\");\nvar Be = Object.freeze({\n    __proto__: null,\n    array: function() {\n        return this._array || (this._array = new ge(this.attr(\"points\")));\n    },\n    clear: function() {\n        return delete this._array, this;\n    },\n    move: function(t, e) {\n        return this.attr(\"points\", this.array().move(t, e));\n    },\n    plot: function(t) {\n        return null == t ? this.array() : this.clear().attr(\"points\", \"string\" == typeof t ? t : this._array = new ge(t));\n    },\n    size: function(t, e) {\n        const i = I(this, t, e);\n        return this.attr(\"points\", this.array().size(i.width, i.height));\n    }\n});\nclass Ge extends qt {\n    constructor(t, e = t){\n        super(G(\"polygon\", t), e);\n    }\n}\nA({\n    Container: {\n        polygon: K(function(t) {\n            return this.put(new Ge).plot(t || new ge);\n        })\n    }\n}), Q(Ge, fe), Q(Ge, Be), q(Ge, \"Polygon\");\nclass je extends qt {\n    constructor(t, e = t){\n        super(G(\"polyline\", t), e);\n    }\n}\nA({\n    Container: {\n        polyline: K(function(t) {\n            return this.put(new je).plot(t || new ge);\n        })\n    }\n}), Q(je, fe), Q(je, Be), q(je, \"Polyline\");\nclass Ve extends qt {\n    constructor(t, e = t){\n        super(G(\"rect\", t), e);\n    }\n}\nQ(Ve, {\n    rx: Zt,\n    ry: $t\n}), A({\n    Container: {\n        rect: K(function(t, e) {\n            return this.put(new Ve).size(t, e);\n        })\n    }\n}), q(Ve, \"Rect\");\nclass Ue {\n    constructor(){\n        this._first = null, this._last = null;\n    }\n    first() {\n        return this._first && this._first.value;\n    }\n    last() {\n        return this._last && this._last.value;\n    }\n    push(t) {\n        const e = void 0 !== t.next ? t : {\n            value: t,\n            next: null,\n            prev: null\n        };\n        return this._last ? (e.prev = this._last, this._last.next = e, this._last = e) : (this._last = e, this._first = e), e;\n    }\n    remove(t) {\n        t.prev && (t.prev.next = t.next), t.next && (t.next.prev = t.prev), t === this._last && (this._last = t.prev), t === this._first && (this._first = t.next), t.prev = null, t.next = null;\n    }\n    shift() {\n        const t = this._first;\n        return t ? (this._first = t.next, this._first && (this._first.prev = null), this._last = this._first ? this._last : null, t.value) : null;\n    }\n}\nconst qe = {\n    nextDraw: null,\n    frames: new Ue,\n    timeouts: new Ue,\n    immediates: new Ue,\n    timer: ()=>O.window.performance || O.window.Date,\n    transforms: [],\n    frame (t) {\n        const e = qe.frames.push({\n            run: t\n        });\n        return null === qe.nextDraw && (qe.nextDraw = O.window.requestAnimationFrame(qe._draw)), e;\n    },\n    timeout (t, e) {\n        e = e || 0;\n        const i = qe.timer().now() + e, a = qe.timeouts.push({\n            run: t,\n            time: i\n        });\n        return null === qe.nextDraw && (qe.nextDraw = O.window.requestAnimationFrame(qe._draw)), a;\n    },\n    immediate (t) {\n        const e = qe.immediates.push(t);\n        return null === qe.nextDraw && (qe.nextDraw = O.window.requestAnimationFrame(qe._draw)), e;\n    },\n    cancelFrame (t) {\n        null != t && qe.frames.remove(t);\n    },\n    clearTimeout (t) {\n        null != t && qe.timeouts.remove(t);\n    },\n    cancelImmediate (t) {\n        null != t && qe.immediates.remove(t);\n    },\n    _draw (t) {\n        let e = null;\n        const i = qe.timeouts.last();\n        for(; (e = qe.timeouts.shift()) && (t >= e.time ? e.run() : qe.timeouts.push(e), e !== i););\n        let a = null;\n        const s = qe.frames.last();\n        for(; a !== s && (a = qe.frames.shift());)a.run(t);\n        let r = null;\n        for(; r = qe.immediates.shift();)r();\n        qe.nextDraw = qe.timeouts.first() || qe.frames.first() ? O.window.requestAnimationFrame(qe._draw) : null;\n    }\n}, Ze = function(t) {\n    const e = t.start, i = t.runner.duration();\n    return {\n        start: e,\n        duration: i,\n        end: e + i,\n        runner: t.runner\n    };\n}, $e = function() {\n    const t = O.window;\n    return (t.performance || t.Date).now();\n};\nclass Je extends Rt {\n    constructor(t = $e){\n        super(), this._timeSource = t, this.terminate();\n    }\n    active() {\n        return !!this._nextFrame;\n    }\n    finish() {\n        return this.time(this.getEndTimeOfTimeline() + 1), this.pause();\n    }\n    getEndTime() {\n        const t = this.getLastRunnerInfo(), e = t ? t.runner.duration() : 0;\n        return (t ? t.start : this._time) + e;\n    }\n    getEndTimeOfTimeline() {\n        const t = this._runners.map((t)=>t.start + t.runner.duration());\n        return Math.max(0, ...t);\n    }\n    getLastRunnerInfo() {\n        return this.getRunnerInfoById(this._lastRunnerId);\n    }\n    getRunnerInfoById(t) {\n        return this._runners[this._runnerIds.indexOf(t)] || null;\n    }\n    pause() {\n        return this._paused = !0, this._continue();\n    }\n    persist(t) {\n        return null == t ? this._persist : (this._persist = t, this);\n    }\n    play() {\n        return this._paused = !1, this.updateTime()._continue();\n    }\n    reverse(t) {\n        const e = this.speed();\n        if (null == t) return this.speed(-e);\n        const i = Math.abs(e);\n        return this.speed(t ? -i : i);\n    }\n    schedule(t, e, i) {\n        if (null == t) return this._runners.map(Ze);\n        let a = 0;\n        const s = this.getEndTime();\n        if (e = e || 0, null == i || \"last\" === i || \"after\" === i) a = s;\n        else if (\"absolute\" === i || \"start\" === i) a = e, e = 0;\n        else if (\"now\" === i) a = this._time;\n        else if (\"relative\" === i) {\n            const i = this.getRunnerInfoById(t.id);\n            i && (a = i.start + e, e = 0);\n        } else {\n            if (\"with-last\" !== i) throw new Error('Invalid value for the \"when\" parameter');\n            {\n                const t = this.getLastRunnerInfo();\n                a = t ? t.start : this._time;\n            }\n        }\n        t.unschedule(), t.timeline(this);\n        const r = t.persist(), n = {\n            persist: null === r ? this._persist : r,\n            start: a + e,\n            runner: t\n        };\n        return this._lastRunnerId = t.id, this._runners.push(n), this._runners.sort((t, e)=>t.start - e.start), this._runnerIds = this._runners.map((t)=>t.runner.id), this.updateTime()._continue(), this;\n    }\n    seek(t) {\n        return this.time(this._time + t);\n    }\n    source(t) {\n        return null == t ? this._timeSource : (this._timeSource = t, this);\n    }\n    speed(t) {\n        return null == t ? this._speed : (this._speed = t, this);\n    }\n    stop() {\n        return this.time(0), this.pause();\n    }\n    time(t) {\n        return null == t ? this._time : (this._time = t, this._continue(!0));\n    }\n    unschedule(t) {\n        const e = this._runnerIds.indexOf(t.id);\n        return e < 0 || (this._runners.splice(e, 1), this._runnerIds.splice(e, 1), t.timeline(null)), this;\n    }\n    updateTime() {\n        return this.active() || (this._lastSourceTime = this._timeSource()), this;\n    }\n    _continue(t = !1) {\n        return qe.cancelFrame(this._nextFrame), this._nextFrame = null, t ? this._stepImmediate() : (this._paused || (this._nextFrame = qe.frame(this._step)), this);\n    }\n    _stepFn(t = !1) {\n        const e = this._timeSource();\n        let i = e - this._lastSourceTime;\n        t && (i = 0);\n        const a = this._speed * i + (this._time - this._lastStepTime);\n        this._lastSourceTime = e, t || (this._time += a, this._time = this._time < 0 ? 0 : this._time), this._lastStepTime = this._time, this.fire(\"time\", this._time);\n        for(let t = this._runners.length; t--;){\n            const e = this._runners[t], i = e.runner;\n            this._time - e.start <= 0 && i.reset();\n        }\n        let s = !1;\n        for(let t = 0, e = this._runners.length; t < e; t++){\n            const i = this._runners[t], r = i.runner;\n            let n = a;\n            const o = this._time - i.start;\n            if (o <= 0) {\n                s = !0;\n                continue;\n            }\n            if (o < n && (n = o), !r.active()) continue;\n            if (r.step(n).done) {\n                if (!0 !== i.persist) {\n                    r.duration() - r.time() + this._time + i.persist < this._time && (r.unschedule(), --t, --e);\n                }\n            } else s = !0;\n        }\n        return s && !(this._speed < 0 && 0 === this._time) || this._runnerIds.length && this._speed < 0 && this._time > 0 ? this._continue() : (this.pause(), this.fire(\"finished\")), this;\n    }\n    terminate() {\n        this._startTime = 0, this._speed = 1, this._persist = 0, this._nextFrame = null, this._paused = !0, this._runners = [], this._runnerIds = [], this._lastRunnerId = -1, this._time = 0, this._lastSourceTime = 0, this._lastStepTime = 0, this._step = this._stepFn.bind(this, !1), this._stepImmediate = this._stepFn.bind(this, !0);\n    }\n}\nA({\n    Element: {\n        timeline: function(t) {\n            return null == t ? (this._timeline = this._timeline || new Je, this._timeline) : (this._timeline = t, this);\n        }\n    }\n});\nclass Qe extends Rt {\n    constructor(t){\n        super(), this.id = Qe.id++, t = \"function\" == typeof (t = null == t ? Yt : t) ? new ke(t) : t, this._element = null, this._timeline = null, this.done = !1, this._queue = [], this._duration = \"number\" == typeof t && t, this._isDeclarative = t instanceof ke, this._stepper = this._isDeclarative ? t : new we, this._history = {}, this.enabled = !0, this._time = 0, this._lastTime = 0, this._reseted = !0, this.transforms = new vt, this.transformId = 1, this._haveReversed = !1, this._reverse = !1, this._loopsDone = 0, this._swing = !1, this._wait = 0, this._times = 1, this._frameId = null, this._persist = !!this._isDeclarative || null;\n    }\n    static sanitise(t, e, i) {\n        let a = 1, s = !1, r = 0;\n        return e = e ?? Ot, i = i || \"last\", \"object\" != typeof (t = t ?? Yt) || t instanceof ye || (e = t.delay ?? e, i = t.when ?? i, s = t.swing || s, a = t.times ?? a, r = t.wait ?? r, t = t.duration ?? Yt), {\n            duration: t,\n            delay: e,\n            swing: s,\n            times: a,\n            wait: r,\n            when: i\n        };\n    }\n    active(t) {\n        return null == t ? this.enabled : (this.enabled = t, this);\n    }\n    addTransform(t) {\n        return this.transforms.lmultiplyO(t), this;\n    }\n    after(t) {\n        return this.on(\"finished\", t);\n    }\n    animate(t, e, i) {\n        const a = Qe.sanitise(t, e, i), s = new Qe(a.duration);\n        return this._timeline && s.timeline(this._timeline), this._element && s.element(this._element), s.loop(a).schedule(a.delay, a.when);\n    }\n    clearTransform() {\n        return this.transforms = new vt, this;\n    }\n    clearTransformsFromQueue() {\n        this.done && this._timeline && this._timeline._runnerIds.includes(this.id) || (this._queue = this._queue.filter((t)=>!t.isTransform));\n    }\n    delay(t) {\n        return this.animate(0, t);\n    }\n    duration() {\n        return this._times * (this._wait + this._duration) - this._wait;\n    }\n    during(t) {\n        return this.queue(null, t);\n    }\n    ease(t) {\n        return this._stepper = new we(t), this;\n    }\n    element(t) {\n        return null == t ? this._element : (this._element = t, t._prepareRunner(), this);\n    }\n    finish() {\n        return this.step(1 / 0);\n    }\n    loop(t, e, i) {\n        return \"object\" == typeof t && (e = t.swing, i = t.wait, t = t.times), this._times = t || 1 / 0, this._swing = e || !1, this._wait = i || 0, !0 === this._times && (this._times = 1 / 0), this;\n    }\n    loops(t) {\n        const e = this._duration + this._wait;\n        if (null == t) {\n            const t = Math.floor(this._time / e), i = (this._time - t * e) / this._duration;\n            return Math.min(t + i, this._times);\n        }\n        const i = t % 1, a = e * Math.floor(t) + this._duration * i;\n        return this.time(a);\n    }\n    persist(t) {\n        return null == t ? this._persist : (this._persist = t, this);\n    }\n    position(t) {\n        const e = this._time, i = this._duration, a = this._wait, s = this._times, r = this._swing, n = this._reverse;\n        let o;\n        if (null == t) {\n            const t = function(t) {\n                const e = r * Math.floor(t % (2 * (a + i)) / (a + i)), s = e && !n || !e && n, o = Math.pow(-1, s) * (t % (a + i)) / i + s;\n                return Math.max(Math.min(o, 1), 0);\n            }, l = s * (a + i) - a;\n            return o = e <= 0 ? Math.round(t(1e-5)) : e < l ? t(e) : Math.round(t(l - 1e-5)), o;\n        }\n        const l = Math.floor(this.loops()), h = r && l % 2 == 0;\n        return o = l + (h && !n || n && h ? t : 1 - t), this.loops(o);\n    }\n    progress(t) {\n        return null == t ? Math.min(1, this._time / this.duration()) : this.time(t * this.duration());\n    }\n    queue(t, e, i, a) {\n        this._queue.push({\n            initialiser: t || Et,\n            runner: e || Et,\n            retarget: i,\n            isTransform: a,\n            initialised: !1,\n            finished: !1\n        });\n        return this.timeline() && this.timeline()._continue(), this;\n    }\n    reset() {\n        return this._reseted || (this.time(0), this._reseted = !0), this;\n    }\n    reverse(t) {\n        return this._reverse = null == t ? !this._reverse : t, this;\n    }\n    schedule(t, e, i) {\n        if (t instanceof Je || (i = e, e = t, t = this.timeline()), !t) throw Error(\"Runner cannot be scheduled without timeline\");\n        return t.schedule(this, e, i), this;\n    }\n    step(t) {\n        if (!this.enabled) return this;\n        t = null == t ? 16 : t, this._time += t;\n        const e = this.position(), i = this._lastPosition !== e && this._time >= 0;\n        this._lastPosition = e;\n        const a = this.duration(), s = this._lastTime <= 0 && this._time > 0, r = this._lastTime < a && this._time >= a;\n        this._lastTime = this._time, s && this.fire(\"start\", this);\n        const n = this._isDeclarative;\n        this.done = !n && !r && this._time >= a, this._reseted = !1;\n        let o = !1;\n        return (i || n) && (this._initialise(i), this.transforms = new vt, o = this._run(n ? t : e), this.fire(\"step\", this)), this.done = this.done || o && n, r && this.fire(\"finished\", this), this;\n    }\n    time(t) {\n        if (null == t) return this._time;\n        const e = t - this._time;\n        return this.step(e), this;\n    }\n    timeline(t) {\n        return void 0 === t ? this._timeline : (this._timeline = t, this);\n    }\n    unschedule() {\n        const t = this.timeline();\n        return t && t.unschedule(this), this;\n    }\n    _initialise(t) {\n        if (t || this._isDeclarative) for(let e = 0, i = this._queue.length; e < i; ++e){\n            const i = this._queue[e], a = this._isDeclarative || !i.initialised && t;\n            t = !i.finished, a && t && (i.initialiser.call(this), i.initialised = !0);\n        }\n    }\n    _rememberMorpher(t, e) {\n        if (this._history[t] = {\n            morpher: e,\n            caller: this._queue[this._queue.length - 1]\n        }, this._isDeclarative) {\n            const t = this.timeline();\n            t && t.play();\n        }\n    }\n    _run(t) {\n        let e = !0;\n        for(let i = 0, a = this._queue.length; i < a; ++i){\n            const a = this._queue[i], s = a.runner.call(this, t);\n            a.finished = a.finished || !0 === s, e = e && a.finished;\n        }\n        return e;\n    }\n    _tryRetarget(t, e, i) {\n        if (this._history[t]) {\n            if (!this._history[t].caller.initialised) {\n                const e = this._queue.indexOf(this._history[t].caller);\n                return this._queue.splice(e, 1), !1;\n            }\n            this._history[t].caller.retarget ? this._history[t].caller.retarget.call(this, e, i) : this._history[t].morpher.to(e), this._history[t].caller.finished = !1;\n            const a = this.timeline();\n            return a && a.play(), !0;\n        }\n        return !1;\n    }\n}\nQe.id = 0;\nclass Ke {\n    constructor(t = new vt, e = -1, i = !0){\n        this.transforms = t, this.id = e, this.done = i;\n    }\n    clearTransformsFromQueue() {}\n}\nQ([\n    Qe,\n    Ke\n], {\n    mergeWith (t) {\n        return new Ke(t.transforms.lmultiply(this.transforms), t.id);\n    }\n});\nconst ti = (t, e)=>t.lmultiplyO(e), ei = (t)=>t.transforms;\nfunction ii() {\n    const t = this._transformationRunners.runners.map(ei).reduce(ti, new vt);\n    this.transform(t), this._transformationRunners.merge(), 1 === this._transformationRunners.length() && (this._frameId = null);\n}\nclass ai {\n    constructor(){\n        this.runners = [], this.ids = [];\n    }\n    add(t) {\n        if (this.runners.includes(t)) return;\n        const e = t.id + 1;\n        return this.runners.push(t), this.ids.push(e), this;\n    }\n    clearBefore(t) {\n        const e = this.ids.indexOf(t + 1) || 1;\n        return this.ids.splice(0, e, 0), this.runners.splice(0, e, new Ke).forEach((t)=>t.clearTransformsFromQueue()), this;\n    }\n    edit(t, e) {\n        const i = this.ids.indexOf(t + 1);\n        return this.ids.splice(i, 1, t + 1), this.runners.splice(i, 1, e), this;\n    }\n    getByID(t) {\n        return this.runners[this.ids.indexOf(t + 1)];\n    }\n    length() {\n        return this.ids.length;\n    }\n    merge() {\n        let t = null;\n        for(let e = 0; e < this.runners.length; ++e){\n            const i = this.runners[e];\n            if (t && i.done && t.done && (!i._timeline || !i._timeline._runnerIds.includes(i.id)) && (!t._timeline || !t._timeline._runnerIds.includes(t.id))) {\n                this.remove(i.id);\n                const a = i.mergeWith(t);\n                this.edit(t.id, a), t = a, --e;\n            } else t = i;\n        }\n        return this;\n    }\n    remove(t) {\n        const e = this.ids.indexOf(t + 1);\n        return this.ids.splice(e, 1), this.runners.splice(e, 1), this;\n    }\n}\nA({\n    Element: {\n        animate (t, e, i) {\n            const a = Qe.sanitise(t, e, i), s = this.timeline();\n            return new Qe(a.duration).loop(a).element(this).timeline(s.play()).schedule(a.delay, a.when);\n        },\n        delay (t, e) {\n            return this.animate(0, t, e);\n        },\n        _clearTransformRunnersBefore (t) {\n            this._transformationRunners.clearBefore(t.id);\n        },\n        _currentTransform (t) {\n            return this._transformationRunners.runners.filter((e)=>e.id <= t.id).map(ei).reduce(ti, new vt);\n        },\n        _addRunner (t) {\n            this._transformationRunners.add(t), qe.cancelImmediate(this._frameId), this._frameId = qe.immediate(ii.bind(this));\n        },\n        _prepareRunner () {\n            null == this._frameId && (this._transformationRunners = (new ai).add(new Ke(new vt(this))));\n        }\n    }\n});\nQ(Qe, {\n    attr (t, e) {\n        return this.styleAttr(\"attr\", t, e);\n    },\n    css (t, e) {\n        return this.styleAttr(\"css\", t, e);\n    },\n    styleAttr (t, e, i) {\n        if (\"string\" == typeof e) return this.styleAttr(t, {\n            [e]: i\n        });\n        let a = e;\n        if (this._tryRetarget(t, a)) return this;\n        let s = new He(this._stepper).to(a), r = Object.keys(a);\n        return this.queue(function() {\n            s = s.from(this.element()[t](r));\n        }, function(e) {\n            return this.element()[t](s.at(e).valueOf()), s.done();\n        }, function(e) {\n            const i = Object.keys(e), n = (o = r, i.filter((t)=>!o.includes(t)));\n            var o;\n            if (n.length) {\n                const e = this.element()[t](n), i = new _e(s.from()).valueOf();\n                Object.assign(i, e), s.from(i);\n            }\n            const l = new _e(s.to()).valueOf();\n            Object.assign(l, e), s.to(l), r = i, a = e;\n        }), this._rememberMorpher(t, s), this;\n    },\n    zoom (t, e) {\n        if (this._tryRetarget(\"zoom\", t, e)) return this;\n        let i = new He(this._stepper).to(new _t(t));\n        return this.queue(function() {\n            i = i.from(this.element().zoom());\n        }, function(t) {\n            return this.element().zoom(i.at(t), e), i.done();\n        }, function(t, a) {\n            e = a, i.to(t);\n        }), this._rememberMorpher(\"zoom\", i), this;\n    },\n    transform (t, e, i) {\n        if (e = t.relative || e, this._isDeclarative && !e && this._tryRetarget(\"transform\", t)) return this;\n        const a = vt.isMatrixLike(t);\n        i = null != t.affine ? t.affine : null != i ? i : !a;\n        const s = new He(this._stepper).type(i ? Fe : vt);\n        let r, n, o, l, h;\n        return this.queue(function() {\n            n = n || this.element(), r = r || T(t, n), h = new vt(e ? void 0 : n), n._addRunner(this), e || n._clearTransformRunnersBefore(this);\n        }, function(c) {\n            e || this.clearTransform();\n            const { x: d, y: u } = new bt(r).transform(n._currentTransform(this));\n            let g = new vt({\n                ...t,\n                origin: [\n                    d,\n                    u\n                ]\n            }), p = this._isDeclarative && o ? o : h;\n            if (i) {\n                g = g.decompose(d, u), p = p.decompose(d, u);\n                const t = g.rotate, e = p.rotate, i = [\n                    t - 360,\n                    t,\n                    t + 360\n                ], a = i.map((t)=>Math.abs(t - e)), s = Math.min(...a), r = a.indexOf(s);\n                g.rotate = i[r];\n            }\n            e && (a || (g.rotate = t.rotate || 0), this._isDeclarative && l && (p.rotate = l)), s.from(p), s.to(g);\n            const f = s.at(c);\n            return l = f.rotate, o = new vt(f), this.addTransform(o), n._addRunner(this), s.done();\n        }, function(e) {\n            (e.origin || \"center\").toString() !== (t.origin || \"center\").toString() && (r = T(e, n)), t = {\n                ...e,\n                origin: r\n            };\n        }, !0), this._isDeclarative && this._rememberMorpher(\"transform\", s), this;\n    },\n    x (t) {\n        return this._queueNumber(\"x\", t);\n    },\n    y (t) {\n        return this._queueNumber(\"y\", t);\n    },\n    ax (t) {\n        return this._queueNumber(\"ax\", t);\n    },\n    ay (t) {\n        return this._queueNumber(\"ay\", t);\n    },\n    dx (t = 0) {\n        return this._queueNumberDelta(\"x\", t);\n    },\n    dy (t = 0) {\n        return this._queueNumberDelta(\"y\", t);\n    },\n    dmove (t, e) {\n        return this.dx(t).dy(e);\n    },\n    _queueNumberDelta (t, e) {\n        if (e = new _t(e), this._tryRetarget(t, e)) return this;\n        const i = new He(this._stepper).to(e);\n        let a = null;\n        return this.queue(function() {\n            a = this.element()[t](), i.from(a), i.to(a + e);\n        }, function(e) {\n            return this.element()[t](i.at(e)), i.done();\n        }, function(t) {\n            i.to(a + new _t(t));\n        }), this._rememberMorpher(t, i), this;\n    },\n    _queueObject (t, e) {\n        if (this._tryRetarget(t, e)) return this;\n        const i = new He(this._stepper).to(e);\n        return this.queue(function() {\n            i.from(this.element()[t]());\n        }, function(e) {\n            return this.element()[t](i.at(e)), i.done();\n        }), this._rememberMorpher(t, i), this;\n    },\n    _queueNumber (t, e) {\n        return this._queueObject(t, new _t(e));\n    },\n    cx (t) {\n        return this._queueNumber(\"cx\", t);\n    },\n    cy (t) {\n        return this._queueNumber(\"cy\", t);\n    },\n    move (t, e) {\n        return this.x(t).y(e);\n    },\n    amove (t, e) {\n        return this.ax(t).ay(e);\n    },\n    center (t, e) {\n        return this.cx(t).cy(e);\n    },\n    size (t, e) {\n        let i;\n        return t && e || (i = this._element.bbox()), t || (t = i.width / i.height * e), e || (e = i.height / i.width * t), this.width(t).height(e);\n    },\n    width (t) {\n        return this._queueNumber(\"width\", t);\n    },\n    height (t) {\n        return this._queueNumber(\"height\", t);\n    },\n    plot (t, e, i, a) {\n        if (4 === arguments.length) return this.plot([\n            t,\n            e,\n            i,\n            a\n        ]);\n        if (this._tryRetarget(\"plot\", t)) return this;\n        const s = new He(this._stepper).type(this._element.MorphArray).to(t);\n        return this.queue(function() {\n            s.from(this._element.array());\n        }, function(t) {\n            return this._element.plot(s.at(t)), s.done();\n        }), this._rememberMorpher(\"plot\", s), this;\n    },\n    leading (t) {\n        return this._queueNumber(\"leading\", t);\n    },\n    viewbox (t, e, i, a) {\n        return this._queueObject(\"viewbox\", new kt(t, e, i, a));\n    },\n    update (t) {\n        return \"object\" != typeof t ? this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n        }) : (null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", t.offset), this);\n    }\n}), Q(Qe, {\n    rx: Zt,\n    ry: $t,\n    from: ne,\n    to: oe\n}), q(Qe, \"Runner\");\nclass si extends Vt {\n    constructor(t, e = t){\n        super(G(\"svg\", t), e), this.namespace();\n    }\n    defs() {\n        return this.isRoot() ? V(this.node.querySelector(\"defs\")) || this.put(new Ut) : this.root().defs();\n    }\n    isRoot() {\n        return !this.node.parentNode || !(this.node.parentNode instanceof O.window.SVGElement) && \"#document-fragment\" !== this.node.parentNode.nodeName;\n    }\n    namespace() {\n        return this.isRoot() ? this.attr({\n            xmlns: E,\n            version: \"1.1\"\n        }).attr(\"xmlns:xlink\", H, Y) : this.root().namespace();\n    }\n    removeNamespace() {\n        return this.attr({\n            xmlns: null,\n            version: null\n        }).attr(\"xmlns:xlink\", null, Y).attr(\"xmlns:svgjs\", null, Y);\n    }\n    root() {\n        return this.isRoot() ? this : super.root();\n    }\n}\nA({\n    Container: {\n        nested: K(function() {\n            return this.put(new si);\n        })\n    }\n}), q(si, \"Svg\", !0);\nlet ri = class extends Vt {\n    constructor(t, e = t){\n        super(G(\"symbol\", t), e);\n    }\n};\nA({\n    Container: {\n        symbol: K(function() {\n            return this.put(new ri);\n        })\n    }\n}), q(ri, \"Symbol\");\nvar ni = Object.freeze({\n    __proto__: null,\n    amove: function(t, e) {\n        return this.ax(t).ay(e);\n    },\n    ax: function(t) {\n        return this.attr(\"x\", t);\n    },\n    ay: function(t) {\n        return this.attr(\"y\", t);\n    },\n    build: function(t) {\n        return this._build = !!t, this;\n    },\n    center: function(t, e, i = this.bbox()) {\n        return this.cx(t, i).cy(e, i);\n    },\n    cx: function(t, e = this.bbox()) {\n        return null == t ? e.cx : this.attr(\"x\", this.attr(\"x\") + t - e.cx);\n    },\n    cy: function(t, e = this.bbox()) {\n        return null == t ? e.cy : this.attr(\"y\", this.attr(\"y\") + t - e.cy);\n    },\n    length: function() {\n        return this.node.getComputedTextLength();\n    },\n    move: function(t, e, i = this.bbox()) {\n        return this.x(t, i).y(e, i);\n    },\n    plain: function(t) {\n        return !1 === this._build && this.clear(), this.node.appendChild(O.document.createTextNode(t)), this;\n    },\n    x: function(t, e = this.bbox()) {\n        return null == t ? e.x : this.attr(\"x\", this.attr(\"x\") + t - e.x);\n    },\n    y: function(t, e = this.bbox()) {\n        return null == t ? e.y : this.attr(\"y\", this.attr(\"y\") + t - e.y);\n    }\n});\nclass oi extends qt {\n    constructor(t, e = t){\n        super(G(\"text\", t), e), this.dom.leading = this.dom.leading ?? new _t(1.3), this._rebuild = !0, this._build = !1;\n    }\n    leading(t) {\n        return null == t ? this.dom.leading : (this.dom.leading = new _t(t), this.rebuild());\n    }\n    rebuild(t) {\n        if (\"boolean\" == typeof t && (this._rebuild = t), this._rebuild) {\n            const t = this;\n            let e = 0;\n            const i = this.dom.leading;\n            this.each(function(a) {\n                if (X(this.node)) return;\n                const s = O.window.getComputedStyle(this.node).getPropertyValue(\"font-size\"), r = i * new _t(s);\n                this.dom.newLined && (this.attr(\"x\", t.attr(\"x\")), \"\\n\" === this.text() ? e += r : (this.attr(\"dy\", a ? r + e : 0), e = 0));\n            }), this.fire(\"rebuild\");\n        }\n        return this;\n    }\n    setData(t) {\n        return this.dom = t, this.dom.leading = new _t(t.leading || 1.3), this;\n    }\n    writeDataToDom() {\n        return R(this, this.dom, {\n            leading: 1.3\n        }), this;\n    }\n    text(t) {\n        if (void 0 === t) {\n            const e = this.node.childNodes;\n            let i = 0;\n            t = \"\";\n            for(let a = 0, s = e.length; a < s; ++a)\"textPath\" === e[a].nodeName || X(e[a]) ? 0 === a && (i = a + 1) : (a !== i && 3 !== e[a].nodeType && !0 === V(e[a]).dom.newLined && (t += \"\\n\"), t += e[a].textContent);\n            return t;\n        }\n        if (this.clear().build(!0), \"function\" == typeof t) t.call(this, this);\n        else for(let e = 0, i = (t = (t + \"\").split(\"\\n\")).length; e < i; e++)this.newLine(t[e]);\n        return this.build(!1).rebuild();\n    }\n}\nQ(oi, ni), A({\n    Container: {\n        text: K(function(t = \"\") {\n            return this.put(new oi).text(t);\n        }),\n        plain: K(function(t = \"\") {\n            return this.put(new oi).plain(t);\n        })\n    }\n}), q(oi, \"Text\");\nclass li extends qt {\n    constructor(t, e = t){\n        super(G(\"tspan\", t), e), this._build = !1;\n    }\n    dx(t) {\n        return this.attr(\"dx\", t);\n    }\n    dy(t) {\n        return this.attr(\"dy\", t);\n    }\n    newLine() {\n        this.dom.newLined = !0;\n        const t = this.parent();\n        if (!(t instanceof oi)) return this;\n        const e = t.index(this), i = O.window.getComputedStyle(this.node).getPropertyValue(\"font-size\"), a = t.dom.leading * new _t(i);\n        return this.dy(e ? a : 0).attr(\"x\", t.x());\n    }\n    text(t) {\n        return null == t ? this.node.textContent + (this.dom.newLined ? \"\\n\" : \"\") : (\"function\" == typeof t ? (this.clear().build(!0), t.call(this, this), this.build(!1)) : this.plain(t), this);\n    }\n}\nQ(li, ni), A({\n    Tspan: {\n        tspan: K(function(t = \"\") {\n            const e = new li;\n            return this._build || this.clear(), this.put(e).text(t);\n        })\n    },\n    Text: {\n        newLine: function(t = \"\") {\n            return this.tspan(t).newLine();\n        }\n    }\n}), q(li, \"Tspan\");\nclass hi extends qt {\n    constructor(t, e = t){\n        super(G(\"circle\", t), e);\n    }\n    radius(t) {\n        return this.attr(\"r\", t);\n    }\n    rx(t) {\n        return this.attr(\"r\", t);\n    }\n    ry(t) {\n        return this.rx(t);\n    }\n    size(t) {\n        return this.radius(new _t(t).divide(2));\n    }\n}\nQ(hi, {\n    x: Jt,\n    y: Qt,\n    cx: Kt,\n    cy: te,\n    width: ee,\n    height: ie\n}), A({\n    Container: {\n        circle: K(function(t = 0) {\n            return this.put(new hi).size(t).move(0, 0);\n        })\n    }\n}), q(hi, \"Circle\");\nclass ci extends Vt {\n    constructor(t, e = t){\n        super(G(\"clipPath\", t), e);\n    }\n    remove() {\n        return this.targets().forEach(function(t) {\n            t.unclip();\n        }), super.remove();\n    }\n    targets() {\n        return Lt(\"svg [clip-path*=\" + this.id() + \"]\");\n    }\n}\nA({\n    Container: {\n        clip: K(function() {\n            return this.defs().put(new ci);\n        })\n    },\n    Element: {\n        clipper () {\n            return this.reference(\"clip-path\");\n        },\n        clipWith (t) {\n            const e = t instanceof ci ? t : this.parent().clip().add(t);\n            return this.attr(\"clip-path\", \"url(#\" + e.id() + \")\");\n        },\n        unclip () {\n            return this.attr(\"clip-path\", null);\n        }\n    }\n}), q(ci, \"ClipPath\");\nclass di extends Gt {\n    constructor(t, e = t){\n        super(G(\"foreignObject\", t), e);\n    }\n}\nA({\n    Container: {\n        foreignObject: K(function(t, e) {\n            return this.put(new di).size(t, e);\n        })\n    }\n}), q(di, \"ForeignObject\");\nvar ui = Object.freeze({\n    __proto__: null,\n    dmove: function(t, e) {\n        return this.children().forEach((i)=>{\n            let a;\n            try {\n                a = i.node instanceof F().SVGSVGElement ? new kt(i.attr([\n                    \"x\",\n                    \"y\",\n                    \"width\",\n                    \"height\"\n                ])) : i.bbox();\n            } catch (t) {\n                return;\n            }\n            const s = new vt(i), r = s.translate(t, e).transform(s.inverse()), n = new bt(a.x, a.y).transform(r);\n            i.move(n.x, n.y);\n        }), this;\n    },\n    dx: function(t) {\n        return this.dmove(t, 0);\n    },\n    dy: function(t) {\n        return this.dmove(0, t);\n    },\n    height: function(t, e = this.bbox()) {\n        return null == t ? e.height : this.size(e.width, t, e);\n    },\n    move: function(t = 0, e = 0, i = this.bbox()) {\n        const a = t - i.x, s = e - i.y;\n        return this.dmove(a, s);\n    },\n    size: function(t, e, i = this.bbox()) {\n        const a = I(this, t, e, i), s = a.width / i.width, r = a.height / i.height;\n        return this.children().forEach((t)=>{\n            const e = new bt(i).transform(new vt(t).inverse());\n            t.scale(s, r, e.x, e.y);\n        }), this;\n    },\n    width: function(t, e = this.bbox()) {\n        return null == t ? e.width : this.size(t, e.height, e);\n    },\n    x: function(t, e = this.bbox()) {\n        return null == t ? e.x : this.move(t, e.y, e);\n    },\n    y: function(t, e = this.bbox()) {\n        return null == t ? e.y : this.move(e.x, t, e);\n    }\n});\nclass gi extends Vt {\n    constructor(t, e = t){\n        super(G(\"g\", t), e);\n    }\n}\nQ(gi, ui), A({\n    Container: {\n        group: K(function() {\n            return this.put(new gi);\n        })\n    }\n}), q(gi, \"G\");\nclass pi extends Vt {\n    constructor(t, e = t){\n        super(G(\"a\", t), e);\n    }\n    target(t) {\n        return this.attr(\"target\", t);\n    }\n    to(t) {\n        return this.attr(\"href\", t, H);\n    }\n}\nQ(pi, ui), A({\n    Container: {\n        link: K(function(t) {\n            return this.put(new pi).to(t);\n        })\n    },\n    Element: {\n        unlink () {\n            const t = this.linker();\n            if (!t) return this;\n            const e = t.parent();\n            if (!e) return this.remove();\n            const i = e.index(t);\n            return e.add(this, i), t.remove(), this;\n        },\n        linkTo (t) {\n            let e = this.linker();\n            return e || (e = new pi, this.wrap(e)), \"function\" == typeof t ? t.call(e, e) : e.to(t), this;\n        },\n        linker () {\n            const t = this.parent();\n            return t && \"a\" === t.node.nodeName.toLowerCase() ? t : null;\n        }\n    }\n}), q(pi, \"A\");\nclass fi extends Vt {\n    constructor(t, e = t){\n        super(G(\"mask\", t), e);\n    }\n    remove() {\n        return this.targets().forEach(function(t) {\n            t.unmask();\n        }), super.remove();\n    }\n    targets() {\n        return Lt(\"svg [mask*=\" + this.id() + \"]\");\n    }\n}\nA({\n    Container: {\n        mask: K(function() {\n            return this.defs().put(new fi);\n        })\n    },\n    Element: {\n        masker () {\n            return this.reference(\"mask\");\n        },\n        maskWith (t) {\n            const e = t instanceof fi ? t : this.parent().mask().add(t);\n            return this.attr(\"mask\", \"url(#\" + e.id() + \")\");\n        },\n        unmask () {\n            return this.attr(\"mask\", null);\n        }\n    }\n}), q(fi, \"Mask\");\nclass xi extends Gt {\n    constructor(t, e = t){\n        super(G(\"stop\", t), e);\n    }\n    update(t) {\n        return (\"number\" == typeof t || t instanceof _t) && (t = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n        }), null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", new _t(t.offset)), this;\n    }\n}\nA({\n    Gradient: {\n        stop: function(t, e, i) {\n            return this.put(new xi).update(t, e, i);\n        }\n    }\n}), q(xi, \"Stop\");\nclass bi extends Gt {\n    constructor(t, e = t){\n        super(G(\"style\", t), e);\n    }\n    addText(t = \"\") {\n        return this.node.textContent += t, this;\n    }\n    font(t, e, i = {}) {\n        return this.rule(\"@font-face\", {\n            fontFamily: t,\n            src: e,\n            ...i\n        });\n    }\n    rule(t, e) {\n        return this.addText(function(t, e) {\n            if (!t) return \"\";\n            if (!e) return t;\n            let i = t + \"{\";\n            for(const t in e)i += t.replace(/([A-Z])/g, function(t, e) {\n                return \"-\" + e.toLowerCase();\n            }) + \":\" + e[t] + \";\";\n            return i += \"}\", i;\n        }(t, e));\n    }\n}\nA(\"Dom\", {\n    style (t, e) {\n        return this.put(new bi).rule(t, e);\n    },\n    fontface (t, e, i) {\n        return this.put(new bi).font(t, e, i);\n    }\n}), q(bi, \"Style\");\nclass mi extends oi {\n    constructor(t, e = t){\n        super(G(\"textPath\", t), e);\n    }\n    array() {\n        const t = this.track();\n        return t ? t.array() : null;\n    }\n    plot(t) {\n        const e = this.track();\n        let i = null;\n        return e && (i = e.plot(t)), null == t ? i : this;\n    }\n    track() {\n        return this.reference(\"href\");\n    }\n}\nA({\n    Container: {\n        textPath: K(function(t, e) {\n            return t instanceof oi || (t = this.text(t)), t.path(e);\n        })\n    },\n    Text: {\n        path: K(function(t, e = !0) {\n            const i = new mi;\n            let a;\n            if (t instanceof We || (t = this.defs().path(t)), i.attr(\"href\", \"#\" + t, H), e) for(; a = this.node.firstChild;)i.node.appendChild(a);\n            return this.put(i);\n        }),\n        textPath () {\n            return this.findOne(\"textPath\");\n        }\n    },\n    Path: {\n        text: K(function(t) {\n            return t instanceof oi || (t = (new oi).addTo(this.parent()).text(t)), t.path(this);\n        }),\n        targets () {\n            return Lt(\"svg textPath\").filter((t)=>(t.attr(\"href\") || \"\").includes(this.id()));\n        }\n    }\n}), mi.prototype.MorphArray = Ee, q(mi, \"TextPath\");\nclass vi extends qt {\n    constructor(t, e = t){\n        super(G(\"use\", t), e);\n    }\n    use(t, e) {\n        return this.attr(\"href\", (e || \"\") + \"#\" + t, H);\n    }\n}\nA({\n    Container: {\n        use: K(function(t, e) {\n            return this.put(new vi).use(t, e);\n        })\n    }\n}), q(vi, \"Use\");\nconst yi = B;\nQ([\n    si,\n    ri,\n    de,\n    ce,\n    be\n], C(\"viewbox\")), Q([\n    xe,\n    je,\n    Ge,\n    We\n], C(\"marker\")), Q(oi, C(\"Text\")), Q(We, C(\"Path\")), Q(Ut, C(\"Defs\")), Q([\n    oi,\n    li\n], C(\"Tspan\")), Q([\n    Ve,\n    se,\n    he,\n    Qe\n], C(\"radius\")), Q(Rt, C(\"EventTarget\")), Q(Bt, C(\"Dom\")), Q(Gt, C(\"Element\")), Q(qt, C(\"Shape\")), Q([\n    Vt,\n    re\n], C(\"Container\")), Q(he, C(\"Gradient\")), Q(Qe, C(\"Runner\")), Ct.extend([\n    ...new Set(k)\n]), function(t = []) {\n    Ne.push(...[].concat(t));\n}([\n    _t,\n    xt,\n    kt,\n    vt,\n    Dt,\n    ge,\n    Ee,\n    bt\n]), Q(Ne, {\n    to (t) {\n        return (new He).type(this.constructor).from(this.toArray()).to(t);\n    },\n    fromArray (t) {\n        return this.init(t), this;\n    },\n    toConsumable () {\n        return this.toArray();\n    },\n    morph (t, e, i, a, s) {\n        return this.fromArray(t.map(function(t, r) {\n            return a.step(t, e[r], i, s[r], s);\n        }));\n    }\n});\nclass wi extends Gt {\n    constructor(t){\n        super(G(\"filter\", t), t), this.$source = \"SourceGraphic\", this.$sourceAlpha = \"SourceAlpha\", this.$background = \"BackgroundImage\", this.$backgroundAlpha = \"BackgroundAlpha\", this.$fill = \"FillPaint\", this.$stroke = \"StrokePaint\", this.$autoSetIn = !0;\n    }\n    put(t, e) {\n        return !(t = super.put(t, e)).attr(\"in\") && this.$autoSetIn && t.attr(\"in\", this.$source), t.attr(\"result\") || t.attr(\"result\", t.id()), t;\n    }\n    remove() {\n        return this.targets().each(\"unfilter\"), super.remove();\n    }\n    targets() {\n        return Lt('svg [filter*=\"' + this.id() + '\"]');\n    }\n    toString() {\n        return \"url(#\" + this.id() + \")\";\n    }\n}\nclass ki extends Gt {\n    constructor(t, e){\n        super(t, e), this.result(this.id());\n    }\n    in(t) {\n        if (null == t) {\n            const t = this.attr(\"in\");\n            return this.parent() && this.parent().find(`[result=\"${t}\"]`)[0] || t;\n        }\n        return this.attr(\"in\", t);\n    }\n    result(t) {\n        return this.attr(\"result\", t);\n    }\n    toString() {\n        return this.result();\n    }\n}\nconst Ai = (t)=>function(...e) {\n        for(let i = t.length; i--;)null != e[i] && this.attr(t[i], e[i]);\n    }, Ci = {\n    blend: Ai([\n        \"in\",\n        \"in2\",\n        \"mode\"\n    ]),\n    colorMatrix: Ai([\n        \"type\",\n        \"values\"\n    ]),\n    composite: Ai([\n        \"in\",\n        \"in2\",\n        \"operator\"\n    ]),\n    convolveMatrix: function(t) {\n        t = new Dt(t).toString(), this.attr({\n            order: Math.sqrt(t.split(\" \").length),\n            kernelMatrix: t\n        });\n    },\n    diffuseLighting: Ai([\n        \"surfaceScale\",\n        \"lightingColor\",\n        \"diffuseConstant\",\n        \"kernelUnitLength\"\n    ]),\n    displacementMap: Ai([\n        \"in\",\n        \"in2\",\n        \"scale\",\n        \"xChannelSelector\",\n        \"yChannelSelector\"\n    ]),\n    dropShadow: Ai([\n        \"in\",\n        \"dx\",\n        \"dy\",\n        \"stdDeviation\"\n    ]),\n    flood: Ai([\n        \"flood-color\",\n        \"flood-opacity\"\n    ]),\n    gaussianBlur: function(t = 0, e = t) {\n        this.attr(\"stdDeviation\", t + \" \" + e);\n    },\n    image: function(t) {\n        this.attr(\"href\", t, H);\n    },\n    morphology: Ai([\n        \"operator\",\n        \"radius\"\n    ]),\n    offset: Ai([\n        \"dx\",\n        \"dy\"\n    ]),\n    specularLighting: Ai([\n        \"surfaceScale\",\n        \"lightingColor\",\n        \"diffuseConstant\",\n        \"specularExponent\",\n        \"kernelUnitLength\"\n    ]),\n    tile: Ai([]),\n    turbulence: Ai([\n        \"baseFrequency\",\n        \"numOctaves\",\n        \"seed\",\n        \"stitchTiles\",\n        \"type\"\n    ])\n};\n[\n    \"blend\",\n    \"colorMatrix\",\n    \"componentTransfer\",\n    \"composite\",\n    \"convolveMatrix\",\n    \"diffuseLighting\",\n    \"displacementMap\",\n    \"dropShadow\",\n    \"flood\",\n    \"gaussianBlur\",\n    \"image\",\n    \"merge\",\n    \"morphology\",\n    \"offset\",\n    \"specularLighting\",\n    \"tile\",\n    \"turbulence\"\n].forEach((t)=>{\n    const e = P(t), i = Ci[t];\n    wi[e + \"Effect\"] = class extends ki {\n        constructor(t){\n            super(G(\"fe\" + e, t), t);\n        }\n        update(t) {\n            return i.apply(this, t), this;\n        }\n    }, wi.prototype[t] = K(function(t, ...i) {\n        const a = new wi[e + \"Effect\"];\n        return null == t ? this.put(a) : (\"function\" == typeof t ? t.call(a, a) : i.unshift(t), this.put(a).update(i));\n    });\n}), Q(wi, {\n    merge (t) {\n        const e = this.put(new wi.MergeEffect);\n        if (\"function\" == typeof t) return t.call(e, e), e;\n        return (t instanceof Array ? t : [\n            ...arguments\n        ]).forEach((t)=>{\n            t instanceof wi.MergeNode ? e.put(t) : e.mergeNode(t);\n        }), e;\n    },\n    componentTransfer (t = {}) {\n        const e = this.put(new wi.ComponentTransferEffect);\n        if (\"function\" == typeof t) return t.call(e, e), e;\n        if (!(t.r || t.g || t.b || t.a)) {\n            t = {\n                r: t,\n                g: t,\n                b: t,\n                a: t\n            };\n        }\n        for(const i in t)e.add(new wi[\"Func\" + i.toUpperCase()](t[i]));\n        return e;\n    }\n});\n[\n    \"distantLight\",\n    \"pointLight\",\n    \"spotLight\",\n    \"mergeNode\",\n    \"FuncR\",\n    \"FuncG\",\n    \"FuncB\",\n    \"FuncA\"\n].forEach((t)=>{\n    const e = P(t);\n    wi[e] = class extends ki {\n        constructor(t){\n            super(G(\"fe\" + e, t), t);\n        }\n    };\n});\n[\n    \"funcR\",\n    \"funcG\",\n    \"funcB\",\n    \"funcA\"\n].forEach(function(t) {\n    const e = wi[P(t)], i = K(function() {\n        return this.put(new e);\n    });\n    wi.ComponentTransferEffect.prototype[t] = i;\n});\n[\n    \"distantLight\",\n    \"pointLight\",\n    \"spotLight\"\n].forEach((t)=>{\n    const e = wi[P(t)], i = K(function() {\n        return this.put(new e);\n    });\n    wi.DiffuseLightingEffect.prototype[t] = i, wi.SpecularLightingEffect.prototype[t] = i;\n}), Q(wi.MergeEffect, {\n    mergeNode (t) {\n        return this.put(new wi.MergeNode).attr(\"in\", t);\n    }\n}), Q(Ut, {\n    filter: function(t) {\n        const e = this.put(new wi);\n        return \"function\" == typeof t && t.call(e, e), e;\n    }\n}), Q(Vt, {\n    filter: function(t) {\n        return this.defs().filter(t);\n    }\n}), Q(Gt, {\n    filterWith: function(t) {\n        const e = t instanceof wi ? t : this.defs().filter(t);\n        return this.attr(\"filter\", e);\n    },\n    unfilter: function(t) {\n        return this.attr(\"filter\", null);\n    },\n    filterer () {\n        return this.reference(\"filter\");\n    }\n});\nconst Si = {\n    blend: function(t, e) {\n        return this.parent() && this.parent().blend(this, t, e);\n    },\n    colorMatrix: function(t, e) {\n        return this.parent() && this.parent().colorMatrix(t, e).in(this);\n    },\n    componentTransfer: function(t) {\n        return this.parent() && this.parent().componentTransfer(t).in(this);\n    },\n    composite: function(t, e) {\n        return this.parent() && this.parent().composite(this, t, e);\n    },\n    convolveMatrix: function(t) {\n        return this.parent() && this.parent().convolveMatrix(t).in(this);\n    },\n    diffuseLighting: function(t, e, i, a) {\n        return this.parent() && this.parent().diffuseLighting(t, i, a).in(this);\n    },\n    displacementMap: function(t, e, i, a) {\n        return this.parent() && this.parent().displacementMap(this, t, e, i, a);\n    },\n    dropShadow: function(t, e, i) {\n        return this.parent() && this.parent().dropShadow(this, t, e, i).in(this);\n    },\n    flood: function(t, e) {\n        return this.parent() && this.parent().flood(t, e);\n    },\n    gaussianBlur: function(t, e) {\n        return this.parent() && this.parent().gaussianBlur(t, e).in(this);\n    },\n    image: function(t) {\n        return this.parent() && this.parent().image(t);\n    },\n    merge: function(t) {\n        return t = t instanceof Array ? t : [\n            ...t\n        ], this.parent() && this.parent().merge(this, ...t);\n    },\n    morphology: function(t, e) {\n        return this.parent() && this.parent().morphology(t, e).in(this);\n    },\n    offset: function(t, e) {\n        return this.parent() && this.parent().offset(t, e).in(this);\n    },\n    specularLighting: function(t, e, i, a, s) {\n        return this.parent() && this.parent().specularLighting(t, i, a, s).in(this);\n    },\n    tile: function() {\n        return this.parent() && this.parent().tile().in(this);\n    },\n    turbulence: function(t, e, i, a, s) {\n        return this.parent() && this.parent().turbulence(t, e, i, a, s).in(this);\n    }\n};\nQ(ki, Si), Q(wi.MergeEffect, {\n    in: function(t) {\n        return t instanceof wi.MergeNode ? this.add(t, 0) : this.add((new wi.MergeNode).in(t), 0), this;\n    }\n}), Q([\n    wi.CompositeEffect,\n    wi.BlendEffect,\n    wi.DisplacementMapEffect\n], {\n    in2: function(t) {\n        if (null == t) {\n            const t = this.attr(\"in2\");\n            return this.parent() && this.parent().find(`[result=\"${t}\"]`)[0] || t;\n        }\n        return this.attr(\"in2\", t);\n    }\n}), wi.filter = {\n    sepiatone: [\n        .343,\n        .669,\n        .119,\n        0,\n        0,\n        .249,\n        .626,\n        .13,\n        0,\n        0,\n        .172,\n        .334,\n        .111,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0\n    ]\n};\nvar Li = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"getDefaultFilter\",\n            value: function(t, e) {\n                var i = this.w;\n                t.unfilter(!0), (new wi).size(\"120%\", \"180%\", \"-5%\", \"-40%\"), i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n            }\n        },\n        {\n            key: \"applyFilter\",\n            value: function(t, e, i) {\n                var a, s = this, r = this.w;\n                if (t.unfilter(!0), \"none\" !== i) {\n                    var n, o, l = r.config.chart.dropShadow, h = \"lighten\" === i ? 2 : .3;\n                    if (t.filterWith(function(t) {\n                        t.colorMatrix({\n                            type: \"matrix\",\n                            values: \"\\n          \".concat(h, \" 0 0 0 0\\n          0 \").concat(h, \" 0 0 0\\n          0 0 \").concat(h, \" 0 0\\n          0 0 0 1 0\\n        \"),\n                            in: \"SourceGraphic\",\n                            result: \"brightness\"\n                        }), l.enabled && s.addShadow(t, e, l, \"brightness\");\n                    }), !l.noUserSpaceOnUse) null === (n = t.filterer()) || void 0 === n || null === (o = n.node) || void 0 === o || o.setAttribute(\"filterUnits\", \"userSpaceOnUse\");\n                    this._scaleFilterSize(null === (a = t.filterer()) || void 0 === a ? void 0 : a.node);\n                } else this.getDefaultFilter(t, e);\n            }\n        },\n        {\n            key: \"addShadow\",\n            value: function(t, e, i, a) {\n                var s, r = this.w, n = i.blur, o = i.top, l = i.left, h = i.color, c = i.opacity;\n                if (h = Array.isArray(h) ? h[e] : h, (null === (s = r.config.chart.dropShadow.enabledOnSeries) || void 0 === s ? void 0 : s.length) > 0 && -1 === r.config.chart.dropShadow.enabledOnSeries.indexOf(e)) return t;\n                t.offset({\n                    in: a,\n                    dx: l,\n                    dy: o,\n                    result: \"offset\"\n                }), t.gaussianBlur({\n                    in: \"offset\",\n                    stdDeviation: n,\n                    result: \"blur\"\n                }), t.flood({\n                    \"flood-color\": h,\n                    \"flood-opacity\": c,\n                    result: \"flood\"\n                }), t.composite({\n                    in: \"flood\",\n                    in2: \"blur\",\n                    operator: \"in\",\n                    result: \"shadow\"\n                }), t.merge([\n                    \"shadow\",\n                    a\n                ]);\n            }\n        },\n        {\n            key: \"dropShadow\",\n            value: function(t, e) {\n                var i, a, s, r, n, o = this, l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, h = this.w;\n                if (t.unfilter(!0), v.isMsEdge() && \"radialBar\" === h.config.chart.type) return t;\n                if ((null === (i = h.config.chart.dropShadow.enabledOnSeries) || void 0 === i ? void 0 : i.length) > 0 && -1 === (null === (s = h.config.chart.dropShadow.enabledOnSeries) || void 0 === s ? void 0 : s.indexOf(l))) return t;\n                (t.filterWith(function(t) {\n                    o.addShadow(t, l, e, \"SourceGraphic\");\n                }), e.noUserSpaceOnUse) || null === (r = t.filterer()) || void 0 === r || null === (n = r.node) || void 0 === n || n.setAttribute(\"filterUnits\", \"userSpaceOnUse\");\n                return this._scaleFilterSize(null === (a = t.filterer()) || void 0 === a ? void 0 : a.node), t;\n            }\n        },\n        {\n            key: \"setSelectionFilter\",\n            value: function(t, e, i) {\n                var a = this.w;\n                if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {\n                    t.node.setAttribute(\"selected\", !0);\n                    var s = a.config.states.active.filter;\n                    \"none\" !== s && this.applyFilter(t, e, s.type);\n                }\n            }\n        },\n        {\n            key: \"_scaleFilterSize\",\n            value: function(t) {\n                if (t) {\n                    !function(e) {\n                        for(var i in e)e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n                    }({\n                        width: \"200%\",\n                        height: \"200%\",\n                        x: \"-50%\",\n                        y: \"-50%\"\n                    });\n                }\n            }\n        }\n    ]), t;\n}(), Mi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"roundPathCorners\",\n            value: function(t, e) {\n                function i(t, e, i) {\n                    var s = e.x - t.x, r = e.y - t.y, n = Math.sqrt(s * s + r * r);\n                    return a(t, e, Math.min(1, i / n));\n                }\n                function a(t, e, i) {\n                    return {\n                        x: t.x + (e.x - t.x) * i,\n                        y: t.y + (e.y - t.y) * i\n                    };\n                }\n                function s(t, e) {\n                    t.length > 2 && (t[t.length - 2] = e.x, t[t.length - 1] = e.y);\n                }\n                function r(t) {\n                    return {\n                        x: parseFloat(t[t.length - 2]),\n                        y: parseFloat(t[t.length - 1])\n                    };\n                }\n                t.indexOf(\"NaN\") > -1 && (t = \"\");\n                var n = t.split(/[,\\s]/).reduce(function(t, e) {\n                    var i = e.match(/^([a-zA-Z])(.+)/);\n                    return i ? (t.push(i[1]), t.push(i[2])) : t.push(e), t;\n                }, []).reduce(function(t, e) {\n                    return parseFloat(e) == e && t.length ? t[t.length - 1].push(e) : t.push([\n                        e\n                    ]), t;\n                }, []), o = [];\n                if (n.length > 1) {\n                    var l = r(n[0]), h = null;\n                    \"Z\" == n[n.length - 1][0] && n[0].length > 2 && (h = [\n                        \"L\",\n                        l.x,\n                        l.y\n                    ], n[n.length - 1] = h), o.push(n[0]);\n                    for(var c = 1; c < n.length; c++){\n                        var d = o[o.length - 1], u = n[c], g = u == h ? n[1] : n[c + 1];\n                        if (g && d && d.length > 2 && \"L\" == u[0] && g.length > 2 && \"L\" == g[0]) {\n                            var p, f, x = r(d), b = r(u), m = r(g);\n                            p = i(b, x, e), f = i(b, m, e), s(u, p), u.origPoint = b, o.push(u);\n                            var v = a(p, b, .5), y = a(b, f, .5), w = [\n                                \"C\",\n                                v.x,\n                                v.y,\n                                y.x,\n                                y.y,\n                                f.x,\n                                f.y\n                            ];\n                            w.origPoint = b, o.push(w);\n                        } else o.push(u);\n                    }\n                    if (h) {\n                        var k = r(o[o.length - 1]);\n                        o.push([\n                            \"Z\"\n                        ]), s(o[0], k);\n                    }\n                } else o = n;\n                return o.reduce(function(t, e) {\n                    return t + e.join(\" \") + \" \";\n                }, \"\");\n            }\n        },\n        {\n            key: \"drawLine\",\n            value: function(t, e, i, a) {\n                var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"#a8a8a8\", r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : \"butt\";\n                return this.w.globals.dom.Paper.line().attr({\n                    x1: t,\n                    y1: e,\n                    x2: i,\n                    y2: a,\n                    stroke: s,\n                    \"stroke-dasharray\": r,\n                    \"stroke-width\": n,\n                    \"stroke-linecap\": o\n                });\n            }\n        },\n        {\n            key: \"drawRect\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"#fefefe\", n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c = this.w.globals.dom.Paper.rect();\n                return c.attr({\n                    x: t,\n                    y: e,\n                    width: i > 0 ? i : 0,\n                    height: a > 0 ? a : 0,\n                    rx: s,\n                    ry: s,\n                    opacity: n,\n                    \"stroke-width\": null !== o ? o : 0,\n                    stroke: null !== l ? l : \"none\",\n                    \"stroke-dasharray\": h\n                }), c.node.setAttribute(\"fill\", r), c;\n            }\n        },\n        {\n            key: \"drawPolygon\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"#e1e1e1\", i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"none\";\n                return this.w.globals.dom.Paper.polygon(t).attr({\n                    fill: a,\n                    stroke: e,\n                    \"stroke-width\": i\n                });\n            }\n        },\n        {\n            key: \"drawCircle\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n                t < 0 && (t = 0);\n                var i = this.w.globals.dom.Paper.circle(2 * t);\n                return null !== e && i.attr(e), i;\n            }\n        },\n        {\n            key: \"drawPath\",\n            value: function(t) {\n                var e = t.d, i = void 0 === e ? \"\" : e, a = t.stroke, s = void 0 === a ? \"#a8a8a8\" : a, r = t.strokeWidth, n = void 0 === r ? 1 : r, o = t.fill, l = t.fillOpacity, h = void 0 === l ? 1 : l, c = t.strokeOpacity, d = void 0 === c ? 1 : c, u = t.classes, g = t.strokeLinecap, p = void 0 === g ? null : g, f = t.strokeDashArray, x = void 0 === f ? 0 : f, b = this.w;\n                return null === p && (p = b.config.stroke.lineCap), (i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({\n                    fill: o,\n                    \"fill-opacity\": h,\n                    stroke: s,\n                    \"stroke-opacity\": d,\n                    \"stroke-linecap\": p,\n                    \"stroke-width\": n,\n                    \"stroke-dasharray\": x,\n                    class: u\n                });\n            }\n        },\n        {\n            key: \"group\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = this.w.globals.dom.Paper.group();\n                return null !== t && e.attr(t), e;\n            }\n        },\n        {\n            key: \"move\",\n            value: function(t, e) {\n                var i = [\n                    \"M\",\n                    t,\n                    e\n                ].join(\" \");\n                return i;\n            }\n        },\n        {\n            key: \"line\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = null;\n                return null === i ? a = [\n                    \" L\",\n                    t,\n                    e\n                ].join(\" \") : \"H\" === i ? a = [\n                    \" H\",\n                    t\n                ].join(\" \") : \"V\" === i && (a = [\n                    \" V\",\n                    e\n                ].join(\" \")), a;\n            }\n        },\n        {\n            key: \"curve\",\n            value: function(t, e, i, a, s, r) {\n                var n = [\n                    \"C\",\n                    t,\n                    e,\n                    i,\n                    a,\n                    s,\n                    r\n                ].join(\" \");\n                return n;\n            }\n        },\n        {\n            key: \"quadraticCurve\",\n            value: function(t, e, i, a) {\n                return [\n                    \"Q\",\n                    t,\n                    e,\n                    i,\n                    a\n                ].join(\" \");\n            }\n        },\n        {\n            key: \"arc\",\n            value: function(t, e, i, a, s, r, n) {\n                var o = \"A\";\n                arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (o = \"a\");\n                var l = [\n                    o,\n                    t,\n                    e,\n                    i,\n                    a,\n                    s,\n                    r,\n                    n\n                ].join(\" \");\n                return l;\n            }\n        },\n        {\n            key: \"renderPaths\",\n            value: function(t) {\n                var e, i = t.j, a = t.realIndex, s = t.pathFrom, r = t.pathTo, n = t.stroke, o = t.strokeWidth, l = t.strokeLinecap, h = t.fill, c = t.animationDelay, d = t.initialSpeed, g = t.dataChangeSpeed, p = t.className, f = t.chartType, x = t.shouldClipToGrid, b = void 0 === x || x, m = t.bindEventsOnPaths, v = void 0 === m || m, w = t.drawShadow, k = void 0 === w || w, A = this.w, C = new Li(this.ctx), S = new y(this.ctx), L = this.w.config.chart.animations.enabled, M = L && this.w.config.chart.animations.dynamicAnimation.enabled;\n                if (s && s.startsWith(\"M 0 0\") && r) {\n                    var P = r.match(/^M\\s+[\\d.-]+\\s+[\\d.-]+/);\n                    P && (s = s.replace(/^M\\s+0\\s+0/, P[0]));\n                }\n                var I = !!(L && !A.globals.resized || M && A.globals.dataChanged && A.globals.shouldAnimate);\n                I ? e = s : (e = r, A.globals.animationEnded = !0);\n                var T = A.config.stroke.dashArray, z = 0;\n                z = Array.isArray(T) ? T[a] : A.config.stroke.dashArray;\n                var X = this.drawPath({\n                    d: e,\n                    stroke: n,\n                    strokeWidth: o,\n                    fill: h,\n                    fillOpacity: 1,\n                    classes: p,\n                    strokeLinecap: l,\n                    strokeDashArray: z\n                });\n                X.attr(\"index\", a), b && (\"bar\" === f && !A.globals.isHorizontal || A.globals.comboCharts ? X.attr({\n                    \"clip-path\": \"url(#gridRectBarMask\".concat(A.globals.cuid, \")\")\n                }) : X.attr({\n                    \"clip-path\": \"url(#gridRectMask\".concat(A.globals.cuid, \")\")\n                })), A.config.chart.dropShadow.enabled && k && C.dropShadow(X, A.config.chart.dropShadow, a), v && (X.node.addEventListener(\"mouseenter\", this.pathMouseEnter.bind(this, X)), X.node.addEventListener(\"mouseleave\", this.pathMouseLeave.bind(this, X)), X.node.addEventListener(\"mousedown\", this.pathMouseDown.bind(this, X))), X.attr({\n                    pathTo: r,\n                    pathFrom: s\n                });\n                var R = {\n                    el: X,\n                    j: i,\n                    realIndex: a,\n                    pathFrom: s,\n                    pathTo: r,\n                    fill: h,\n                    strokeWidth: o,\n                    delay: c\n                };\n                return !L || A.globals.resized || A.globals.dataChanged ? !A.globals.resized && A.globals.dataChanged || S.showDelayedElements() : S.animatePathsGradually(u(u({}, R), {}, {\n                    speed: d\n                })), A.globals.dataChanged && M && I && S.animatePathsGradually(u(u({}, R), {}, {\n                    speed: g\n                })), X;\n            }\n        },\n        {\n            key: \"drawPattern\",\n            value: function(t, e, i) {\n                var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"#a8a8a8\", s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;\n                return this.w.globals.dom.Paper.pattern(e, i, function(r) {\n                    \"horizontalLines\" === t ? r.line(0, 0, i, 0).stroke({\n                        color: a,\n                        width: s + 1\n                    }) : \"verticalLines\" === t ? r.line(0, 0, 0, e).stroke({\n                        color: a,\n                        width: s + 1\n                    }) : \"slantedLines\" === t ? r.line(0, 0, e, i).stroke({\n                        color: a,\n                        width: s\n                    }) : \"squares\" === t ? r.rect(e, i).fill(\"none\").stroke({\n                        color: a,\n                        width: s\n                    }) : \"circles\" === t && r.circle(e).fill(\"none\").stroke({\n                        color: a,\n                        width: s\n                    });\n                });\n            }\n        },\n        {\n            key: \"drawGradient\",\n            value: function(t, e, i, a, s) {\n                var r, n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : [], h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c = this.w;\n                e.length < 9 && 0 === e.indexOf(\"#\") && (e = v.hexToRgba(e, a)), i.length < 9 && 0 === i.indexOf(\"#\") && (i = v.hexToRgba(i, s));\n                var d = 0, u = 1, g = 1, p = null;\n                null !== o && (d = void 0 !== o[0] ? o[0] / 100 : 0, u = void 0 !== o[1] ? o[1] / 100 : 1, g = void 0 !== o[2] ? o[2] / 100 : 1, p = void 0 !== o[3] ? o[3] / 100 : null);\n                var f = !(\"donut\" !== c.config.chart.type && \"pie\" !== c.config.chart.type && \"polarArea\" !== c.config.chart.type && \"bubble\" !== c.config.chart.type);\n                if (r = l && 0 !== l.length ? c.globals.dom.Paper.gradient(f ? \"radial\" : \"linear\", function(t) {\n                    (Array.isArray(l[h]) ? l[h] : l).forEach(function(e) {\n                        t.stop(e.offset / 100, e.color, e.opacity);\n                    });\n                }) : c.globals.dom.Paper.gradient(f ? \"radial\" : \"linear\", function(t) {\n                    t.stop(d, e, a), t.stop(u, i, s), t.stop(g, i, s), null !== p && t.stop(p, e, a);\n                }), f) {\n                    var x = c.globals.gridWidth / 2, b = c.globals.gridHeight / 2;\n                    \"bubble\" !== c.config.chart.type ? r.attr({\n                        gradientUnits: \"userSpaceOnUse\",\n                        cx: x,\n                        cy: b,\n                        r: n\n                    }) : r.attr({\n                        cx: .5,\n                        cy: .5,\n                        r: .8,\n                        fx: .2,\n                        fy: .2\n                    });\n                } else \"vertical\" === t ? r.from(0, 0).to(0, 1) : \"diagonal\" === t ? r.from(0, 0).to(1, 1) : \"horizontal\" === t ? r.from(0, 1).to(1, 1) : \"diagonal2\" === t && r.from(1, 0).to(0, 1);\n                return r;\n            }\n        },\n        {\n            key: \"getTextBasedOnMaxWidth\",\n            value: function(t) {\n                var e = t.text, i = t.maxWidth, a = t.fontSize, s = t.fontFamily, r = this.getTextRects(e, a, s), n = r.width / e.length, o = Math.floor(i / n);\n                return i < r.width ? e.slice(0, o - 3) + \"...\" : e;\n            }\n        },\n        {\n            key: \"drawText\",\n            value: function(t) {\n                var e = this, i = t.x, a = t.y, s = t.text, r = t.textAnchor, n = t.fontSize, o = t.fontFamily, l = t.fontWeight, h = t.foreColor, c = t.opacity, d = t.maxWidth, g = t.cssClass, p = void 0 === g ? \"\" : g, f = t.isPlainText, x = void 0 === f || f, b = t.dominantBaseline, m = void 0 === b ? \"auto\" : b, v = this.w;\n                void 0 === s && (s = \"\");\n                var y = s;\n                r || (r = \"start\"), h && h.length || (h = v.config.chart.foreColor), o = o || v.config.chart.fontFamily, l = l || \"regular\";\n                var w, k = {\n                    maxWidth: d,\n                    fontSize: n = n || \"11px\",\n                    fontFamily: o\n                };\n                return Array.isArray(s) ? w = v.globals.dom.Paper.text(function(t) {\n                    for(var i = 0; i < s.length; i++)y = s[i], d && (y = e.getTextBasedOnMaxWidth(u({\n                        text: s[i]\n                    }, k))), 0 === i ? t.tspan(y) : t.tspan(y).newLine();\n                }) : (d && (y = this.getTextBasedOnMaxWidth(u({\n                    text: s\n                }, k))), w = x ? v.globals.dom.Paper.plain(s) : v.globals.dom.Paper.text(function(t) {\n                    return t.tspan(y);\n                })), w.attr({\n                    x: i,\n                    y: a,\n                    \"text-anchor\": r,\n                    \"dominant-baseline\": m,\n                    \"font-size\": n,\n                    \"font-family\": o,\n                    \"font-weight\": l,\n                    fill: h,\n                    class: \"apexcharts-text \" + p\n                }), w.node.style.fontFamily = o, w.node.style.opacity = c, w;\n            }\n        },\n        {\n            key: \"getMarkerPath\",\n            value: function(t, e, i, a) {\n                var s = \"\";\n                switch(i){\n                    case \"cross\":\n                        s = \"M \".concat(t - (a /= 1.4), \" \").concat(e - a, \" L \").concat(t + a, \" \").concat(e + a, \"  M \").concat(t - a, \" \").concat(e + a, \" L \").concat(t + a, \" \").concat(e - a);\n                        break;\n                    case \"plus\":\n                        s = \"M \".concat(t - (a /= 1.12), \" \").concat(e, \" L \").concat(t + a, \" \").concat(e, \"  M \").concat(t, \" \").concat(e - a, \" L \").concat(t, \" \").concat(e + a);\n                        break;\n                    case \"star\":\n                    case \"sparkle\":\n                        var r = 5;\n                        a *= 1.15, \"sparkle\" === i && (a /= 1.1, r = 4);\n                        for(var n = Math.PI / r, o = 0; o <= 2 * r; o++){\n                            var l = o * n, h = o % 2 == 0 ? a : a / 2;\n                            s += (0 === o ? \"M\" : \"L\") + (t + h * Math.sin(l)) + \",\" + (e - h * Math.cos(l));\n                        }\n                        s += \"Z\";\n                        break;\n                    case \"triangle\":\n                        s = \"M \".concat(t, \" \").concat(e - a, \" \\n             L \").concat(t + a, \" \").concat(e + a, \" \\n             L \").concat(t - a, \" \").concat(e + a, \" \\n             Z\");\n                        break;\n                    case \"square\":\n                    case \"rect\":\n                        s = \"M \".concat(t - (a /= 1.125), \" \").concat(e - a, \" \\n           L \").concat(t + a, \" \").concat(e - a, \" \\n           L \").concat(t + a, \" \").concat(e + a, \" \\n           L \").concat(t - a, \" \").concat(e + a, \" \\n           Z\");\n                        break;\n                    case \"diamond\":\n                        a *= 1.05, s = \"M \".concat(t, \" \").concat(e - a, \" \\n             L \").concat(t + a, \" \").concat(e, \" \\n             L \").concat(t, \" \").concat(e + a, \" \\n             L \").concat(t - a, \" \").concat(e, \" \\n            Z\");\n                        break;\n                    case \"line\":\n                        s = \"M \".concat(t - (a /= 1.1), \" \").concat(e, \" \\n           L \").concat(t + a, \" \").concat(e);\n                        break;\n                    default:\n                        a *= 2, s = \"M \".concat(t, \", \").concat(e, \" \\n           m -\").concat(a / 2, \", 0 \\n           a \").concat(a / 2, \",\").concat(a / 2, \" 0 1,0 \").concat(a, \",0 \\n           a \").concat(a / 2, \",\").concat(a / 2, \" 0 1,0 -\").concat(a, \",0\");\n                }\n                return s;\n            }\n        },\n        {\n            key: \"drawMarkerShape\",\n            value: function(t, e, i, a, s) {\n                var r = this.drawPath({\n                    d: this.getMarkerPath(t, e, i, a, s),\n                    stroke: s.pointStrokeColor,\n                    strokeDashArray: s.pointStrokeDashArray,\n                    strokeWidth: s.pointStrokeWidth,\n                    fill: s.pointFillColor,\n                    fillOpacity: s.pointFillOpacity,\n                    strokeOpacity: s.pointStrokeOpacity\n                });\n                return r.attr({\n                    cx: t,\n                    cy: e,\n                    shape: s.shape,\n                    class: s.class ? s.class : \"\"\n                }), r;\n            }\n        },\n        {\n            key: \"drawMarker\",\n            value: function(t, e, i) {\n                t = t || 0;\n                var a = i.pSize || 0;\n                return v.isNumber(e) || (a = 0, e = 0), this.drawMarkerShape(t, e, null == i ? void 0 : i.shape, a, u(u({}, i), \"line\" === i.shape || \"plus\" === i.shape || \"cross\" === i.shape ? {\n                    pointStrokeColor: i.pointFillColor,\n                    pointStrokeOpacity: i.pointFillOpacity\n                } : {}));\n            }\n        },\n        {\n            key: \"pathMouseEnter\",\n            value: function(t, e) {\n                var i = this.w, a = new Li(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10);\n                if (\"function\" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), this.ctx.events.fireEvent(\"dataPointMouseEnter\", [\n                    e,\n                    this.ctx,\n                    {\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]), (\"none\" === i.config.states.active.filter.type || \"true\" !== t.node.getAttribute(\"selected\")) && \"none\" !== i.config.states.hover.filter.type && !i.globals.isTouchDevice) {\n                    var n = i.config.states.hover.filter;\n                    a.applyFilter(t, s, n.type);\n                }\n            }\n        },\n        {\n            key: \"pathMouseLeave\",\n            value: function(t, e) {\n                var i = this.w, a = new Li(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10);\n                \"function\" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), this.ctx.events.fireEvent(\"dataPointMouseLeave\", [\n                    e,\n                    this.ctx,\n                    {\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]), \"none\" !== i.config.states.active.filter.type && \"true\" === t.node.getAttribute(\"selected\") || \"none\" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s);\n            }\n        },\n        {\n            key: \"pathMouseDown\",\n            value: function(t, e) {\n                var i = this.w, a = new Li(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10), n = \"false\";\n                if (\"true\" === t.node.getAttribute(\"selected\")) {\n                    if (t.node.setAttribute(\"selected\", \"false\"), i.globals.selectedDataPoints[s].indexOf(r) > -1) {\n                        var o = i.globals.selectedDataPoints[s].indexOf(r);\n                        i.globals.selectedDataPoints[s].splice(o, 1);\n                    }\n                } else {\n                    if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {\n                        i.globals.selectedDataPoints = [];\n                        var l = i.globals.dom.Paper.find(\".apexcharts-series path:not(.apexcharts-decoration-element)\"), h = i.globals.dom.Paper.find(\".apexcharts-series circle:not(.apexcharts-decoration-element), .apexcharts-series rect:not(.apexcharts-decoration-element)\"), c = function(t) {\n                            Array.prototype.forEach.call(t, function(t) {\n                                t.node.setAttribute(\"selected\", \"false\"), a.getDefaultFilter(t, s);\n                            });\n                        };\n                        c(l), c(h);\n                    }\n                    t.node.setAttribute(\"selected\", \"true\"), n = \"true\", void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(r);\n                }\n                if (\"true\" === n) {\n                    var d = i.config.states.active.filter;\n                    if (\"none\" !== d) a.applyFilter(t, s, d.type);\n                    else if (\"none\" !== i.config.states.hover.filter && !i.globals.isTouchDevice) {\n                        var u = i.config.states.hover.filter;\n                        a.applyFilter(t, s, u.type);\n                    }\n                } else if (\"none\" !== i.config.states.active.filter.type) if (\"none\" === i.config.states.hover.filter.type || i.globals.isTouchDevice) a.getDefaultFilter(t, s);\n                else {\n                    u = i.config.states.hover.filter;\n                    a.applyFilter(t, s, u.type);\n                }\n                \"function\" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {\n                    selectedDataPoints: i.globals.selectedDataPoints,\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), e && this.ctx.events.fireEvent(\"dataPointSelection\", [\n                    e,\n                    this.ctx,\n                    {\n                        selectedDataPoints: i.globals.selectedDataPoints,\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]);\n            }\n        },\n        {\n            key: \"rotateAroundCenter\",\n            value: function(t) {\n                var e = {};\n                return t && \"function\" == typeof t.getBBox && (e = t.getBBox()), {\n                    x: e.x + e.width / 2,\n                    y: e.y + e.height / 2\n                };\n            }\n        },\n        {\n            key: \"getTextRects\",\n            value: function(t, e, i, a) {\n                var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r = this.w, n = this.drawText({\n                    x: -200,\n                    y: -200,\n                    text: t,\n                    textAnchor: \"start\",\n                    fontSize: e,\n                    fontFamily: i,\n                    foreColor: \"#fff\",\n                    opacity: 0\n                });\n                a && n.attr(\"transform\", a), r.globals.dom.Paper.add(n);\n                var o = n.bbox();\n                return s || (o = n.node.getBoundingClientRect()), n.remove(), {\n                    width: o.width,\n                    height: o.height\n                };\n            }\n        },\n        {\n            key: \"placeTextWithEllipsis\",\n            value: function(t, e, i) {\n                if (\"function\" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= i / 1.1)) {\n                    for(var a = e.length - 3; a > 0; a -= 3)if (t.getSubStringLength(0, a) <= i / 1.1) return void (t.textContent = e.substring(0, a) + \"...\");\n                    t.textContent = \".\";\n                }\n            }\n        }\n    ], [\n        {\n            key: \"setAttrs\",\n            value: function(t, e) {\n                for(var i in e)e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n            }\n        }\n    ]), t;\n}(), Pi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"getStackedSeriesTotals\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = this.w, i = [];\n                if (0 === e.globals.series.length) return i;\n                for(var a = 0; a < e.globals.series[e.globals.maxValsInArrayIndex].length; a++){\n                    for(var s = 0, r = 0; r < e.globals.series.length; r++)void 0 !== e.globals.series[r][a] && -1 === t.indexOf(r) && (s += e.globals.series[r][a]);\n                    i.push(s);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"getSeriesTotalByIndex\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                return null === t ? this.w.config.series.reduce(function(t, e) {\n                    return t + e;\n                }, 0) : this.w.globals.series[t].reduce(function(t, e) {\n                    return t + e;\n                }, 0);\n            }\n        },\n        {\n            key: \"getStackedSeriesTotalsByGroups\",\n            value: function() {\n                var t = this, e = this.w, i = [];\n                return e.globals.seriesGroups.forEach(function(a) {\n                    var s = [];\n                    e.config.series.forEach(function(t, i) {\n                        a.indexOf(e.globals.seriesNames[i]) > -1 && s.push(i);\n                    });\n                    var r = e.globals.series.map(function(t, e) {\n                        return -1 === s.indexOf(e) ? e : -1;\n                    }).filter(function(t) {\n                        return -1 !== t;\n                    });\n                    i.push(t.getStackedSeriesTotals(r));\n                }), i;\n            }\n        },\n        {\n            key: \"setSeriesYAxisMappings\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config, i = [], a = [], s = [], r = t.series.length > e.yaxis.length || e.yaxis.some(function(t) {\n                    return Array.isArray(t.seriesName);\n                });\n                e.series.forEach(function(t, e) {\n                    s.push(e), a.push(null);\n                }), e.yaxis.forEach(function(t, e) {\n                    i[e] = [];\n                });\n                var n = [];\n                e.yaxis.forEach(function(t, a) {\n                    var o = !1;\n                    if (t.seriesName) {\n                        var l = [];\n                        Array.isArray(t.seriesName) ? l = t.seriesName : l.push(t.seriesName), l.forEach(function(t) {\n                            e.series.forEach(function(e, n) {\n                                if (e.name === t) {\n                                    var l = n;\n                                    a === n || r ? !r || s.indexOf(n) > -1 ? i[a].push([\n                                        a,\n                                        n\n                                    ]) : console.warn(\"Series '\" + e.name + \"' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.\") : (i[n].push([\n                                        n,\n                                        a\n                                    ]), l = a), o = !0, -1 !== (l = s.indexOf(l)) && s.splice(l, 1);\n                                }\n                            });\n                        });\n                    }\n                    o || n.push(a);\n                }), i = i.map(function(t, e) {\n                    var i = [];\n                    return t.forEach(function(t) {\n                        a[t[1]] = t[0], i.push(t[1]);\n                    }), i;\n                });\n                for(var o = e.yaxis.length - 1, l = 0; l < n.length && (o = n[l], i[o] = [], s); l++){\n                    var h = s[0];\n                    s.shift(), i[o].push(h), a[h] = o;\n                }\n                s.forEach(function(t) {\n                    i[o].push(t), a[t] = o;\n                }), t.seriesYAxisMap = i.map(function(t) {\n                    return t;\n                }), t.seriesYAxisReverseMap = a.map(function(t) {\n                    return t;\n                }), t.seriesYAxisMap.forEach(function(t, i) {\n                    t.forEach(function(t) {\n                        e.series[t] && void 0 === e.series[t].group && (e.series[t].group = \"apexcharts-axis-\".concat(i.toString()));\n                    });\n                });\n            }\n        },\n        {\n            key: \"isSeriesNull\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                return 0 === (null === t ? this.w.config.series.filter(function(t) {\n                    return null !== t;\n                }) : this.w.config.series[t].data.filter(function(t) {\n                    return null !== t;\n                })).length;\n            }\n        },\n        {\n            key: \"seriesHaveSameValues\",\n            value: function(t) {\n                return this.w.globals.series[t].every(function(t, e, i) {\n                    return t === i[0];\n                });\n            }\n        },\n        {\n            key: \"getCategoryLabels\",\n            value: function(t) {\n                var e = this.w, i = t.slice();\n                return e.config.xaxis.convertedCatToNumeric && (i = t.map(function(t, i) {\n                    return e.config.xaxis.labels.formatter(t - e.globals.minX + 1);\n                })), i;\n            }\n        },\n        {\n            key: \"getLargestSeries\",\n            value: function() {\n                var t = this.w;\n                t.globals.maxValsInArrayIndex = t.globals.series.map(function(t) {\n                    return t.length;\n                }).indexOf(Math.max.apply(Math, t.globals.series.map(function(t) {\n                    return t.length;\n                })));\n            }\n        },\n        {\n            key: \"getLargestMarkerSize\",\n            value: function() {\n                var t = this.w, e = 0;\n                return t.globals.markers.size.forEach(function(t) {\n                    e = Math.max(e, t);\n                }), t.config.markers.discrete && t.config.markers.discrete.length && t.config.markers.discrete.forEach(function(t) {\n                    e = Math.max(e, t.size);\n                }), e > 0 && (t.config.markers.hover.size > 0 ? e = t.config.markers.hover.size : e += t.config.markers.hover.sizeOffset), t.globals.markers.largestSize = e, e;\n            }\n        },\n        {\n            key: \"getSeriesTotals\",\n            value: function() {\n                var t = this.w;\n                t.globals.seriesTotals = t.globals.series.map(function(t, e) {\n                    var i = 0;\n                    if (Array.isArray(t)) for(var a = 0; a < t.length; a++)i += t[a];\n                    else i += t;\n                    return i;\n                });\n            }\n        },\n        {\n            key: \"getSeriesTotalsXRange\",\n            value: function(t, e) {\n                var i = this.w;\n                return i.globals.series.map(function(a, s) {\n                    for(var r = 0, n = 0; n < a.length; n++)i.globals.seriesX[s][n] > t && i.globals.seriesX[s][n] < e && (r += a[n]);\n                    return r;\n                });\n            }\n        },\n        {\n            key: \"getPercentSeries\",\n            value: function() {\n                var t = this.w;\n                t.globals.seriesPercent = t.globals.series.map(function(e, i) {\n                    var a = [];\n                    if (Array.isArray(e)) for(var s = 0; s < e.length; s++){\n                        var r = t.globals.stackedSeriesTotals[s], n = 0;\n                        r && (n = 100 * e[s] / r), a.push(n);\n                    }\n                    else {\n                        var o = 100 * e / t.globals.seriesTotals.reduce(function(t, e) {\n                            return t + e;\n                        }, 0);\n                        a.push(o);\n                    }\n                    return a;\n                });\n            }\n        },\n        {\n            key: \"getCalculatedRatios\",\n            value: function() {\n                var t, e, i, a = this, s = this.w, r = s.globals, n = [], o = 0, l = [], h = .1, c = 0;\n                if (r.yRange = [], r.isMultipleYAxis) for(var d = 0; d < r.minYArr.length; d++)r.yRange.push(Math.abs(r.minYArr[d] - r.maxYArr[d])), l.push(0);\n                else r.yRange.push(Math.abs(r.minY - r.maxY));\n                r.xRange = Math.abs(r.maxX - r.minX), r.zRange = Math.abs(r.maxZ - r.minZ);\n                for(var u = 0; u < r.yRange.length; u++)n.push(r.yRange[u] / r.gridHeight);\n                if (e = r.xRange / r.gridWidth, t = r.yRange / r.gridWidth, i = r.xRange / r.gridHeight, (o = r.zRange / r.gridHeight * 16) || (o = 1), r.minY !== Number.MIN_VALUE && 0 !== Math.abs(r.minY) && (r.hasNegs = !0), s.globals.seriesYAxisReverseMap.length > 0) {\n                    var g = function(t, e) {\n                        var i = s.config.yaxis[s.globals.seriesYAxisReverseMap[e]], r = t < 0 ? -1 : 1;\n                        return t = Math.abs(t), i.logarithmic && (t = a.getBaseLog(i.logBase, t)), -r * t / n[e];\n                    };\n                    if (r.isMultipleYAxis) {\n                        l = [];\n                        for(var p = 0; p < n.length; p++)l.push(g(r.minYArr[p], p));\n                    } else (l = []).push(g(r.minY, 0)), r.minY !== Number.MIN_VALUE && 0 !== Math.abs(r.minY) && (h = -r.minY / t, c = r.minX / e);\n                } else (l = []).push(0), h = 0, c = 0;\n                return {\n                    yRatio: n,\n                    invertedYRatio: t,\n                    zRatio: o,\n                    xRatio: e,\n                    invertedXRatio: i,\n                    baseLineInvertedY: h,\n                    baseLineY: l,\n                    baseLineX: c\n                };\n            }\n        },\n        {\n            key: \"getLogSeries\",\n            value: function(t) {\n                var e = this, i = this.w;\n                return i.globals.seriesLog = t.map(function(t, a) {\n                    var s = i.globals.seriesYAxisReverseMap[a];\n                    return i.config.yaxis[s] && i.config.yaxis[s].logarithmic ? t.map(function(t) {\n                        return null === t ? null : e.getLogVal(i.config.yaxis[s].logBase, t, a);\n                    }) : t;\n                }), i.globals.invalidLogScale ? t : i.globals.seriesLog;\n            }\n        },\n        {\n            key: \"getLogValAtSeriesIndex\",\n            value: function(t, e) {\n                if (null === t) return null;\n                var i = this.w, a = i.globals.seriesYAxisReverseMap[e];\n                return i.config.yaxis[a] && i.config.yaxis[a].logarithmic ? this.getLogVal(i.config.yaxis[a].logBase, t, e) : t;\n            }\n        },\n        {\n            key: \"getBaseLog\",\n            value: function(t, e) {\n                return Math.log(e) / Math.log(t);\n            }\n        },\n        {\n            key: \"getLogVal\",\n            value: function(t, e, i) {\n                if (e <= 0) return 0;\n                var a = this.w, s = 0 === a.globals.minYArr[i] ? -1 : this.getBaseLog(t, a.globals.minYArr[i]), r = (0 === a.globals.maxYArr[i] ? 0 : this.getBaseLog(t, a.globals.maxYArr[i])) - s;\n                return e < 1 ? e / r : (this.getBaseLog(t, e) - s) / r;\n            }\n        },\n        {\n            key: \"getLogYRatios\",\n            value: function(t) {\n                var e = this, i = this.w, a = this.w.globals;\n                return a.yLogRatio = t.slice(), a.logYRange = a.yRange.map(function(t, s) {\n                    var r = i.globals.seriesYAxisReverseMap[s];\n                    if (i.config.yaxis[r] && e.w.config.yaxis[r].logarithmic) {\n                        var n, o = -Number.MAX_VALUE, l = Number.MIN_VALUE;\n                        return a.seriesLog.forEach(function(t, e) {\n                            t.forEach(function(t) {\n                                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (o = Math.max(t, o), l = Math.min(t, l));\n                            });\n                        }), n = Math.pow(a.yRange[s], Math.abs(l - o) / a.yRange[s]), a.yLogRatio[s] = n / a.gridHeight, n;\n                    }\n                }), a.invalidLogScale ? t.slice() : a.yLogRatio;\n            }\n        },\n        {\n            key: \"drawSeriesByGroup\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = [];\n                return t.series.length > 0 && e.forEach(function(e) {\n                    var n = [], o = [];\n                    t.i.forEach(function(i, a) {\n                        s.config.series[i].group === e && (n.push(t.series[a]), o.push(i));\n                    }), n.length > 0 && r.push(a.draw(n, i, o));\n                }), r;\n            }\n        }\n    ], [\n        {\n            key: \"checkComboSeries\",\n            value: function(t, e) {\n                var i = !1, a = 0, s = 0;\n                return void 0 === e && (e = \"line\"), t.length && void 0 !== t[0].type && t.forEach(function(t) {\n                    \"bar\" !== t.type && \"column\" !== t.type && \"candlestick\" !== t.type && \"boxPlot\" !== t.type || a++, void 0 !== t.type && t.type !== e && s++;\n                }), s > 0 && (i = !0), {\n                    comboBarCount: a,\n                    comboCharts: i\n                };\n            }\n        },\n        {\n            key: \"extendArrayProps\",\n            value: function(t, e, i) {\n                var a, s, r, n, o, l;\n                (null !== (a = e) && void 0 !== a && a.yaxis && (e = t.extendYAxis(e, i)), null !== (s = e) && void 0 !== s && s.annotations) && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), null !== (r = e) && void 0 !== r && null !== (n = r.annotations) && void 0 !== n && n.xaxis && (e = t.extendXAxisAnnotations(e)), null !== (o = e) && void 0 !== o && null !== (l = o.annotations) && void 0 !== l && l.points && (e = t.extendPointAnnotations(e)));\n                return e;\n            }\n        }\n    ]), t;\n}(), Ii = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.annoCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"setOrientations\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = this.w;\n                if (\"vertical\" === t.label.orientation) {\n                    var a = null !== e ? e : 0, s = i.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(a, \"']\"));\n                    if (null !== s) {\n                        var r = s.getBoundingClientRect();\n                        s.setAttribute(\"x\", parseFloat(s.getAttribute(\"x\")) - r.height + 4);\n                        var n = \"top\" === t.label.position ? r.width : -r.width;\n                        s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) + n);\n                        var o = this.annoCtx.graphics.rotateAroundCenter(s), l = o.x, h = o.y;\n                        s.setAttribute(\"transform\", \"rotate(-90 \".concat(l, \" \").concat(h, \")\"));\n                    }\n                }\n            }\n        },\n        {\n            key: \"addBackgroundToAnno\",\n            value: function(t, e) {\n                var i = this.w;\n                if (!t || !e.label.text || !String(e.label.text).trim()) return null;\n                var a = i.globals.dom.baseEl.querySelector(\".apexcharts-grid\").getBoundingClientRect(), s = t.getBoundingClientRect(), r = e.label.style.padding, n = r.left, o = r.right, l = r.top, h = r.bottom;\n                if (\"vertical\" === e.label.orientation) {\n                    var c = [\n                        n,\n                        o,\n                        l,\n                        h\n                    ];\n                    l = c[0], h = c[1], n = c[2], o = c[3];\n                }\n                var d = s.left - a.left - n, u = s.top - a.top - l, g = this.annoCtx.graphics.drawRect(d - i.globals.barPadForNumericAxis, u, s.width + n + o, s.height + l + h, e.label.borderRadius, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);\n                return e.id && g.node.classList.add(e.id), g;\n            }\n        },\n        {\n            key: \"annotationsBackground\",\n            value: function() {\n                var t = this, e = this.w, i = function(i, a, s) {\n                    var r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(a, \"']\"));\n                    if (r) {\n                        var n = r.parentNode, o = t.addBackgroundToAnno(r, i);\n                        o && (n.insertBefore(o.node, r), i.label.mouseEnter && o.node.addEventListener(\"mouseenter\", i.label.mouseEnter.bind(t, i)), i.label.mouseLeave && o.node.addEventListener(\"mouseleave\", i.label.mouseLeave.bind(t, i)), i.label.click && o.node.addEventListener(\"click\", i.label.click.bind(t, i)));\n                    }\n                };\n                e.config.annotations.xaxis.forEach(function(t, e) {\n                    return i(t, e, \"xaxis\");\n                }), e.config.annotations.yaxis.forEach(function(t, e) {\n                    return i(t, e, \"yaxis\");\n                }), e.config.annotations.points.forEach(function(t, e) {\n                    return i(t, e, \"point\");\n                });\n            }\n        },\n        {\n            key: \"getY1Y2\",\n            value: function(t, e) {\n                var i, a = this.w, s = \"y1\" === t ? e.y : e.y2, r = !1;\n                if (this.annoCtx.invertAxis) {\n                    var n = a.config.xaxis.convertedCatToNumeric ? a.globals.categoryLabels : a.globals.labels, o = n.indexOf(s), l = a.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\".concat(o + 1, \")\"));\n                    i = l ? parseFloat(l.getAttribute(\"y\")) : (a.globals.gridHeight / n.length - 1) * (o + 1) - a.globals.barHeight, void 0 !== e.seriesIndex && a.globals.barHeight && (i -= a.globals.barHeight / 2 * (a.globals.series.length - 1) - a.globals.barHeight * e.seriesIndex);\n                } else {\n                    var h, c = a.globals.seriesYAxisMap[e.yAxisIndex][0], d = a.config.yaxis[e.yAxisIndex].logarithmic ? new Pi(this.annoCtx.ctx).getLogVal(a.config.yaxis[e.yAxisIndex].logBase, s, c) / a.globals.yLogRatio[c] : (s - a.globals.minYArr[c]) / (a.globals.yRange[c] / a.globals.gridHeight);\n                    i = a.globals.gridHeight - Math.min(Math.max(d, 0), a.globals.gridHeight), r = d > a.globals.gridHeight || d < 0, !e.marker || void 0 !== e.y && null !== e.y || (i = 0), null !== (h = a.config.yaxis[e.yAxisIndex]) && void 0 !== h && h.reversed && (i = d);\n                }\n                return \"string\" == typeof s && s.includes(\"px\") && (i = parseFloat(s)), {\n                    yP: i,\n                    clipped: r\n                };\n            }\n        },\n        {\n            key: \"getX1X2\",\n            value: function(t, e) {\n                var i = this.w, a = \"x1\" === t ? e.x : e.x2, s = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX, r = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX, n = this.annoCtx.invertAxis ? i.globals.yRange[0] : i.globals.xRange, o = !1, l = this.annoCtx.inversedReversedAxis ? (r - a) / (n / i.globals.gridWidth) : (a - s) / (n / i.globals.gridWidth);\n                return \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || i.config.chart.sparkline.enabled || (l = this.getStringX(a)), \"string\" == typeof a && a.includes(\"px\") && (l = parseFloat(a)), null == a && e.marker && (l = i.globals.gridWidth), void 0 !== e.seriesIndex && i.globals.barWidth && !this.annoCtx.invertAxis && (l -= i.globals.barWidth / 2 * (i.globals.series.length - 1) - i.globals.barWidth * e.seriesIndex), \"number\" != typeof l && (l = 0, o = !0), parseFloat(l.toFixed(10)) > parseFloat(i.globals.gridWidth.toFixed(10)) ? (l = i.globals.gridWidth, o = !0) : l < 0 && (l = 0, o = !0), {\n                    x: l,\n                    clipped: o\n                };\n            }\n        },\n        {\n            key: \"getStringX\",\n            value: function(t) {\n                var e = this.w, i = t;\n                e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);\n                var a = e.globals.labels.map(function(t) {\n                    return Array.isArray(t) ? t.join(\" \") : t;\n                }).indexOf(t), s = e.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\".concat(a + 1, \")\"));\n                return s && (i = parseFloat(s.getAttribute(\"x\"))), i;\n            }\n        }\n    ]), t;\n}(), Ti = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.annoCtx = e, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new Ii(this.annoCtx);\n    }\n    return s(t, [\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t, e, i) {\n                var a, s = this.w, r = this.helpers.getX1X2(\"x1\", t), n = r.x, o = r.clipped, l = !0, h = t.label.text, c = t.strokeDashArray;\n                if (v.isNumber(n)) {\n                    if (null === t.x2 || void 0 === t.x2) {\n                        if (!o) {\n                            var d = this.annoCtx.graphics.drawLine(n + t.offsetX, 0 + t.offsetY, n + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, c, t.borderWidth);\n                            e.appendChild(d.node), t.id && d.node.classList.add(t.id);\n                        }\n                    } else {\n                        var u = this.helpers.getX1X2(\"x2\", t);\n                        if (a = u.x, l = u.clipped, a < n) {\n                            var g = n;\n                            n = a, a = g;\n                        }\n                        var p = this.annoCtx.graphics.drawRect(n + t.offsetX, 0 + t.offsetY, a - n, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, c);\n                        p.node.classList.add(\"apexcharts-annotation-rect\"), p.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(p.node), t.id && p.node.classList.add(t.id);\n                    }\n                    if (!o || !l) {\n                        var f = this.annoCtx.graphics.getTextRects(h, parseFloat(t.label.style.fontSize)), x = \"top\" === t.label.position ? 4 : \"center\" === t.label.position ? s.globals.gridHeight / 2 + (\"vertical\" === t.label.orientation ? f.width / 2 : 0) : s.globals.gridHeight, b = this.annoCtx.graphics.drawText({\n                            x: n + t.label.offsetX,\n                            y: x + t.label.offsetY - (\"vertical\" === t.label.orientation ? \"top\" === t.label.position ? f.width / 2 - 12 : -f.width / 2 : 0),\n                            text: h,\n                            textAnchor: t.label.textAnchor,\n                            fontSize: t.label.style.fontSize,\n                            fontFamily: t.label.style.fontFamily,\n                            fontWeight: t.label.style.fontWeight,\n                            foreColor: t.label.style.color,\n                            cssClass: \"apexcharts-xaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                        });\n                        b.attr({\n                            rel: i\n                        }), e.appendChild(b.node), this.annoCtx.helpers.setOrientations(t, i);\n                    }\n                }\n            }\n        },\n        {\n            key: \"drawXAxisAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-xaxis-annotations\"\n                });\n                return e.config.annotations.xaxis.map(function(e, a) {\n                    t.addXaxisAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}(), zi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.months31 = [\n            1,\n            3,\n            5,\n            7,\n            8,\n            10,\n            12\n        ], this.months30 = [\n            2,\n            4,\n            6,\n            9,\n            11\n        ], this.daysCntOfYear = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334\n        ];\n    }\n    return s(t, [\n        {\n            key: \"isValidDate\",\n            value: function(t) {\n                return \"number\" != typeof t && !isNaN(this.parseDate(t));\n            }\n        },\n        {\n            key: \"getTimeStamp\",\n            value: function(t) {\n                return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t;\n            }\n        },\n        {\n            key: \"getDate\",\n            value: function(t) {\n                return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);\n            }\n        },\n        {\n            key: \"parseDate\",\n            value: function(t) {\n                var e = Date.parse(t);\n                if (!isNaN(e)) return this.getTimeStamp(t);\n                var i = Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n                return i = this.getTimeStamp(i);\n            }\n        },\n        {\n            key: \"parseDateWithTimezone\",\n            value: function(t) {\n                return Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n            }\n        },\n        {\n            key: \"formatDate\",\n            value: function(t, e) {\n                var i = this.w.globals.locale, a = this.w.config.xaxis.labels.datetimeUTC, s = [\n                    \"\\0\"\n                ].concat(f(i.months)), r = [\n                    \"\\x01\"\n                ].concat(f(i.shortMonths)), n = [\n                    \"\\x02\"\n                ].concat(f(i.days)), o = [\n                    \"\\x03\"\n                ].concat(f(i.shortDays));\n                function l(t, e) {\n                    var i = t + \"\";\n                    for(e = e || 2; i.length < e;)i = \"0\" + i;\n                    return i;\n                }\n                var h = a ? t.getUTCFullYear() : t.getFullYear();\n                e = (e = (e = e.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + h)).replace(/(^|[^\\\\])yy/g, \"$1\" + h.toString().substr(2, 2))).replace(/(^|[^\\\\])y/g, \"$1\" + h);\n                var c = (a ? t.getUTCMonth() : t.getMonth()) + 1;\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + s[0])).replace(/(^|[^\\\\])MMM/g, \"$1\" + r[0])).replace(/(^|[^\\\\])MM/g, \"$1\" + l(c))).replace(/(^|[^\\\\])M/g, \"$1\" + c);\n                var d = a ? t.getUTCDate() : t.getDate();\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])dddd+/g, \"$1\" + n[0])).replace(/(^|[^\\\\])ddd/g, \"$1\" + o[0])).replace(/(^|[^\\\\])dd/g, \"$1\" + l(d))).replace(/(^|[^\\\\])d/g, \"$1\" + d);\n                var u = a ? t.getUTCHours() : t.getHours(), g = u > 12 ? u - 12 : 0 === u ? 12 : u;\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])HH+/g, \"$1\" + l(u))).replace(/(^|[^\\\\])H/g, \"$1\" + u)).replace(/(^|[^\\\\])hh+/g, \"$1\" + l(g))).replace(/(^|[^\\\\])h/g, \"$1\" + g);\n                var p = a ? t.getUTCMinutes() : t.getMinutes();\n                e = (e = e.replace(/(^|[^\\\\])mm+/g, \"$1\" + l(p))).replace(/(^|[^\\\\])m/g, \"$1\" + p);\n                var x = a ? t.getUTCSeconds() : t.getSeconds();\n                e = (e = e.replace(/(^|[^\\\\])ss+/g, \"$1\" + l(x))).replace(/(^|[^\\\\])s/g, \"$1\" + x);\n                var b = a ? t.getUTCMilliseconds() : t.getMilliseconds();\n                e = e.replace(/(^|[^\\\\])fff+/g, \"$1\" + l(b, 3)), b = Math.round(b / 10), e = e.replace(/(^|[^\\\\])ff/g, \"$1\" + l(b)), b = Math.round(b / 10);\n                var m = u < 12 ? \"AM\" : \"PM\";\n                e = (e = (e = e.replace(/(^|[^\\\\])f/g, \"$1\" + b)).replace(/(^|[^\\\\])TT+/g, \"$1\" + m)).replace(/(^|[^\\\\])T/g, \"$1\" + m.charAt(0));\n                var v = m.toLowerCase();\n                e = (e = e.replace(/(^|[^\\\\])tt+/g, \"$1\" + v)).replace(/(^|[^\\\\])t/g, \"$1\" + v.charAt(0));\n                var y = -t.getTimezoneOffset(), w = a || !y ? \"Z\" : y > 0 ? \"+\" : \"-\";\n                if (!a) {\n                    var k = (y = Math.abs(y)) % 60;\n                    w += l(Math.floor(y / 60)) + \":\" + l(k);\n                }\n                e = e.replace(/(^|[^\\\\])K/g, \"$1\" + w);\n                var A = (a ? t.getUTCDay() : t.getDay()) + 1;\n                return e = (e = (e = (e = (e = e.replace(new RegExp(n[0], \"g\"), n[A])).replace(new RegExp(o[0], \"g\"), o[A])).replace(new RegExp(s[0], \"g\"), s[c])).replace(new RegExp(r[0], \"g\"), r[c])).replace(/\\\\(.)/g, \"$1\");\n            }\n        },\n        {\n            key: \"getTimeUnitsfromTimestamp\",\n            value: function(t, e, i) {\n                var a = this.w;\n                void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);\n                var s = this.getDate(t), r = this.getDate(e), n = this.formatDate(s, \"yyyy MM dd HH mm ss fff\").split(\" \"), o = this.formatDate(r, \"yyyy MM dd HH mm ss fff\").split(\" \");\n                return {\n                    minMillisecond: parseInt(n[6], 10),\n                    maxMillisecond: parseInt(o[6], 10),\n                    minSecond: parseInt(n[5], 10),\n                    maxSecond: parseInt(o[5], 10),\n                    minMinute: parseInt(n[4], 10),\n                    maxMinute: parseInt(o[4], 10),\n                    minHour: parseInt(n[3], 10),\n                    maxHour: parseInt(o[3], 10),\n                    minDate: parseInt(n[2], 10),\n                    maxDate: parseInt(o[2], 10),\n                    minMonth: parseInt(n[1], 10) - 1,\n                    maxMonth: parseInt(o[1], 10) - 1,\n                    minYear: parseInt(n[0], 10),\n                    maxYear: parseInt(o[0], 10)\n                };\n            }\n        },\n        {\n            key: \"isLeapYear\",\n            value: function(t) {\n                return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;\n            }\n        },\n        {\n            key: \"calculcateLastDaysOfMonth\",\n            value: function(t, e, i) {\n                return this.determineDaysOfMonths(t, e) - i;\n            }\n        },\n        {\n            key: \"determineDaysOfYear\",\n            value: function(t) {\n                var e = 365;\n                return this.isLeapYear(t) && (e = 366), e;\n            }\n        },\n        {\n            key: \"determineRemainingDaysOfYear\",\n            value: function(t, e, i) {\n                var a = this.daysCntOfYear[e] + i;\n                return e > 1 && this.isLeapYear() && a++, a;\n            }\n        },\n        {\n            key: \"determineDaysOfMonths\",\n            value: function(t, e) {\n                var i = 30;\n                switch(t = v.monthMod(t), !0){\n                    case this.months30.indexOf(t) > -1:\n                        2 === t && (i = this.isLeapYear(e) ? 29 : 28);\n                        break;\n                    case this.months31.indexOf(t) > -1:\n                    default:\n                        i = 31;\n                }\n                return i;\n            }\n        }\n    ]), t;\n}(), Xi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.tooltipKeyFormat = \"dd MMM\";\n    }\n    return s(t, [\n        {\n            key: \"xLabelFormat\",\n            value: function(t, e, i, a) {\n                var s = this.w;\n                if (\"datetime\" === s.config.xaxis.type && void 0 === s.config.xaxis.labels.formatter && void 0 === s.config.tooltip.x.formatter) {\n                    var r = new zi(this.ctx);\n                    return r.formatDate(r.getDate(e), s.config.tooltip.x.format);\n                }\n                return t(e, i, a);\n            }\n        },\n        {\n            key: \"defaultGeneralFormatter\",\n            value: function(t) {\n                return Array.isArray(t) ? t.map(function(t) {\n                    return t;\n                }) : t;\n            }\n        },\n        {\n            key: \"defaultYFormatter\",\n            value: function(t, e, i) {\n                var a = this.w;\n                if (v.isNumber(t)) if (0 !== a.globals.yValueDecimal) t = t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal);\n                else {\n                    var s = t.toFixed(0);\n                    t = t == s ? s : t.toFixed(1);\n                }\n                return t;\n            }\n        },\n        {\n            key: \"setLabelFormatters\",\n            value: function() {\n                var t = this, e = this.w;\n                return e.globals.xaxisTooltipFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, e.globals.ttKeyFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, e.globals.ttZFormatter = function(t) {\n                    return t;\n                }, e.globals.legendFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function(t) {\n                    if (v.isNumber(t)) {\n                        if (!e.config.xaxis.convertedCatToNumeric && \"numeric\" === e.config.xaxis.type) {\n                            if (v.isNumber(e.config.xaxis.decimalsInFloat)) return t.toFixed(e.config.xaxis.decimalsInFloat);\n                            var i = e.globals.maxX - e.globals.minX;\n                            return i > 0 && i < 100 ? t.toFixed(1) : t.toFixed(0);\n                        }\n                        if (e.globals.isBarHorizontal) {\n                            if (e.globals.maxY - e.globals.minYArr < 4) return t.toFixed(1);\n                        }\n                        return t.toFixed(0);\n                    }\n                    return t;\n                }, \"function\" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, \"function\" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach(function(i, a) {\n                    void 0 !== i.labels.formatter ? e.globals.yLabelFormatters[a] = i.labels.formatter : e.globals.yLabelFormatters[a] = function(s) {\n                        return e.globals.xyCharts ? Array.isArray(s) ? s.map(function(e) {\n                            return t.defaultYFormatter(e, i, a);\n                        }) : t.defaultYFormatter(s, i, a) : s;\n                    };\n                }), e.globals;\n            }\n        },\n        {\n            key: \"heatmapLabelFormatters\",\n            value: function() {\n                var t = this.w;\n                if (\"heatmap\" === t.config.chart.type) {\n                    t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();\n                    var e = t.globals.seriesNames.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    }, 0);\n                    t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;\n                }\n            }\n        }\n    ]), t;\n}(), Ri = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"getLabel\",\n            value: function(t, e, i, a) {\n                var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"12px\", n = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], o = this.w, l = void 0 === t[a] ? \"\" : t[a], h = l, c = o.globals.xLabelFormatter, d = o.config.xaxis.labels.formatter, u = !1, g = new Xi(this.ctx), p = l;\n                n && (h = g.xLabelFormat(c, l, p, {\n                    i: a,\n                    dateFormatter: new zi(this.ctx).formatDate,\n                    w: o\n                }), void 0 !== d && (h = d(l, t[a], {\n                    i: a,\n                    dateFormatter: new zi(this.ctx).formatDate,\n                    w: o\n                })));\n                var f, x;\n                e.length > 0 ? (f = e[a].unit, x = null, e.forEach(function(t) {\n                    \"month\" === t.unit ? x = \"year\" : \"day\" === t.unit ? x = \"month\" : \"hour\" === t.unit ? x = \"day\" : \"minute\" === t.unit && (x = \"hour\");\n                }), u = x === f, i = e[a].position, h = e[a].value) : \"datetime\" === o.config.xaxis.type && void 0 === d && (h = \"\"), void 0 === h && (h = \"\"), h = Array.isArray(h) ? h : h.toString();\n                var b = new Mi(this.ctx), m = {};\n                m = o.globals.rotateXLabels && n ? b.getTextRects(h, parseInt(r, 10), null, \"rotate(\".concat(o.config.xaxis.labels.rotate, \" 0 0)\"), !1) : b.getTextRects(h, parseInt(r, 10));\n                var v = !o.config.xaxis.labels.showDuplicates && this.ctx.timeScale;\n                return !Array.isArray(h) && (\"NaN\" === String(h) || s.indexOf(h) >= 0 && v) && (h = \"\"), {\n                    x: i,\n                    text: h,\n                    textRect: m,\n                    isBold: u\n                };\n            }\n        },\n        {\n            key: \"checkLabelBasedOnTickamount\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.config.xaxis.tickAmount;\n                return \"dataPoints\" === s && (s = Math.round(a.globals.gridWidth / 120)), s > i || t % Math.round(i / (s + 1)) == 0 || (e.text = \"\"), e;\n            }\n        },\n        {\n            key: \"checkForOverflowingLabels\",\n            value: function(t, e, i, a, s) {\n                var r = this.w;\n                if (0 === t && r.globals.skipFirstTimelinelabel && (e.text = \"\"), t === i - 1 && r.globals.skipLastTimelinelabel && (e.text = \"\"), r.config.xaxis.labels.hideOverlappingLabels && a.length > 0) {\n                    var n = s[s.length - 1];\n                    e.x < n.textRect.width / (r.globals.rotateXLabels ? Math.abs(r.config.xaxis.labels.rotate) / 12 : 1.01) + n.x && (e.text = \"\");\n                }\n                return e;\n            }\n        },\n        {\n            key: \"checkForReversedLabels\",\n            value: function(t, e) {\n                var i = this.w;\n                return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;\n            }\n        },\n        {\n            key: \"yAxisAllSeriesCollapsed\",\n            value: function(t) {\n                var e = this.w.globals;\n                return !e.seriesYAxisMap[t].some(function(t) {\n                    return -1 === e.collapsedSeriesIndices.indexOf(t);\n                });\n            }\n        },\n        {\n            key: \"translateYAxisIndex\",\n            value: function(t) {\n                var e = this.w, i = e.globals, a = e.config.yaxis;\n                return i.series.length > a.length || a.some(function(t) {\n                    return Array.isArray(t.seriesName);\n                }) ? t : i.seriesYAxisReverseMap[t];\n            }\n        },\n        {\n            key: \"isYAxisHidden\",\n            value: function(t) {\n                var e = this.w, i = e.config.yaxis[t];\n                if (!i.show || this.yAxisAllSeriesCollapsed(t)) return !0;\n                if (!i.showForNullSeries) {\n                    var a = e.globals.seriesYAxisMap[t], s = new Pi(this.ctx);\n                    return a.every(function(t) {\n                        return s.isSeriesNull(t);\n                    });\n                }\n                return !1;\n            }\n        },\n        {\n            key: \"getYAxisForeColor\",\n            value: function(t, e) {\n                var i = this.w;\n                return Array.isArray(t) && i.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, i.globals.yAxisScale[e].result.length, !1), t;\n            }\n        },\n        {\n            key: \"drawYAxisTicks\",\n            value: function(t, e, i, a, s, r, n) {\n                var o = this.w, l = new Mi(this.ctx), h = o.globals.translateY + o.config.yaxis[s].labels.offsetY;\n                if (o.globals.isBarHorizontal ? h = 0 : \"heatmap\" === o.config.chart.type && (h += r / 2), a.show && e > 0) {\n                    !0 === o.config.yaxis[s].opposite && (t += a.width);\n                    for(var c = e; c >= 0; c--){\n                        var d = l.drawLine(t + i.offsetX - a.width + a.offsetX, h + a.offsetY, t + i.offsetX + a.offsetX, h + a.offsetY, a.color);\n                        n.add(d), h += r;\n                    }\n                }\n            }\n        }\n    ]), t;\n}(), Ei = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new Ii(this.annoCtx), this.axesUtils = new Ri(this.annoCtx);\n    }\n    return s(t, [\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t, e, i) {\n                var a, s = this.w, r = t.strokeDashArray, n = this.helpers.getY1Y2(\"y1\", t), o = n.yP, l = n.clipped, h = !0, c = !1, d = t.label.text;\n                if (null === t.y2 || void 0 === t.y2) {\n                    if (!l) {\n                        c = !0;\n                        var u = this.annoCtx.graphics.drawLine(0 + t.offsetX, o + t.offsetY, this._getYAxisAnnotationWidth(t), o + t.offsetY, t.borderColor, r, t.borderWidth);\n                        e.appendChild(u.node), t.id && u.node.classList.add(t.id);\n                    }\n                } else {\n                    if (a = (n = this.helpers.getY1Y2(\"y2\", t)).yP, h = n.clipped, a > o) {\n                        var g = o;\n                        o = a, a = g;\n                    }\n                    if (!l || !h) {\n                        c = !0;\n                        var p = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, this._getYAxisAnnotationWidth(t), o - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);\n                        p.node.classList.add(\"apexcharts-annotation-rect\"), p.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(p.node), t.id && p.node.classList.add(t.id);\n                    }\n                }\n                if (c) {\n                    var f = \"right\" === t.label.position ? s.globals.gridWidth : \"center\" === t.label.position ? s.globals.gridWidth / 2 : 0, x = this.annoCtx.graphics.drawText({\n                        x: f + t.label.offsetX,\n                        y: (null != a ? a : o) + t.label.offsetY - 3,\n                        text: d,\n                        textAnchor: t.label.textAnchor,\n                        fontSize: t.label.style.fontSize,\n                        fontFamily: t.label.style.fontFamily,\n                        fontWeight: t.label.style.fontWeight,\n                        foreColor: t.label.style.color,\n                        cssClass: \"apexcharts-yaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                    });\n                    x.attr({\n                        rel: i\n                    }), e.appendChild(x.node);\n                }\n            }\n        },\n        {\n            key: \"_getYAxisAnnotationWidth\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.gridWidth;\n                return (t.width.indexOf(\"%\") > -1 ? e.globals.gridWidth * parseInt(t.width, 10) / 100 : parseInt(t.width, 10)) + t.offsetX;\n            }\n        },\n        {\n            key: \"drawYAxisAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-yaxis-annotations\"\n                });\n                return e.config.annotations.yaxis.forEach(function(e, a) {\n                    e.yAxisIndex = t.axesUtils.translateYAxisIndex(e.yAxisIndex), t.axesUtils.isYAxisHidden(e.yAxisIndex) && t.axesUtils.yAxisAllSeriesCollapsed(e.yAxisIndex) || t.addYaxisAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}(), Yi = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new Ii(this.annoCtx);\n    }\n    return s(t, [\n        {\n            key: \"addPointAnnotation\",\n            value: function(t, e, i) {\n                if (!(this.w.globals.collapsedSeriesIndices.indexOf(t.seriesIndex) > -1)) {\n                    var a = this.helpers.getX1X2(\"x1\", t), s = a.x, r = a.clipped, n = (a = this.helpers.getY1Y2(\"y1\", t)).yP, o = a.clipped;\n                    if (v.isNumber(s) && !o && !r) {\n                        var l = {\n                            pSize: t.marker.size,\n                            pointStrokeWidth: t.marker.strokeWidth,\n                            pointFillColor: t.marker.fillColor,\n                            pointStrokeColor: t.marker.strokeColor,\n                            shape: t.marker.shape,\n                            pRadius: t.marker.radius,\n                            class: \"apexcharts-point-annotation-marker \".concat(t.marker.cssClass, \" \").concat(t.id ? t.id : \"\")\n                        }, h = this.annoCtx.graphics.drawMarker(s + t.marker.offsetX, n + t.marker.offsetY, l);\n                        e.appendChild(h.node);\n                        var c = t.label.text ? t.label.text : \"\", d = this.annoCtx.graphics.drawText({\n                            x: s + t.label.offsetX,\n                            y: n + t.label.offsetY - t.marker.size - parseFloat(t.label.style.fontSize) / 1.6,\n                            text: c,\n                            textAnchor: t.label.textAnchor,\n                            fontSize: t.label.style.fontSize,\n                            fontFamily: t.label.style.fontFamily,\n                            fontWeight: t.label.style.fontWeight,\n                            foreColor: t.label.style.color,\n                            cssClass: \"apexcharts-point-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                        });\n                        if (d.attr({\n                            rel: i\n                        }), e.appendChild(d.node), t.customSVG.SVG) {\n                            var u = this.annoCtx.graphics.group({\n                                class: \"apexcharts-point-annotations-custom-svg \" + t.customSVG.cssClass\n                            });\n                            u.attr({\n                                transform: \"translate(\".concat(s + t.customSVG.offsetX, \", \").concat(n + t.customSVG.offsetY, \")\")\n                            }), u.node.innerHTML = t.customSVG.SVG, e.appendChild(u.node);\n                        }\n                        if (t.image.path) {\n                            var g = t.image.width ? t.image.width : 20, p = t.image.height ? t.image.height : 20;\n                            h = this.annoCtx.addImage({\n                                x: s + t.image.offsetX - g / 2,\n                                y: n + t.image.offsetY - p / 2,\n                                width: g,\n                                height: p,\n                                path: t.image.path,\n                                appendTo: \".apexcharts-point-annotations\"\n                            });\n                        }\n                        t.mouseEnter && h.node.addEventListener(\"mouseenter\", t.mouseEnter.bind(this, t)), t.mouseLeave && h.node.addEventListener(\"mouseleave\", t.mouseLeave.bind(this, t)), t.click && h.node.addEventListener(\"click\", t.click.bind(this, t));\n                    }\n                }\n            }\n        },\n        {\n            key: \"drawPointAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-point-annotations\"\n                });\n                return e.config.annotations.points.map(function(e, a) {\n                    t.addPointAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}();\nvar Hi = {\n    name: \"en\",\n    options: {\n        months: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ],\n        shortMonths: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ],\n        days: [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ],\n        shortDays: [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\"\n        ],\n        toolbar: {\n            exportToSVG: \"Download SVG\",\n            exportToPNG: \"Download PNG\",\n            exportToCSV: \"Download CSV\",\n            menu: \"Menu\",\n            selection: \"Selection\",\n            selectionZoom: \"Selection Zoom\",\n            zoomIn: \"Zoom In\",\n            zoomOut: \"Zoom Out\",\n            pan: \"Panning\",\n            reset: \"Reset Zoom\"\n        }\n    }\n}, Oi = function() {\n    function t() {\n        i(this, t), this.yAxis = {\n            show: !0,\n            showAlways: !1,\n            showForNullSeries: !0,\n            seriesName: void 0,\n            opposite: !1,\n            reversed: !1,\n            logarithmic: !1,\n            logBase: 10,\n            tickAmount: void 0,\n            stepSize: void 0,\n            forceNiceScale: !1,\n            max: void 0,\n            min: void 0,\n            floating: !1,\n            decimalsInFloat: void 0,\n            labels: {\n                show: !0,\n                showDuplicates: !1,\n                minWidth: 0,\n                maxWidth: 160,\n                offsetX: 0,\n                offsetY: 0,\n                align: void 0,\n                rotate: 0,\n                padding: 20,\n                style: {\n                    colors: [],\n                    fontSize: \"11px\",\n                    fontWeight: 400,\n                    fontFamily: void 0,\n                    cssClass: \"\"\n                },\n                formatter: void 0\n            },\n            axisBorder: {\n                show: !1,\n                color: \"#e0e0e0\",\n                width: 1,\n                offsetX: 0,\n                offsetY: 0\n            },\n            axisTicks: {\n                show: !1,\n                color: \"#e0e0e0\",\n                width: 6,\n                offsetX: 0,\n                offsetY: 0\n            },\n            title: {\n                text: void 0,\n                rotate: -90,\n                offsetY: 0,\n                offsetX: 0,\n                style: {\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontWeight: 900,\n                    fontFamily: void 0,\n                    cssClass: \"\"\n                }\n            },\n            tooltip: {\n                enabled: !1,\n                offsetX: 0\n            },\n            crosshairs: {\n                show: !0,\n                position: \"front\",\n                stroke: {\n                    color: \"#b6b6b6\",\n                    width: 1,\n                    dashArray: 0\n                }\n            }\n        }, this.pointAnnotation = {\n            id: void 0,\n            x: 0,\n            y: null,\n            yAxisIndex: 0,\n            seriesIndex: void 0,\n            mouseEnter: void 0,\n            mouseLeave: void 0,\n            click: void 0,\n            marker: {\n                size: 4,\n                fillColor: \"#fff\",\n                strokeWidth: 2,\n                strokeColor: \"#333\",\n                shape: \"circle\",\n                offsetX: 0,\n                offsetY: 0,\n                cssClass: \"\"\n            },\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"middle\",\n                offsetX: 0,\n                offsetY: 0,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            },\n            customSVG: {\n                SVG: void 0,\n                cssClass: void 0,\n                offsetX: 0,\n                offsetY: 0\n            },\n            image: {\n                path: void 0,\n                width: 20,\n                height: 20,\n                offsetX: 0,\n                offsetY: 0\n            }\n        }, this.yAxisAnnotation = {\n            id: void 0,\n            y: 0,\n            y2: null,\n            strokeDashArray: 1,\n            fillColor: \"#c2c2c2\",\n            borderColor: \"#c2c2c2\",\n            borderWidth: 1,\n            opacity: .3,\n            offsetX: 0,\n            offsetY: 0,\n            width: \"100%\",\n            yAxisIndex: 0,\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"end\",\n                position: \"right\",\n                offsetX: 0,\n                offsetY: -3,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            }\n        }, this.xAxisAnnotation = {\n            id: void 0,\n            x: 0,\n            x2: null,\n            strokeDashArray: 1,\n            fillColor: \"#c2c2c2\",\n            borderColor: \"#c2c2c2\",\n            borderWidth: 1,\n            opacity: .3,\n            offsetX: 0,\n            offsetY: 0,\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"middle\",\n                orientation: \"vertical\",\n                position: \"top\",\n                offsetX: 0,\n                offsetY: 0,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            }\n        }, this.text = {\n            x: 0,\n            y: 0,\n            text: \"\",\n            textAnchor: \"start\",\n            foreColor: void 0,\n            fontSize: \"13px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            appendTo: \".apexcharts-annotations\",\n            backgroundColor: \"transparent\",\n            borderColor: \"#c2c2c2\",\n            borderRadius: 0,\n            borderWidth: 0,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 2,\n            paddingBottom: 2\n        };\n    }\n    return s(t, [\n        {\n            key: \"init\",\n            value: function() {\n                return {\n                    annotations: {\n                        yaxis: [\n                            this.yAxisAnnotation\n                        ],\n                        xaxis: [\n                            this.xAxisAnnotation\n                        ],\n                        points: [\n                            this.pointAnnotation\n                        ],\n                        texts: [],\n                        images: [],\n                        shapes: []\n                    },\n                    chart: {\n                        animations: {\n                            enabled: !0,\n                            speed: 800,\n                            animateGradually: {\n                                delay: 150,\n                                enabled: !0\n                            },\n                            dynamicAnimation: {\n                                enabled: !0,\n                                speed: 350\n                            }\n                        },\n                        background: \"\",\n                        locales: [\n                            Hi\n                        ],\n                        defaultLocale: \"en\",\n                        dropShadow: {\n                            enabled: !1,\n                            enabledOnSeries: void 0,\n                            top: 2,\n                            left: 2,\n                            blur: 4,\n                            color: \"#000\",\n                            opacity: .7\n                        },\n                        events: {\n                            animationEnd: void 0,\n                            beforeMount: void 0,\n                            mounted: void 0,\n                            updated: void 0,\n                            click: void 0,\n                            mouseMove: void 0,\n                            mouseLeave: void 0,\n                            xAxisLabelClick: void 0,\n                            legendClick: void 0,\n                            markerClick: void 0,\n                            selection: void 0,\n                            dataPointSelection: void 0,\n                            dataPointMouseEnter: void 0,\n                            dataPointMouseLeave: void 0,\n                            beforeZoom: void 0,\n                            beforeResetZoom: void 0,\n                            zoomed: void 0,\n                            scrolled: void 0,\n                            brushScrolled: void 0\n                        },\n                        foreColor: \"#373d3f\",\n                        fontFamily: \"Helvetica, Arial, sans-serif\",\n                        height: \"auto\",\n                        parentHeightOffset: 15,\n                        redrawOnParentResize: !0,\n                        redrawOnWindowResize: !0,\n                        id: void 0,\n                        group: void 0,\n                        nonce: void 0,\n                        offsetX: 0,\n                        offsetY: 0,\n                        selection: {\n                            enabled: !1,\n                            type: \"x\",\n                            fill: {\n                                color: \"#24292e\",\n                                opacity: .1\n                            },\n                            stroke: {\n                                width: 1,\n                                color: \"#24292e\",\n                                opacity: .4,\n                                dashArray: 3\n                            },\n                            xaxis: {\n                                min: void 0,\n                                max: void 0\n                            },\n                            yaxis: {\n                                min: void 0,\n                                max: void 0\n                            }\n                        },\n                        sparkline: {\n                            enabled: !1\n                        },\n                        brush: {\n                            enabled: !1,\n                            autoScaleYaxis: !0,\n                            target: void 0,\n                            targets: void 0\n                        },\n                        stacked: !1,\n                        stackOnlyBar: !0,\n                        stackType: \"normal\",\n                        toolbar: {\n                            show: !0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            tools: {\n                                download: !0,\n                                selection: !0,\n                                zoom: !0,\n                                zoomin: !0,\n                                zoomout: !0,\n                                pan: !0,\n                                reset: !0,\n                                customIcons: []\n                            },\n                            export: {\n                                csv: {\n                                    filename: void 0,\n                                    columnDelimiter: \",\",\n                                    headerCategory: \"category\",\n                                    headerValue: \"value\",\n                                    categoryFormatter: void 0,\n                                    valueFormatter: void 0\n                                },\n                                png: {\n                                    filename: void 0\n                                },\n                                svg: {\n                                    filename: void 0\n                                },\n                                scale: void 0,\n                                width: void 0\n                            },\n                            autoSelected: \"zoom\"\n                        },\n                        type: \"line\",\n                        width: \"100%\",\n                        zoom: {\n                            enabled: !0,\n                            type: \"x\",\n                            autoScaleYaxis: !1,\n                            allowMouseWheelZoom: !0,\n                            zoomedArea: {\n                                fill: {\n                                    color: \"#90CAF9\",\n                                    opacity: .4\n                                },\n                                stroke: {\n                                    color: \"#0D47A1\",\n                                    opacity: .4,\n                                    width: 1\n                                }\n                            }\n                        }\n                    },\n                    plotOptions: {\n                        line: {\n                            isSlopeChart: !1,\n                            colors: {\n                                threshold: 0,\n                                colorAboveThreshold: void 0,\n                                colorBelowThreshold: void 0\n                            }\n                        },\n                        area: {\n                            fillTo: \"origin\"\n                        },\n                        bar: {\n                            horizontal: !1,\n                            columnWidth: \"70%\",\n                            barHeight: \"70%\",\n                            distributed: !1,\n                            borderRadius: 0,\n                            borderRadiusApplication: \"around\",\n                            borderRadiusWhenStacked: \"last\",\n                            rangeBarOverlap: !0,\n                            rangeBarGroupRows: !1,\n                            hideZeroBarsWhenGrouped: !1,\n                            isDumbbell: !1,\n                            dumbbellColors: void 0,\n                            isFunnel: !1,\n                            isFunnel3d: !0,\n                            colors: {\n                                ranges: [],\n                                backgroundBarColors: [],\n                                backgroundBarOpacity: 1,\n                                backgroundBarRadius: 0\n                            },\n                            dataLabels: {\n                                position: \"top\",\n                                maxItems: 100,\n                                hideOverflowingLabels: !0,\n                                orientation: \"horizontal\",\n                                total: {\n                                    enabled: !1,\n                                    formatter: void 0,\n                                    offsetX: 0,\n                                    offsetY: 0,\n                                    style: {\n                                        color: \"#373d3f\",\n                                        fontSize: \"12px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 600\n                                    }\n                                }\n                            }\n                        },\n                        bubble: {\n                            zScaling: !0,\n                            minBubbleRadius: void 0,\n                            maxBubbleRadius: void 0\n                        },\n                        candlestick: {\n                            colors: {\n                                upward: \"#00B746\",\n                                downward: \"#EF403C\"\n                            },\n                            wick: {\n                                useFillColor: !0\n                            }\n                        },\n                        boxPlot: {\n                            colors: {\n                                upper: \"#00E396\",\n                                lower: \"#008FFB\"\n                            }\n                        },\n                        heatmap: {\n                            radius: 2,\n                            enableShades: !0,\n                            shadeIntensity: .5,\n                            reverseNegativeShade: !1,\n                            distributed: !1,\n                            useFillColorAsStroke: !1,\n                            colorScale: {\n                                inverse: !1,\n                                ranges: [],\n                                min: void 0,\n                                max: void 0\n                            }\n                        },\n                        treemap: {\n                            enableShades: !0,\n                            shadeIntensity: .5,\n                            distributed: !1,\n                            reverseNegativeShade: !1,\n                            useFillColorAsStroke: !1,\n                            borderRadius: 4,\n                            dataLabels: {\n                                format: \"scale\"\n                            },\n                            colorScale: {\n                                inverse: !1,\n                                ranges: [],\n                                min: void 0,\n                                max: void 0\n                            },\n                            seriesTitle: {\n                                show: !0,\n                                offsetY: 1,\n                                offsetX: 1,\n                                borderColor: \"#000\",\n                                borderWidth: 1,\n                                borderRadius: 2,\n                                style: {\n                                    background: \"rgba(0, 0, 0, 0.6)\",\n                                    color: \"#fff\",\n                                    fontSize: \"12px\",\n                                    fontFamily: void 0,\n                                    fontWeight: 400,\n                                    cssClass: \"\",\n                                    padding: {\n                                        left: 6,\n                                        right: 6,\n                                        top: 2,\n                                        bottom: 2\n                                    }\n                                }\n                            }\n                        },\n                        radialBar: {\n                            inverseOrder: !1,\n                            startAngle: 0,\n                            endAngle: 360,\n                            offsetX: 0,\n                            offsetY: 0,\n                            hollow: {\n                                margin: 5,\n                                size: \"50%\",\n                                background: \"transparent\",\n                                image: void 0,\n                                imageWidth: 150,\n                                imageHeight: 150,\n                                imageOffsetX: 0,\n                                imageOffsetY: 0,\n                                imageClipped: !0,\n                                position: \"front\",\n                                dropShadow: {\n                                    enabled: !1,\n                                    top: 0,\n                                    left: 0,\n                                    blur: 3,\n                                    color: \"#000\",\n                                    opacity: .5\n                                }\n                            },\n                            track: {\n                                show: !0,\n                                startAngle: void 0,\n                                endAngle: void 0,\n                                background: \"#f2f2f2\",\n                                strokeWidth: \"97%\",\n                                opacity: 1,\n                                margin: 5,\n                                dropShadow: {\n                                    enabled: !1,\n                                    top: 0,\n                                    left: 0,\n                                    blur: 3,\n                                    color: \"#000\",\n                                    opacity: .5\n                                }\n                            },\n                            dataLabels: {\n                                show: !0,\n                                name: {\n                                    show: !0,\n                                    fontSize: \"16px\",\n                                    fontFamily: void 0,\n                                    fontWeight: 600,\n                                    color: void 0,\n                                    offsetY: 0,\n                                    formatter: function(t) {\n                                        return t;\n                                    }\n                                },\n                                value: {\n                                    show: !0,\n                                    fontSize: \"14px\",\n                                    fontFamily: void 0,\n                                    fontWeight: 400,\n                                    color: void 0,\n                                    offsetY: 16,\n                                    formatter: function(t) {\n                                        return t + \"%\";\n                                    }\n                                },\n                                total: {\n                                    show: !1,\n                                    label: \"Total\",\n                                    fontSize: \"16px\",\n                                    fontWeight: 600,\n                                    fontFamily: void 0,\n                                    color: void 0,\n                                    formatter: function(t) {\n                                        return t.globals.seriesTotals.reduce(function(t, e) {\n                                            return t + e;\n                                        }, 0) / t.globals.series.length + \"%\";\n                                    }\n                                }\n                            },\n                            barLabels: {\n                                enabled: !1,\n                                offsetX: 0,\n                                offsetY: 0,\n                                useSeriesColors: !0,\n                                fontFamily: void 0,\n                                fontWeight: 600,\n                                fontSize: \"16px\",\n                                formatter: function(t) {\n                                    return t;\n                                },\n                                onClick: void 0\n                            }\n                        },\n                        pie: {\n                            customScale: 1,\n                            offsetX: 0,\n                            offsetY: 0,\n                            startAngle: 0,\n                            endAngle: 360,\n                            expandOnClick: !0,\n                            dataLabels: {\n                                offset: 0,\n                                minAngleToShowLabel: 10\n                            },\n                            donut: {\n                                size: \"65%\",\n                                background: \"transparent\",\n                                labels: {\n                                    show: !1,\n                                    name: {\n                                        show: !0,\n                                        fontSize: \"16px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 600,\n                                        color: void 0,\n                                        offsetY: -10,\n                                        formatter: function(t) {\n                                            return t;\n                                        }\n                                    },\n                                    value: {\n                                        show: !0,\n                                        fontSize: \"20px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 400,\n                                        color: void 0,\n                                        offsetY: 10,\n                                        formatter: function(t) {\n                                            return t;\n                                        }\n                                    },\n                                    total: {\n                                        show: !1,\n                                        showAlways: !1,\n                                        label: \"Total\",\n                                        fontSize: \"16px\",\n                                        fontWeight: 400,\n                                        fontFamily: void 0,\n                                        color: void 0,\n                                        formatter: function(t) {\n                                            return t.globals.seriesTotals.reduce(function(t, e) {\n                                                return t + e;\n                                            }, 0);\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        polarArea: {\n                            rings: {\n                                strokeWidth: 1,\n                                strokeColor: \"#e8e8e8\"\n                            },\n                            spokes: {\n                                strokeWidth: 1,\n                                connectorColors: \"#e8e8e8\"\n                            }\n                        },\n                        radar: {\n                            size: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            polygons: {\n                                strokeWidth: 1,\n                                strokeColors: \"#e8e8e8\",\n                                connectorColors: \"#e8e8e8\",\n                                fill: {\n                                    colors: void 0\n                                }\n                            }\n                        }\n                    },\n                    colors: void 0,\n                    dataLabels: {\n                        enabled: !0,\n                        enabledOnSeries: void 0,\n                        formatter: function(t) {\n                            return null !== t ? t : \"\";\n                        },\n                        textAnchor: \"middle\",\n                        distributed: !1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        style: {\n                            fontSize: \"12px\",\n                            fontFamily: void 0,\n                            fontWeight: 600,\n                            colors: void 0\n                        },\n                        background: {\n                            enabled: !0,\n                            foreColor: \"#fff\",\n                            backgroundColor: void 0,\n                            borderRadius: 2,\n                            padding: 4,\n                            opacity: .9,\n                            borderWidth: 1,\n                            borderColor: \"#fff\",\n                            dropShadow: {\n                                enabled: !1,\n                                top: 1,\n                                left: 1,\n                                blur: 1,\n                                color: \"#000\",\n                                opacity: .8\n                            }\n                        },\n                        dropShadow: {\n                            enabled: !1,\n                            top: 1,\n                            left: 1,\n                            blur: 1,\n                            color: \"#000\",\n                            opacity: .8\n                        }\n                    },\n                    fill: {\n                        type: \"solid\",\n                        colors: void 0,\n                        opacity: .85,\n                        gradient: {\n                            shade: \"dark\",\n                            type: \"horizontal\",\n                            shadeIntensity: .5,\n                            gradientToColors: void 0,\n                            inverseColors: !0,\n                            opacityFrom: 1,\n                            opacityTo: 1,\n                            stops: [\n                                0,\n                                50,\n                                100\n                            ],\n                            colorStops: []\n                        },\n                        image: {\n                            src: [],\n                            width: void 0,\n                            height: void 0\n                        },\n                        pattern: {\n                            style: \"squares\",\n                            width: 6,\n                            height: 6,\n                            strokeWidth: 2\n                        }\n                    },\n                    forecastDataPoints: {\n                        count: 0,\n                        fillOpacity: .5,\n                        strokeWidth: void 0,\n                        dashArray: 4\n                    },\n                    grid: {\n                        show: !0,\n                        borderColor: \"#e0e0e0\",\n                        strokeDashArray: 0,\n                        position: \"back\",\n                        xaxis: {\n                            lines: {\n                                show: !1\n                            }\n                        },\n                        yaxis: {\n                            lines: {\n                                show: !0\n                            }\n                        },\n                        row: {\n                            colors: void 0,\n                            opacity: .5\n                        },\n                        column: {\n                            colors: void 0,\n                            opacity: .5\n                        },\n                        padding: {\n                            top: 0,\n                            right: 10,\n                            bottom: 0,\n                            left: 12\n                        }\n                    },\n                    labels: [],\n                    legend: {\n                        show: !0,\n                        showForSingleSeries: !1,\n                        showForNullSeries: !0,\n                        showForZeroSeries: !0,\n                        floating: !1,\n                        position: \"bottom\",\n                        horizontalAlign: \"center\",\n                        inverseOrder: !1,\n                        fontSize: \"12px\",\n                        fontFamily: void 0,\n                        fontWeight: 400,\n                        width: void 0,\n                        height: void 0,\n                        formatter: void 0,\n                        tooltipHoverFormatter: void 0,\n                        offsetX: -20,\n                        offsetY: 4,\n                        customLegendItems: [],\n                        clusterGroupedSeries: !0,\n                        clusterGroupedSeriesOrientation: \"vertical\",\n                        labels: {\n                            colors: void 0,\n                            useSeriesColors: !1\n                        },\n                        markers: {\n                            size: 7,\n                            fillColors: void 0,\n                            strokeWidth: 1,\n                            shape: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            customHTML: void 0,\n                            onClick: void 0\n                        },\n                        itemMargin: {\n                            horizontal: 5,\n                            vertical: 4\n                        },\n                        onItemClick: {\n                            toggleDataSeries: !0\n                        },\n                        onItemHover: {\n                            highlightDataSeries: !0\n                        }\n                    },\n                    markers: {\n                        discrete: [],\n                        size: 0,\n                        colors: void 0,\n                        strokeColors: \"#fff\",\n                        strokeWidth: 2,\n                        strokeOpacity: .9,\n                        strokeDashArray: 0,\n                        fillOpacity: 1,\n                        shape: \"circle\",\n                        offsetX: 0,\n                        offsetY: 0,\n                        showNullDataPoints: !0,\n                        onClick: void 0,\n                        onDblClick: void 0,\n                        hover: {\n                            size: void 0,\n                            sizeOffset: 3\n                        }\n                    },\n                    noData: {\n                        text: void 0,\n                        align: \"center\",\n                        verticalAlign: \"middle\",\n                        offsetX: 0,\n                        offsetY: 0,\n                        style: {\n                            color: void 0,\n                            fontSize: \"14px\",\n                            fontFamily: void 0\n                        }\n                    },\n                    responsive: [],\n                    series: void 0,\n                    states: {\n                        hover: {\n                            filter: {\n                                type: \"lighten\"\n                            }\n                        },\n                        active: {\n                            allowMultipleDataPointsSelection: !1,\n                            filter: {\n                                type: \"darken\"\n                            }\n                        }\n                    },\n                    title: {\n                        text: void 0,\n                        align: \"left\",\n                        margin: 5,\n                        offsetX: 0,\n                        offsetY: 0,\n                        floating: !1,\n                        style: {\n                            fontSize: \"14px\",\n                            fontWeight: 900,\n                            fontFamily: void 0,\n                            color: void 0\n                        }\n                    },\n                    subtitle: {\n                        text: void 0,\n                        align: \"left\",\n                        margin: 5,\n                        offsetX: 0,\n                        offsetY: 30,\n                        floating: !1,\n                        style: {\n                            fontSize: \"12px\",\n                            fontWeight: 400,\n                            fontFamily: void 0,\n                            color: void 0\n                        }\n                    },\n                    stroke: {\n                        show: !0,\n                        curve: \"smooth\",\n                        lineCap: \"butt\",\n                        width: 2,\n                        colors: void 0,\n                        dashArray: 0,\n                        fill: {\n                            type: \"solid\",\n                            colors: void 0,\n                            opacity: .85,\n                            gradient: {\n                                shade: \"dark\",\n                                type: \"horizontal\",\n                                shadeIntensity: .5,\n                                gradientToColors: void 0,\n                                inverseColors: !0,\n                                opacityFrom: 1,\n                                opacityTo: 1,\n                                stops: [\n                                    0,\n                                    50,\n                                    100\n                                ],\n                                colorStops: []\n                            }\n                        }\n                    },\n                    tooltip: {\n                        enabled: !0,\n                        enabledOnSeries: void 0,\n                        shared: !0,\n                        hideEmptySeries: !1,\n                        followCursor: !1,\n                        intersect: !1,\n                        inverseOrder: !1,\n                        custom: void 0,\n                        fillSeriesColor: !1,\n                        theme: \"light\",\n                        cssClass: \"\",\n                        style: {\n                            fontSize: \"12px\",\n                            fontFamily: void 0\n                        },\n                        onDatasetHover: {\n                            highlightDataSeries: !1\n                        },\n                        x: {\n                            show: !0,\n                            format: \"dd MMM\",\n                            formatter: void 0\n                        },\n                        y: {\n                            formatter: void 0,\n                            title: {\n                                formatter: function(t) {\n                                    return t ? t + \": \" : \"\";\n                                }\n                            }\n                        },\n                        z: {\n                            formatter: void 0,\n                            title: \"Size: \"\n                        },\n                        marker: {\n                            show: !0,\n                            fillColors: void 0\n                        },\n                        items: {\n                            display: \"flex\"\n                        },\n                        fixed: {\n                            enabled: !1,\n                            position: \"topRight\",\n                            offsetX: 0,\n                            offsetY: 0\n                        }\n                    },\n                    xaxis: {\n                        type: \"category\",\n                        categories: [],\n                        convertedCatToNumeric: !1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        overwriteCategories: void 0,\n                        labels: {\n                            show: !0,\n                            rotate: -45,\n                            rotateAlways: !1,\n                            hideOverlappingLabels: !0,\n                            trim: !1,\n                            minHeight: void 0,\n                            maxHeight: 120,\n                            showDuplicates: !0,\n                            style: {\n                                colors: [],\n                                fontSize: \"12px\",\n                                fontWeight: 400,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            },\n                            offsetX: 0,\n                            offsetY: 0,\n                            format: void 0,\n                            formatter: void 0,\n                            datetimeUTC: !0,\n                            datetimeFormatter: {\n                                year: \"yyyy\",\n                                month: \"MMM 'yy\",\n                                day: \"dd MMM\",\n                                hour: \"HH:mm\",\n                                minute: \"HH:mm:ss\",\n                                second: \"HH:mm:ss\"\n                            }\n                        },\n                        group: {\n                            groups: [],\n                            style: {\n                                colors: [],\n                                fontSize: \"12px\",\n                                fontWeight: 400,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            }\n                        },\n                        axisBorder: {\n                            show: !0,\n                            color: \"#e0e0e0\",\n                            width: \"100%\",\n                            height: 1,\n                            offsetX: 0,\n                            offsetY: 0\n                        },\n                        axisTicks: {\n                            show: !0,\n                            color: \"#e0e0e0\",\n                            height: 6,\n                            offsetX: 0,\n                            offsetY: 0\n                        },\n                        stepSize: void 0,\n                        tickAmount: void 0,\n                        tickPlacement: \"on\",\n                        min: void 0,\n                        max: void 0,\n                        range: void 0,\n                        floating: !1,\n                        decimalsInFloat: void 0,\n                        position: \"bottom\",\n                        title: {\n                            text: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            style: {\n                                color: void 0,\n                                fontSize: \"12px\",\n                                fontWeight: 900,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            }\n                        },\n                        crosshairs: {\n                            show: !0,\n                            width: 1,\n                            position: \"back\",\n                            opacity: .9,\n                            stroke: {\n                                color: \"#b6b6b6\",\n                                width: 1,\n                                dashArray: 3\n                            },\n                            fill: {\n                                type: \"solid\",\n                                color: \"#B1B9C4\",\n                                gradient: {\n                                    colorFrom: \"#D8E3F0\",\n                                    colorTo: \"#BED1E6\",\n                                    stops: [\n                                        0,\n                                        100\n                                    ],\n                                    opacityFrom: .4,\n                                    opacityTo: .5\n                                }\n                            },\n                            dropShadow: {\n                                enabled: !1,\n                                left: 0,\n                                top: 0,\n                                blur: 1,\n                                opacity: .8\n                            }\n                        },\n                        tooltip: {\n                            enabled: !0,\n                            offsetY: 0,\n                            formatter: void 0,\n                            style: {\n                                fontSize: \"12px\",\n                                fontFamily: void 0\n                            }\n                        }\n                    },\n                    yaxis: this.yAxis,\n                    theme: {\n                        mode: \"\",\n                        palette: \"palette1\",\n                        monochrome: {\n                            enabled: !1,\n                            color: \"#008FFB\",\n                            shadeTo: \"light\",\n                            shadeIntensity: .65\n                        }\n                    }\n                };\n            }\n        }\n    ]), t;\n}(), Fi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.graphics = new Mi(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new Ii(this), this.xAxisAnnotations = new Ti(this), this.yAxisAnnotations = new Ei(this), this.pointsAnnotations = new Yi(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n    }\n    return s(t, [\n        {\n            key: \"drawAxesAnnotations\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.axisCharts && t.globals.dataPoints) {\n                    for(var e = this.yAxisAnnotations.drawYAxisAnnotations(), i = this.xAxisAnnotations.drawXAxisAnnotations(), a = this.pointsAnnotations.drawPointAnnotations(), s = t.config.chart.animations.enabled, r = [\n                        e,\n                        i,\n                        a\n                    ], n = [\n                        i.node,\n                        e.node,\n                        a.node\n                    ], o = 0; o < 3; o++)t.globals.dom.elGraphical.add(r[o]), !s || t.globals.resized || t.globals.dataChanged || \"scatter\" !== t.config.chart.type && \"bubble\" !== t.config.chart.type && t.globals.dataPoints > 1 && n[o].classList.add(\"apexcharts-element-hidden\"), t.globals.delayedElements.push({\n                        el: n[o],\n                        index: 0\n                    });\n                    this.helpers.annotationsBackground();\n                }\n            }\n        },\n        {\n            key: \"drawImageAnnos\",\n            value: function() {\n                var t = this;\n                this.w.config.annotations.images.map(function(e, i) {\n                    t.addImage(e, i);\n                });\n            }\n        },\n        {\n            key: \"drawTextAnnos\",\n            value: function() {\n                var t = this;\n                this.w.config.annotations.texts.map(function(e, i) {\n                    t.addText(e, i);\n                });\n            }\n        },\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t, e, i) {\n                this.xAxisAnnotations.addXaxisAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t, e, i) {\n                this.yAxisAnnotations.addYaxisAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addPointAnnotation\",\n            value: function(t, e, i) {\n                this.pointsAnnotations.addPointAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addText\",\n            value: function(t, e) {\n                var i = t.x, a = t.y, s = t.text, r = t.textAnchor, n = t.foreColor, o = t.fontSize, l = t.fontFamily, h = t.fontWeight, c = t.cssClass, d = t.backgroundColor, u = t.borderWidth, g = t.strokeDashArray, p = t.borderRadius, f = t.borderColor, x = t.appendTo, b = void 0 === x ? \".apexcharts-svg\" : x, m = t.paddingLeft, v = void 0 === m ? 4 : m, y = t.paddingRight, w = void 0 === y ? 4 : y, k = t.paddingBottom, A = void 0 === k ? 2 : k, C = t.paddingTop, S = void 0 === C ? 2 : C, L = this.w, M = this.graphics.drawText({\n                    x: i,\n                    y: a,\n                    text: s,\n                    textAnchor: r || \"start\",\n                    fontSize: o || \"12px\",\n                    fontWeight: h || \"regular\",\n                    fontFamily: l || L.config.chart.fontFamily,\n                    foreColor: n || L.config.chart.foreColor,\n                    cssClass: c\n                }), P = L.globals.dom.baseEl.querySelector(b);\n                P && P.appendChild(M.node);\n                var I = M.bbox();\n                if (s) {\n                    var T = this.graphics.drawRect(I.x - v, I.y - S, I.width + v + w, I.height + A + S, p, d || \"transparent\", 1, u, f, g);\n                    P.insertBefore(T.node, M.node);\n                }\n            }\n        },\n        {\n            key: \"addImage\",\n            value: function(t, e) {\n                var i = this.w, a = t.path, s = t.x, r = void 0 === s ? 0 : s, n = t.y, o = void 0 === n ? 0 : n, l = t.width, h = void 0 === l ? 20 : l, c = t.height, d = void 0 === c ? 20 : c, u = t.appendTo, g = void 0 === u ? \".apexcharts-svg\" : u, p = i.globals.dom.Paper.image(a);\n                p.size(h, d).move(r, o);\n                var f = i.globals.dom.baseEl.querySelector(g);\n                return f && f.appendChild(p.node), p;\n            }\n        },\n        {\n            key: \"addXaxisAnnotationExternal\",\n            value: function(t, e, i) {\n                return this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"xaxis\",\n                    contextMethod: i.addXaxisAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addYaxisAnnotationExternal\",\n            value: function(t, e, i) {\n                return this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"yaxis\",\n                    contextMethod: i.addYaxisAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addPointAnnotationExternal\",\n            value: function(t, e, i) {\n                return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"point\",\n                    contextMethod: i.addPointAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addAnnotationExternal\",\n            value: function(t) {\n                var e = t.params, i = t.pushToMemory, a = t.context, s = t.type, r = t.contextMethod, n = a, o = n.w, l = o.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations\")), h = l.childNodes.length + 1, c = new Oi, d = Object.assign({}, \"xaxis\" === s ? c.xAxisAnnotation : \"yaxis\" === s ? c.yAxisAnnotation : c.pointAnnotation), u = v.extend(d, e);\n                switch(s){\n                    case \"xaxis\":\n                        this.addXaxisAnnotation(u, l, h);\n                        break;\n                    case \"yaxis\":\n                        this.addYaxisAnnotation(u, l, h);\n                        break;\n                    case \"point\":\n                        this.addPointAnnotation(u, l, h);\n                }\n                var g = o.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(h, \"']\")), p = this.helpers.addBackgroundToAnno(g, u);\n                return p && l.insertBefore(p.node, g), i && o.globals.memory.methodsToExec.push({\n                    context: n,\n                    id: u.id ? u.id : v.randomId(),\n                    method: r,\n                    label: \"addAnnotation\",\n                    params: e\n                }), a;\n            }\n        },\n        {\n            key: \"clearAnnotations\",\n            value: function(t) {\n                for(var e = t.w, i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations\"), a = e.globals.memory.methodsToExec.length - 1; a >= 0; a--)\"addText\" !== e.globals.memory.methodsToExec[a].label && \"addAnnotation\" !== e.globals.memory.methodsToExec[a].label || e.globals.memory.methodsToExec.splice(a, 1);\n                i = v.listToArray(i), Array.prototype.forEach.call(i, function(t) {\n                    for(; t.firstChild;)t.removeChild(t.firstChild);\n                });\n            }\n        },\n        {\n            key: \"removeAnnotation\",\n            value: function(t, e) {\n                var i = t.w, a = i.globals.dom.baseEl.querySelectorAll(\".\".concat(e));\n                a && (i.globals.memory.methodsToExec.map(function(t, a) {\n                    t.id === e && i.globals.memory.methodsToExec.splice(a, 1);\n                }), Object.keys(i.config.annotations).forEach(function(t) {\n                    var a = i.config.annotations[t];\n                    Array.isArray(a) && (i.config.annotations[t] = a.filter(function(t) {\n                        return t.id !== e;\n                    }));\n                }), Array.prototype.forEach.call(a, function(t) {\n                    t.parentElement.removeChild(t);\n                }));\n            }\n        }\n    ]), t;\n}(), Di = function(t) {\n    var e, i = t.isTimeline, a = t.ctx, s = t.seriesIndex, r = t.dataPointIndex, n = t.y1, o = t.y2, l = t.w, h = l.globals.seriesRangeStart[s][r], c = l.globals.seriesRangeEnd[s][r], d = l.globals.labels[r], u = l.config.series[s].name ? l.config.series[s].name : \"\", g = l.globals.ttKeyFormatter, p = l.config.tooltip.y.title.formatter, f = {\n        w: l,\n        seriesIndex: s,\n        dataPointIndex: r,\n        start: h,\n        end: c\n    };\n    (\"function\" == typeof p && (u = p(u, f)), null !== (e = l.config.series[s].data[r]) && void 0 !== e && e.x && (d = l.config.series[s].data[r].x), i) || \"datetime\" === l.config.xaxis.type && (d = new Xi(a).xLabelFormat(l.globals.ttKeyFormatter, d, d, {\n        i: void 0,\n        dateFormatter: new zi(a).formatDate,\n        w: l\n    }));\n    \"function\" == typeof g && (d = g(d, f)), Number.isFinite(n) && Number.isFinite(o) && (h = n, c = o);\n    var x = \"\", b = \"\", m = l.globals.colors[s];\n    if (void 0 === l.config.tooltip.x.formatter) if (\"datetime\" === l.config.xaxis.type) {\n        var v = new zi(a);\n        x = v.formatDate(v.getDate(h), l.config.tooltip.x.format), b = v.formatDate(v.getDate(c), l.config.tooltip.x.format);\n    } else x = h, b = c;\n    else x = l.config.tooltip.x.formatter(h), b = l.config.tooltip.x.formatter(c);\n    return {\n        start: h,\n        end: c,\n        startVal: x,\n        endVal: b,\n        ylabel: d,\n        color: m,\n        seriesName: u\n    };\n}, _i = function(t) {\n    var e = t.color, i = t.seriesName, a = t.ylabel, s = t.start, r = t.end, n = t.seriesIndex, o = t.dataPointIndex, l = t.ctx.tooltip.tooltipLabels.getFormatters(n);\n    s = l.yLbFormatter(s), r = l.yLbFormatter(r);\n    var h = l.yLbFormatter(t.w.globals.series[n][o]), c = '<span class=\"value start-value\">\\n  '.concat(s, '\\n  </span> <span class=\"separator\">-</span> <span class=\"value end-value\">\\n  ').concat(r, \"\\n  </span>\");\n    return '<div class=\"apexcharts-tooltip-rangebar\"><div> <span class=\"series-name\" style=\"color: ' + e + '\">' + (i || \"\") + '</span></div><div> <span class=\"category\">' + a + \": </span> \" + (t.w.globals.comboCharts ? \"rangeArea\" === t.w.config.series[n].type || \"rangeBar\" === t.w.config.series[n].type ? c : \"<span>\".concat(h, \"</span>\") : c) + \" </div></div>\";\n}, Ni = function() {\n    function t(e) {\n        i(this, t), this.opts = e;\n    }\n    return s(t, [\n        {\n            key: \"hideYAxis\",\n            value: function() {\n                this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = \"\", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;\n            }\n        },\n        {\n            key: \"line\",\n            value: function() {\n                return {\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    stroke: {\n                        width: 5,\n                        curve: \"straight\"\n                    },\n                    markers: {\n                        size: 0,\n                        hover: {\n                            sizeOffset: 6\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"sparkline\",\n            value: function(t) {\n                this.hideYAxis();\n                return v.extend(t, {\n                    grid: {\n                        show: !1,\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    },\n                    legend: {\n                        show: !1\n                    },\n                    xaxis: {\n                        labels: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        axisBorder: {\n                            show: !1\n                        },\n                        axisTicks: {\n                            show: !1\n                        }\n                    },\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        },\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    }\n                });\n            }\n        },\n        {\n            key: \"slope\",\n            value: function() {\n                return this.hideYAxis(), {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        },\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !0,\n                        formatter: function(t, e) {\n                            var i = e.w.config.series[e.seriesIndex].name;\n                            return null !== t ? i + \": \" + t : \"\";\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        offsetX: -5\n                    },\n                    grid: {\n                        xaxis: {\n                            lines: {\n                                show: !0\n                            }\n                        },\n                        yaxis: {\n                            lines: {\n                                show: !1\n                            }\n                        }\n                    },\n                    xaxis: {\n                        position: \"top\",\n                        labels: {\n                            style: {\n                                fontSize: 14,\n                                fontWeight: 900\n                            }\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        crosshairs: {\n                            show: !1\n                        }\n                    },\n                    markers: {\n                        size: 8,\n                        hover: {\n                            sizeOffset: 1\n                        }\n                    },\n                    legend: {\n                        show: !1\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0,\n                        followCursor: !0\n                    },\n                    stroke: {\n                        width: 5,\n                        curve: \"straight\"\n                    }\n                };\n            }\n        },\n        {\n            key: \"bar\",\n            value: function() {\n                return {\n                    chart: {\n                        stacked: !1\n                    },\n                    plotOptions: {\n                        bar: {\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        }\n                    },\n                    stroke: {\n                        width: 0,\n                        lineCap: \"square\"\n                    },\n                    fill: {\n                        opacity: .85\n                    },\n                    legend: {\n                        markers: {\n                            shape: \"square\"\n                        }\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    xaxis: {\n                        tooltip: {\n                            enabled: !1\n                        },\n                        tickPlacement: \"between\",\n                        crosshairs: {\n                            width: \"barWidth\",\n                            position: \"back\",\n                            fill: {\n                                type: \"gradient\"\n                            },\n                            dropShadow: {\n                                enabled: !1\n                            },\n                            stroke: {\n                                width: 0\n                            }\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"funnel\",\n            value: function() {\n                return this.hideYAxis(), u(u({}, this.bar()), {}, {\n                    chart: {\n                        animations: {\n                            speed: 800,\n                            animateGradually: {\n                                enabled: !1\n                            }\n                        }\n                    },\n                    plotOptions: {\n                        bar: {\n                            horizontal: !0,\n                            borderRadiusApplication: \"around\",\n                            borderRadius: 0,\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    grid: {\n                        show: !1,\n                        padding: {\n                            left: 0,\n                            right: 0\n                        }\n                    },\n                    xaxis: {\n                        labels: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        axisBorder: {\n                            show: !1\n                        },\n                        axisTicks: {\n                            show: !1\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"candlestick\",\n            value: function() {\n                var t = this;\n                return {\n                    stroke: {\n                        width: 1\n                    },\n                    fill: {\n                        opacity: 1\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !0,\n                        custom: function(e) {\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w;\n                            return t._getBoxTooltip(s, i, a, [\n                                \"Open\",\n                                \"High\",\n                                \"\",\n                                \"Low\",\n                                \"Close\"\n                            ], \"candlestick\");\n                        }\n                    },\n                    states: {\n                        active: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"boxPlot\",\n            value: function() {\n                var t = this;\n                return {\n                    chart: {\n                        animations: {\n                            dynamicAnimation: {\n                                enabled: !1\n                            }\n                        }\n                    },\n                    stroke: {\n                        width: 1,\n                        colors: [\n                            \"#24292e\"\n                        ]\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !0,\n                        custom: function(e) {\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w;\n                            return t._getBoxTooltip(s, i, a, [\n                                \"Minimum\",\n                                \"Q1\",\n                                \"Median\",\n                                \"Q3\",\n                                \"Maximum\"\n                            ], \"boxPlot\");\n                        }\n                    },\n                    markers: {\n                        size: 7,\n                        strokeWidth: 1,\n                        strokeColors: \"#111\"\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"rangeBar\",\n            value: function() {\n                return {\n                    chart: {\n                        animations: {\n                            animateGradually: !1\n                        }\n                    },\n                    stroke: {\n                        width: 0,\n                        lineCap: \"square\"\n                    },\n                    plotOptions: {\n                        bar: {\n                            borderRadius: 0,\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1,\n                        formatter: function(t, e) {\n                            e.ctx;\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w, r = function() {\n                                var t = s.globals.seriesRangeStart[i][a];\n                                return s.globals.seriesRangeEnd[i][a] - t;\n                            };\n                            return s.globals.comboCharts ? \"rangeBar\" === s.config.series[i].type || \"rangeArea\" === s.config.series[i].type ? r() : t : r();\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    markers: {\n                        size: 10\n                    },\n                    tooltip: {\n                        shared: !1,\n                        followCursor: !0,\n                        custom: function(t) {\n                            return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal ? function(t) {\n                                var e = Di(u(u({}, t), {}, {\n                                    isTimeline: !0\n                                })), i = e.color, a = e.seriesName, s = e.ylabel, r = e.startVal, n = e.endVal;\n                                return _i(u(u({}, t), {}, {\n                                    color: i,\n                                    seriesName: a,\n                                    ylabel: s,\n                                    start: r,\n                                    end: n\n                                }));\n                            }(t) : function(t) {\n                                var e = Di(t), i = e.color, a = e.seriesName, s = e.ylabel, r = e.start, n = e.end;\n                                return _i(u(u({}, t), {}, {\n                                    color: i,\n                                    seriesName: a,\n                                    ylabel: s,\n                                    start: r,\n                                    end: n\n                                }));\n                            }(t);\n                        }\n                    },\n                    xaxis: {\n                        tickPlacement: \"between\",\n                        tooltip: {\n                            enabled: !1\n                        },\n                        crosshairs: {\n                            stroke: {\n                                width: 0\n                            }\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"dumbbell\",\n            value: function(t) {\n                var e, i;\n                return null !== (e = t.plotOptions.bar) && void 0 !== e && e.barHeight || (t.plotOptions.bar.barHeight = 2), null !== (i = t.plotOptions.bar) && void 0 !== i && i.columnWidth || (t.plotOptions.bar.columnWidth = 2), t;\n            }\n        },\n        {\n            key: \"area\",\n            value: function() {\n                return {\n                    stroke: {\n                        width: 4,\n                        fill: {\n                            type: \"solid\",\n                            gradient: {\n                                inverseColors: !1,\n                                shade: \"light\",\n                                type: \"vertical\",\n                                opacityFrom: .65,\n                                opacityTo: .5,\n                                stops: [\n                                    0,\n                                    100,\n                                    100\n                                ]\n                            }\n                        }\n                    },\n                    fill: {\n                        type: \"gradient\",\n                        gradient: {\n                            inverseColors: !1,\n                            shade: \"light\",\n                            type: \"vertical\",\n                            opacityFrom: .65,\n                            opacityTo: .5,\n                            stops: [\n                                0,\n                                100,\n                                100\n                            ]\n                        }\n                    },\n                    markers: {\n                        size: 0,\n                        hover: {\n                            sizeOffset: 6\n                        }\n                    },\n                    tooltip: {\n                        followCursor: !1\n                    }\n                };\n            }\n        },\n        {\n            key: \"rangeArea\",\n            value: function() {\n                return {\n                    stroke: {\n                        curve: \"straight\",\n                        width: 0\n                    },\n                    fill: {\n                        type: \"solid\",\n                        opacity: .6\n                    },\n                    markers: {\n                        size: 0\n                    },\n                    states: {\n                        hover: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        },\n                        active: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        }\n                    },\n                    tooltip: {\n                        intersect: !1,\n                        shared: !0,\n                        followCursor: !0,\n                        custom: function(t) {\n                            return function(t) {\n                                var e = Di(t), i = e.color, a = e.seriesName, s = e.ylabel, r = e.start, n = e.end;\n                                return _i(u(u({}, t), {}, {\n                                    color: i,\n                                    seriesName: a,\n                                    ylabel: s,\n                                    start: r,\n                                    end: n\n                                }));\n                            }(t);\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"brush\",\n            value: function(t) {\n                return v.extend(t, {\n                    chart: {\n                        toolbar: {\n                            autoSelected: \"selection\",\n                            show: !1\n                        },\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    stroke: {\n                        width: 1\n                    },\n                    tooltip: {\n                        enabled: !1\n                    },\n                    xaxis: {\n                        tooltip: {\n                            enabled: !1\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"stacked100\",\n            value: function(t) {\n                t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;\n                var e = t.dataLabels.formatter;\n                return t.yaxis.forEach(function(e, i) {\n                    t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n                }), \"bar\" === t.chart.type && (t.dataLabels.formatter = e || function(t) {\n                    return \"number\" == typeof t && t ? t.toFixed(0) + \"%\" : t;\n                }), t;\n            }\n        },\n        {\n            key: \"stackedBars\",\n            value: function() {\n                var t = this.bar();\n                return u(u({}, t), {}, {\n                    plotOptions: u(u({}, t.plotOptions), {}, {\n                        bar: u(u({}, t.plotOptions.bar), {}, {\n                            borderRadiusApplication: \"end\",\n                            borderRadiusWhenStacked: \"last\"\n                        })\n                    })\n                });\n            }\n        },\n        {\n            key: \"convertCatToNumeric\",\n            value: function(t) {\n                return t.xaxis.convertedCatToNumeric = !0, t;\n            }\n        },\n        {\n            key: \"convertCatToNumericXaxis\",\n            value: function(t, e, i) {\n                t.xaxis.type = \"numeric\", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function(t) {\n                    return v.isNumber(t) ? Math.floor(t) : t;\n                };\n                var a = t.xaxis.labels.formatter, s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;\n                return i && i.length && (s = i.map(function(t) {\n                    return Array.isArray(t) ? t : String(t);\n                })), s && s.length && (t.xaxis.labels.formatter = function(t) {\n                    return v.isNumber(t) ? a(s[Math.floor(t) - 1]) : a(t);\n                }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = t.xaxis.tickAmount || \"dataPoints\", t;\n            }\n        },\n        {\n            key: \"bubble\",\n            value: function() {\n                return {\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 0\n                        }\n                    },\n                    fill: {\n                        type: \"solid\",\n                        gradient: {\n                            shade: \"light\",\n                            inverse: !0,\n                            shadeIntensity: .55,\n                            opacityFrom: .4,\n                            opacityTo: .8\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"scatter\",\n            value: function() {\n                return {\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    markers: {\n                        size: 6,\n                        strokeWidth: 1,\n                        hover: {\n                            sizeOffset: 2\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"heatmap\",\n            value: function() {\n                return {\n                    chart: {\n                        stacked: !1\n                    },\n                    fill: {\n                        opacity: 1\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    tooltip: {\n                        followCursor: !0,\n                        marker: {\n                            show: !1\n                        },\n                        x: {\n                            show: !1\n                        }\n                    },\n                    legend: {\n                        position: \"top\",\n                        markers: {\n                            shape: \"square\"\n                        }\n                    },\n                    grid: {\n                        padding: {\n                            right: 20\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"treemap\",\n            value: function() {\n                return {\n                    chart: {\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        style: {\n                            fontSize: 14,\n                            fontWeight: 600,\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    stroke: {\n                        show: !0,\n                        width: 2,\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    legend: {\n                        show: !1\n                    },\n                    fill: {\n                        opacity: 1,\n                        gradient: {\n                            stops: [\n                                0,\n                                100\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        followCursor: !0,\n                        x: {\n                            show: !1\n                        }\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"pie\",\n            value: function() {\n                return {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    plotOptions: {\n                        pie: {\n                            donut: {\n                                labels: {\n                                    show: !1\n                                }\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        dropShadow: {\n                            enabled: !0\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    fill: {\n                        opacity: 1,\n                        gradient: {\n                            shade: \"light\",\n                            stops: [\n                                0,\n                                100\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"donut\",\n            value: function() {\n                return {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        dropShadow: {\n                            enabled: !0\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    fill: {\n                        opacity: 1,\n                        gradient: {\n                            shade: \"light\",\n                            shadeIntensity: .35,\n                            stops: [\n                                80,\n                                100\n                            ],\n                            opacityFrom: 1,\n                            opacityTo: 1\n                        }\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"polarArea\",\n            value: function() {\n                return {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        enabled: !1\n                    },\n                    stroke: {\n                        show: !0,\n                        width: 2\n                    },\n                    fill: {\n                        opacity: .7\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"radar\",\n            value: function() {\n                return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {\n                    dataLabels: {\n                        enabled: !1,\n                        style: {\n                            fontSize: \"11px\"\n                        }\n                    },\n                    stroke: {\n                        width: 2\n                    },\n                    markers: {\n                        size: 5,\n                        strokeWidth: 1,\n                        strokeOpacity: 1\n                    },\n                    fill: {\n                        opacity: .2\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0,\n                        followCursor: !0\n                    },\n                    grid: {\n                        show: !1,\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    },\n                    xaxis: {\n                        labels: {\n                            formatter: function(t) {\n                                return t;\n                            },\n                            style: {\n                                colors: [\n                                    \"#a8a8a8\"\n                                ],\n                                fontSize: \"11px\"\n                            }\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        crosshairs: {\n                            show: !1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"radialBar\",\n            value: function() {\n                return {\n                    chart: {\n                        animations: {\n                            dynamicAnimation: {\n                                enabled: !0,\n                                speed: 800\n                            }\n                        },\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    fill: {\n                        gradient: {\n                            shade: \"dark\",\n                            shadeIntensity: .4,\n                            inverseColors: !1,\n                            type: \"diagonal2\",\n                            opacityFrom: 1,\n                            opacityTo: 1,\n                            stops: [\n                                70,\n                                98,\n                                100\n                            ]\n                        }\n                    },\n                    legend: {\n                        show: !1,\n                        position: \"right\"\n                    },\n                    tooltip: {\n                        enabled: !1,\n                        fillSeriesColor: !0\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"_getBoxTooltip\",\n            value: function(t, e, i, a, s) {\n                var r = t.globals.seriesCandleO[e][i], n = t.globals.seriesCandleH[e][i], o = t.globals.seriesCandleM[e][i], l = t.globals.seriesCandleL[e][i], h = t.globals.seriesCandleC[e][i];\n                return t.config.series[e].type && t.config.series[e].type !== s ? '<div class=\"apexcharts-custom-tooltip\">\\n          '.concat(t.config.series[e].name ? t.config.series[e].name : \"series-\" + (e + 1), \": <strong>\").concat(t.globals.series[e][i], \"</strong>\\n        </div>\") : '<div class=\"apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '\">') + \"<div>\".concat(a[0], ': <span class=\"value\">') + r + \"</span></div>\" + \"<div>\".concat(a[1], ': <span class=\"value\">') + n + \"</span></div>\" + (o ? \"<div>\".concat(a[2], ': <span class=\"value\">') + o + \"</span></div>\" : \"\") + \"<div>\".concat(a[3], ': <span class=\"value\">') + l + \"</span></div>\" + \"<div>\".concat(a[4], ': <span class=\"value\">') + h + \"</span></div></div>\";\n            }\n        }\n    ]), t;\n}(), Wi = function() {\n    function t(e) {\n        i(this, t), this.opts = e;\n    }\n    return s(t, [\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = t.responsiveOverride, i = this.opts, a = new Oi, s = new Ni(i);\n                this.chartType = i.chart.type, i = this.extendYAxis(i), i = this.extendAnnotations(i);\n                var r = a.init(), n = {};\n                if (i && \"object\" === b(i)) {\n                    var o, l, h, c, d, u, g, p, f, x, m = {};\n                    m = -1 !== [\n                        \"line\",\n                        \"area\",\n                        \"bar\",\n                        \"candlestick\",\n                        \"boxPlot\",\n                        \"rangeBar\",\n                        \"rangeArea\",\n                        \"bubble\",\n                        \"scatter\",\n                        \"heatmap\",\n                        \"treemap\",\n                        \"pie\",\n                        \"polarArea\",\n                        \"donut\",\n                        \"radar\",\n                        \"radialBar\"\n                    ].indexOf(i.chart.type) ? s[i.chart.type]() : s.line(), null !== (o = i.plotOptions) && void 0 !== o && null !== (l = o.bar) && void 0 !== l && l.isFunnel && (m = s.funnel()), i.chart.stacked && \"bar\" === i.chart.type && (m = s.stackedBars()), null !== (h = i.chart.brush) && void 0 !== h && h.enabled && (m = s.brush(m)), null !== (c = i.plotOptions) && void 0 !== c && null !== (d = c.line) && void 0 !== d && d.isSlopeChart && (m = s.slope()), i.chart.stacked && \"100%\" === i.chart.stackType && (i = s.stacked100(i)), null !== (u = i.plotOptions) && void 0 !== u && null !== (g = u.bar) && void 0 !== g && g.isDumbbell && (i = s.dumbbell(i)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(i), i.xaxis = i.xaxis || window.Apex.xaxis || {}, e || (i.xaxis.convertedCatToNumeric = !1), (null !== (p = (i = this.checkForCatToNumericXAxis(this.chartType, m, i)).chart.sparkline) && void 0 !== p && p.enabled || null !== (f = window.Apex.chart) && void 0 !== f && null !== (x = f.sparkline) && void 0 !== x && x.enabled) && (m = s.sparkline(m)), n = v.extend(r, m);\n                }\n                var y = v.extend(n, window.Apex);\n                return r = v.extend(y, i), r = this.handleUserInputErrors(r);\n            }\n        },\n        {\n            key: \"checkForCatToNumericXAxis\",\n            value: function(t, e, i) {\n                var a, s, r = new Ni(i), n = (\"bar\" === t || \"boxPlot\" === t) && (null === (a = i.plotOptions) || void 0 === a || null === (s = a.bar) || void 0 === s ? void 0 : s.horizontal), o = \"pie\" === t || \"polarArea\" === t || \"donut\" === t || \"radar\" === t || \"radialBar\" === t || \"heatmap\" === t, l = \"datetime\" !== i.xaxis.type && \"numeric\" !== i.xaxis.type, h = i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;\n                return n || o || !l || \"between\" === h || (i = r.convertCatToNumeric(i)), i;\n            }\n        },\n        {\n            key: \"extendYAxis\",\n            value: function(t, e) {\n                var i = new Oi;\n                (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = v.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [\n                    v.extend(i.yAxis, t.yaxis)\n                ] : t.yaxis = v.extendArray(t.yaxis, i.yAxis);\n                var a = !1;\n                t.yaxis.forEach(function(t) {\n                    t.logarithmic && (a = !0);\n                });\n                var s = t.series;\n                return e && !s && (s = e.config.series), a && s.length !== t.yaxis.length && s.length && (t.yaxis = s.map(function(e, a) {\n                    if (e.name || (s[a].name = \"series-\".concat(a + 1)), t.yaxis[a]) return t.yaxis[a].seriesName = s[a].name, t.yaxis[a];\n                    var r = v.extend(i.yAxis, t.yaxis[0]);\n                    return r.show = !1, r;\n                })), a && s.length > 1 && s.length !== t.yaxis.length && console.warn(\"A multi-series logarithmic chart should have equal number of series and y-axes\"), t;\n            }\n        },\n        {\n            key: \"extendAnnotations\",\n            value: function(t) {\n                return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);\n            }\n        },\n        {\n            key: \"extendYAxisAnnotations\",\n            value: function(t) {\n                var e = new Oi;\n                return t.annotations.yaxis = v.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;\n            }\n        },\n        {\n            key: \"extendXAxisAnnotations\",\n            value: function(t) {\n                var e = new Oi;\n                return t.annotations.xaxis = v.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;\n            }\n        },\n        {\n            key: \"extendPointAnnotations\",\n            value: function(t) {\n                var e = new Oi;\n                return t.annotations.points = v.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;\n            }\n        },\n        {\n            key: \"checkForDarkTheme\",\n            value: function(t) {\n                t.theme && \"dark\" === t.theme.mode && (t.tooltip || (t.tooltip = {}), \"light\" !== t.tooltip.theme && (t.tooltip.theme = \"dark\"), t.chart.foreColor || (t.chart.foreColor = \"#f6f7f8\"), t.theme.palette || (t.theme.palette = \"palette4\"));\n            }\n        },\n        {\n            key: \"handleUserInputErrors\",\n            value: function(t) {\n                var e = t;\n                if (e.tooltip.shared && e.tooltip.intersect) throw new Error(\"tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.\");\n                if (\"bar\" === e.chart.type && e.plotOptions.bar.horizontal) {\n                    if (e.yaxis.length > 1) throw new Error(\"Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false\");\n                    e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;\n                }\n                return \"bar\" !== e.chart.type && \"rangeBar\" !== e.chart.type || e.tooltip.shared && \"barWidth\" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = \"tickWidth\"), \"candlestick\" !== e.chart.type && \"boxPlot\" !== e.chart.type || e.yaxis[0].reversed && (console.warn(\"Reversed y-axis in \".concat(e.chart.type, \" chart is not supported.\")), e.yaxis[0].reversed = !1), e;\n            }\n        }\n    ]), t;\n}(), Bi = function() {\n    function t() {\n        i(this, t);\n    }\n    return s(t, [\n        {\n            key: \"initGlobalVars\",\n            value: function(t) {\n                t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleM = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRange = [], t.seriesPercent = [], t.seriesGoals = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.seriesColors = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.hasXaxisGroups = !1, t.groups = [], t.barGroups = [], t.lineGroups = [], t.areaGroups = [], t.hasSeriesGroups = !1, t.seriesGroups = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.lastWheelExecution = 0, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0, t.multiAxisTickAmount = 0;\n            }\n        },\n        {\n            key: \"globalVars\",\n            value: function(t) {\n                return {\n                    chartID: null,\n                    cuid: null,\n                    events: {\n                        beforeMount: [],\n                        mounted: [],\n                        updated: [],\n                        clicked: [],\n                        selection: [],\n                        dataPointSelection: [],\n                        zoomed: [],\n                        scrolled: []\n                    },\n                    colors: [],\n                    clientX: null,\n                    clientY: null,\n                    fill: {\n                        colors: []\n                    },\n                    stroke: {\n                        colors: []\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: []\n                        }\n                    },\n                    radarPolygons: {\n                        fill: {\n                            colors: []\n                        }\n                    },\n                    markers: {\n                        colors: [],\n                        size: t.markers.size,\n                        largestSize: 0\n                    },\n                    animationEnded: !1,\n                    isTouchDevice: \"ontouchstart\" in window || navigator.msMaxTouchPoints,\n                    isDirty: !1,\n                    isExecCalled: !1,\n                    initialConfig: null,\n                    initialSeries: [],\n                    lastXAxis: [],\n                    lastYAxis: [],\n                    columnSeries: null,\n                    labels: [],\n                    timescaleLabels: [],\n                    noLabelsProvided: !1,\n                    allSeriesCollapsed: !1,\n                    collapsedSeries: [],\n                    collapsedSeriesIndices: [],\n                    ancillaryCollapsedSeries: [],\n                    ancillaryCollapsedSeriesIndices: [],\n                    risingSeries: [],\n                    dataFormatXNumeric: !1,\n                    capturedSeriesIndex: -1,\n                    capturedDataPointIndex: -1,\n                    selectedDataPoints: [],\n                    invalidLogScale: !1,\n                    ignoreYAxisIndexes: [],\n                    maxValsInArrayIndex: 0,\n                    radialSize: 0,\n                    selection: void 0,\n                    zoomEnabled: \"zoom\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,\n                    panEnabled: \"pan\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,\n                    selectionEnabled: \"selection\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,\n                    yaxis: null,\n                    mousedown: !1,\n                    lastClientPosition: {},\n                    visibleXRange: void 0,\n                    yValueDecimal: 0,\n                    total: 0,\n                    SVGNS: \"http://www.w3.org/2000/svg\",\n                    svgWidth: 0,\n                    svgHeight: 0,\n                    noData: !1,\n                    locale: {},\n                    dom: {},\n                    memory: {\n                        methodsToExec: []\n                    },\n                    shouldAnimate: !0,\n                    skipLastTimelinelabel: !1,\n                    skipFirstTimelinelabel: !1,\n                    delayedElements: [],\n                    axisCharts: !0,\n                    isDataXYZ: !1,\n                    isSlopeChart: t.plotOptions.line.isSlopeChart,\n                    resized: !1,\n                    resizeTimer: null,\n                    comboCharts: !1,\n                    dataChanged: !1,\n                    previousPaths: [],\n                    allSeriesHasEqualX: !0,\n                    pointsArray: [],\n                    dataLabelsRects: [],\n                    lastDrawnDataLabelsIndexes: [],\n                    hasNullValues: !1,\n                    zoomed: !1,\n                    gridWidth: 0,\n                    gridHeight: 0,\n                    rotateXLabels: !1,\n                    defaultLabels: !1,\n                    xLabelFormatter: void 0,\n                    yLabelFormatters: [],\n                    xaxisTooltipFormatter: void 0,\n                    ttKeyFormatter: void 0,\n                    ttVal: void 0,\n                    ttZFormatter: void 0,\n                    LINE_HEIGHT_RATIO: 1.618,\n                    xAxisLabelsHeight: 0,\n                    xAxisGroupLabelsHeight: 0,\n                    xAxisLabelsWidth: 0,\n                    yAxisLabelsWidth: 0,\n                    scaleX: 1,\n                    scaleY: 1,\n                    translateX: 0,\n                    translateY: 0,\n                    translateYAxisX: [],\n                    yAxisWidths: [],\n                    translateXAxisY: 0,\n                    translateXAxisX: 0,\n                    tooltip: null,\n                    niceScaleAllowedMagMsd: [\n                        [\n                            1,\n                            1,\n                            2,\n                            5,\n                            5,\n                            5,\n                            10,\n                            10,\n                            10,\n                            10,\n                            10\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            5,\n                            5,\n                            5,\n                            10,\n                            10,\n                            10,\n                            10,\n                            10\n                        ]\n                    ],\n                    niceScaleDefaultTicks: [\n                        1,\n                        2,\n                        4,\n                        4,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        6,\n                        12,\n                        12,\n                        12,\n                        12,\n                        12,\n                        12,\n                        12,\n                        12,\n                        12,\n                        24\n                    ],\n                    seriesYAxisMap: [],\n                    seriesYAxisReverseMap: []\n                };\n            }\n        },\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = this.globalVars(t);\n                return this.initGlobalVars(e), e.initialConfig = v.extend({}, t), e.initialSeries = v.clone(t.series), e.lastXAxis = v.clone(e.initialConfig.xaxis), e.lastYAxis = v.clone(e.initialConfig.yaxis), e;\n            }\n        }\n    ]), t;\n}(), Gi = function() {\n    function t(e) {\n        i(this, t), this.opts = e;\n    }\n    return s(t, [\n        {\n            key: \"init\",\n            value: function() {\n                var t = new Wi(this.opts).init({\n                    responsiveOverride: !1\n                });\n                return {\n                    config: t,\n                    globals: (new Bi).init(t)\n                };\n            }\n        }\n    ]), t;\n}(), ji = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.opts = null, this.seriesIndex = 0, this.patternIDs = [];\n    }\n    return s(t, [\n        {\n            key: \"clippedImgArea\",\n            value: function(t) {\n                var e = this.w, i = e.config, a = parseInt(e.globals.gridWidth, 10), s = parseInt(e.globals.gridHeight, 10), r = a > s ? a : s, n = t.image, o = 0, l = 0;\n                void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (o = i.fill.image.width + 1, l = i.fill.image.height) : (o = r + 1, l = r) : (o = t.width, l = t.height);\n                var h = document.createElementNS(e.globals.SVGNS, \"pattern\");\n                Mi.setAttrs(h, {\n                    id: t.patternID,\n                    patternUnits: t.patternUnits ? t.patternUnits : \"userSpaceOnUse\",\n                    width: o + \"px\",\n                    height: l + \"px\"\n                });\n                var c = document.createElementNS(e.globals.SVGNS, \"image\");\n                h.appendChild(c), c.setAttributeNS(window.SVG.xlink, \"href\", n), Mi.setAttrs(c, {\n                    x: 0,\n                    y: 0,\n                    preserveAspectRatio: \"none\",\n                    width: o + \"px\",\n                    height: l + \"px\"\n                }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);\n            }\n        },\n        {\n            key: \"getSeriesIndex\",\n            value: function(t) {\n                var e = this.w, i = e.config.chart.type;\n                return (\"bar\" === i || \"rangeBar\" === i) && e.config.plotOptions.bar.distributed || \"heatmap\" === i || \"treemap\" === i ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;\n            }\n        },\n        {\n            key: \"computeColorStops\",\n            value: function(t, e) {\n                var i, a = this.w, s = null, n = null, o = r(t);\n                try {\n                    for(o.s(); !(i = o.n()).done;){\n                        var l = i.value;\n                        l >= e.threshold ? (null === s || l > s) && (s = l) : (null === n || l < n) && (n = l);\n                    }\n                } catch (t) {\n                    o.e(t);\n                } finally{\n                    o.f();\n                }\n                null === s && (s = e.threshold), null === n && (n = e.threshold);\n                var h = s - e.threshold + (e.threshold - n);\n                0 === h && (h = 1);\n                var c = 100 - (e.threshold - n) / h * 100;\n                return [\n                    {\n                        offset: c = Math.max(0, Math.min(c, 100)),\n                        color: e.colorAboveThreshold,\n                        opacity: a.config.fill.opacity\n                    },\n                    {\n                        offset: 0,\n                        color: e.colorBelowThreshold,\n                        opacity: a.config.fill.opacity\n                    }\n                ];\n            }\n        },\n        {\n            key: \"fillPath\",\n            value: function(t) {\n                var e, i, a, s = this.w;\n                this.opts = t;\n                var r, n, o, l = this.w.config;\n                this.seriesIndex = this.getSeriesIndex(t);\n                var h = l.plotOptions.line.colors.colorAboveThreshold && l.plotOptions.line.colors.colorBelowThreshold, c = this.getFillColors()[this.seriesIndex];\n                void 0 !== s.globals.seriesColors[this.seriesIndex] && (c = s.globals.seriesColors[this.seriesIndex]), \"function\" == typeof c && (c = c({\n                    seriesIndex: this.seriesIndex,\n                    dataPointIndex: t.dataPointIndex,\n                    value: t.value,\n                    w: s\n                }));\n                var d, u, g, p = t.fillType ? t.fillType : this.getFillType(this.seriesIndex), x = Array.isArray(l.fill.opacity) ? l.fill.opacity[this.seriesIndex] : l.fill.opacity, b = \"gradient\" === p || h;\n                (t.color && (c = t.color), null !== (e = s.config.series[this.seriesIndex]) && void 0 !== e && null !== (i = e.data) && void 0 !== i && null !== (a = i[t.dataPointIndex]) && void 0 !== a && a.fillColor) && (c = null === (d = s.config.series[this.seriesIndex]) || void 0 === d || null === (u = d.data) || void 0 === u || null === (g = u[t.dataPointIndex]) || void 0 === g ? void 0 : g.fillColor);\n                c || (c = \"#fff\", console.warn(\"undefined color - ApexCharts\"));\n                var m = c;\n                if (-1 === c.indexOf(\"rgb\") ? -1 === c.indexOf(\"#\") ? m = c : c.length < 9 && (m = v.hexToRgba(c, x)) : c.indexOf(\"rgba\") > -1 ? x = v.getOpacityFromRGBA(c) : m = v.hexToRgba(v.rgb2hex(c), x), t.opacity && (x = t.opacity), \"pattern\" === p && (n = this.handlePatternFill({\n                    fillConfig: t.fillConfig,\n                    patternFill: n,\n                    fillColor: c,\n                    fillOpacity: x,\n                    defaultColor: m\n                })), b) {\n                    var y = f(l.fill.gradient.colorStops) || [], w = l.fill.gradient.type;\n                    h && (y[this.seriesIndex] = this.computeColorStops(s.globals.series[this.seriesIndex], l.plotOptions.line.colors), w = \"vertical\"), o = this.handleGradientFill({\n                        type: w,\n                        fillConfig: t.fillConfig,\n                        fillColor: c,\n                        fillOpacity: x,\n                        colorStops: y,\n                        i: this.seriesIndex\n                    });\n                }\n                if (\"image\" === p) {\n                    var k = l.fill.image.src, A = t.patternID ? t.patternID : \"\", C = \"pattern\".concat(s.globals.cuid).concat(t.seriesNumber + 1).concat(A);\n                    -1 === this.patternIDs.indexOf(C) && (this.clippedImgArea({\n                        opacity: x,\n                        image: Array.isArray(k) ? t.seriesNumber < k.length ? k[t.seriesNumber] : k[0] : k,\n                        width: t.width ? t.width : void 0,\n                        height: t.height ? t.height : void 0,\n                        patternUnits: t.patternUnits,\n                        patternID: C\n                    }), this.patternIDs.push(C)), r = \"url(#\".concat(C, \")\");\n                } else r = b ? o : \"pattern\" === p ? n : m;\n                return t.solid && (r = m), r;\n            }\n        },\n        {\n            key: \"getFillType\",\n            value: function(t) {\n                var e = this.w;\n                return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;\n            }\n        },\n        {\n            key: \"getFillColors\",\n            value: function() {\n                var t = this.w, e = t.config, i = this.opts, a = [];\n                return t.globals.comboCharts ? \"line\" === t.config.series[this.seriesIndex].type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors) : \"line\" === e.chart.type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors), void 0 !== i.fillColors && (a = [], Array.isArray(i.fillColors) ? a = i.fillColors.slice() : a.push(i.fillColors)), a;\n            }\n        },\n        {\n            key: \"handlePatternFill\",\n            value: function(t) {\n                var e = t.fillConfig, i = t.patternFill, a = t.fillColor, s = t.fillOpacity, r = t.defaultColor, n = this.w.config.fill;\n                e && (n = e);\n                var o = this.opts, l = new Mi(this.ctx), h = Array.isArray(n.pattern.strokeWidth) ? n.pattern.strokeWidth[this.seriesIndex] : n.pattern.strokeWidth, c = a;\n                Array.isArray(n.pattern.style) ? i = void 0 !== n.pattern.style[o.seriesNumber] ? l.drawPattern(n.pattern.style[o.seriesNumber], n.pattern.width, n.pattern.height, c, h, s) : r : i = l.drawPattern(n.pattern.style, n.pattern.width, n.pattern.height, c, h, s);\n                return i;\n            }\n        },\n        {\n            key: \"handleGradientFill\",\n            value: function(t) {\n                var e = t.type, i = t.fillColor, a = t.fillOpacity, s = t.fillConfig, r = t.colorStops, n = t.i, o = this.w.config.fill;\n                s && (o = u(u({}, o), s));\n                var l = this.opts, h = new Mi(this.ctx), c = new v;\n                e = e || o.gradient.type;\n                var d, g = i, p = void 0 === o.gradient.opacityFrom ? a : Array.isArray(o.gradient.opacityFrom) ? o.gradient.opacityFrom[n] : o.gradient.opacityFrom;\n                g.indexOf(\"rgba\") > -1 && (p = v.getOpacityFromRGBA(g));\n                var f = void 0 === o.gradient.opacityTo ? a : Array.isArray(o.gradient.opacityTo) ? o.gradient.opacityTo[n] : o.gradient.opacityTo;\n                if (void 0 === o.gradient.gradientToColors || 0 === o.gradient.gradientToColors.length) d = \"dark\" === o.gradient.shade ? c.shadeColor(-1 * parseFloat(o.gradient.shadeIntensity), i.indexOf(\"rgb\") > -1 ? v.rgb2hex(i) : i) : c.shadeColor(parseFloat(o.gradient.shadeIntensity), i.indexOf(\"rgb\") > -1 ? v.rgb2hex(i) : i);\n                else if (o.gradient.gradientToColors[l.seriesNumber]) {\n                    var x = o.gradient.gradientToColors[l.seriesNumber];\n                    d = x, x.indexOf(\"rgba\") > -1 && (f = v.getOpacityFromRGBA(x));\n                } else d = i;\n                if (o.gradient.gradientFrom && (g = o.gradient.gradientFrom), o.gradient.gradientTo && (d = o.gradient.gradientTo), o.gradient.inverseColors) {\n                    var b = g;\n                    g = d, d = b;\n                }\n                return g.indexOf(\"rgb\") > -1 && (g = v.rgb2hex(g)), d.indexOf(\"rgb\") > -1 && (d = v.rgb2hex(d)), h.drawGradient(e, g, d, p, f, l.size, o.gradient.stops, r, n);\n            }\n        }\n    ]), t;\n}(), Vi = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"setGlobalMarkerSize\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [\n                    t.config.markers.size\n                ], t.globals.markers.size.length > 0) {\n                    if (t.globals.markers.size.length < t.globals.series.length + 1) for(var e = 0; e <= t.globals.series.length; e++)void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);\n                } else t.globals.markers.size = t.config.series.map(function(e) {\n                    return t.config.markers.size;\n                });\n            }\n        },\n        {\n            key: \"plotChartMarkers\",\n            value: function(t) {\n                var e = t.pointsPos, i = t.seriesIndex, a = t.j, s = t.pSize, r = t.alwaysDrawMarker, n = void 0 !== r && r, o = t.isVirtualPoint, l = void 0 !== o && o, h = this.w, c = i, d = e, u = null, g = new Mi(this.ctx), p = h.config.markers.discrete && h.config.markers.discrete.length;\n                if (Array.isArray(d.x)) for(var f = 0; f < d.x.length; f++){\n                    var x = void 0, b = a, m = !v.isNumber(d.y[f]);\n                    0 === h.globals.markers.largestSize && h.globals.hasNullValues && null !== h.globals.series[c][a + 1] && !l && (m = !0), 1 === a && 0 === f && (b = 0), 1 === a && 1 === f && (b = 1);\n                    var y = \"apexcharts-marker\";\n                    if (\"line\" !== h.config.chart.type && \"area\" !== h.config.chart.type || h.globals.comboCharts || h.config.tooltip.intersect || (y += \" no-pointer-events\"), (Array.isArray(h.config.markers.size) ? h.globals.markers.size[i] > 0 : h.config.markers.size > 0) || n || p) {\n                        m || (y += \" w\".concat(v.randomId()));\n                        var w = this.getMarkerConfig({\n                            cssClass: y,\n                            seriesIndex: i,\n                            dataPointIndex: b\n                        });\n                        if (h.config.series[c].data[b] && (h.config.series[c].data[b].fillColor && (w.pointFillColor = h.config.series[c].data[b].fillColor), h.config.series[c].data[b].strokeColor && (w.pointStrokeColor = h.config.series[c].data[b].strokeColor)), void 0 !== s && (w.pSize = s), (d.x[f] < -h.globals.markers.largestSize || d.x[f] > h.globals.gridWidth + h.globals.markers.largestSize || d.y[f] < -h.globals.markers.largestSize || d.y[f] > h.globals.gridHeight + h.globals.markers.largestSize) && (w.pSize = 0), !m) (h.globals.markers.size[i] > 0 || n || p) && !u && (u = g.group({\n                            class: n || p ? \"\" : \"apexcharts-series-markers\"\n                        })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(h.globals.cuid, \")\")), (x = g.drawMarker(d.x[f], d.y[f], w)).attr(\"rel\", b), x.attr(\"j\", b), x.attr(\"index\", i), x.node.setAttribute(\"default-marker-size\", w.pSize), new Li(this.ctx).setSelectionFilter(x, i, b), this.addEvents(x), u && u.add(x);\n                    } else void 0 === h.globals.pointsArray[i] && (h.globals.pointsArray[i] = []), h.globals.pointsArray[i].push([\n                        d.x[f],\n                        d.y[f]\n                    ]);\n                }\n                return u;\n            }\n        },\n        {\n            key: \"getMarkerConfig\",\n            value: function(t) {\n                var e = t.cssClass, i = t.seriesIndex, a = t.dataPointIndex, s = void 0 === a ? null : a, r = t.radius, n = void 0 === r ? null : r, o = t.size, l = void 0 === o ? null : o, h = t.strokeWidth, c = void 0 === h ? null : h, d = this.w, u = this.getMarkerStyle(i), g = null === l ? d.globals.markers.size[i] : l, p = d.config.markers;\n                return null !== s && p.discrete.length && p.discrete.map(function(t) {\n                    t.seriesIndex === i && t.dataPointIndex === s && (u.pointStrokeColor = t.strokeColor, u.pointFillColor = t.fillColor, g = t.size, u.pointShape = t.shape);\n                }), {\n                    pSize: null === n ? g : n,\n                    pRadius: null !== n ? n : p.radius,\n                    pointStrokeWidth: null !== c ? c : Array.isArray(p.strokeWidth) ? p.strokeWidth[i] : p.strokeWidth,\n                    pointStrokeColor: u.pointStrokeColor,\n                    pointFillColor: u.pointFillColor,\n                    shape: u.pointShape || (Array.isArray(p.shape) ? p.shape[i] : p.shape),\n                    class: e,\n                    pointStrokeOpacity: Array.isArray(p.strokeOpacity) ? p.strokeOpacity[i] : p.strokeOpacity,\n                    pointStrokeDashArray: Array.isArray(p.strokeDashArray) ? p.strokeDashArray[i] : p.strokeDashArray,\n                    pointFillOpacity: Array.isArray(p.fillOpacity) ? p.fillOpacity[i] : p.fillOpacity,\n                    seriesIndex: i\n                };\n            }\n        },\n        {\n            key: \"addEvents\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx);\n                t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener(\"click\", e.config.markers.onClick), t.node.addEventListener(\"dblclick\", e.config.markers.onDblClick), t.node.addEventListener(\"touchstart\", i.pathMouseDown.bind(this.ctx, t), {\n                    passive: !0\n                });\n            }\n        },\n        {\n            key: \"getMarkerStyle\",\n            value: function(t) {\n                var e = this.w, i = e.globals.markers.colors, a = e.config.markers.strokeColor || e.config.markers.strokeColors;\n                return {\n                    pointStrokeColor: Array.isArray(a) ? a[t] : a,\n                    pointFillColor: Array.isArray(i) ? i[t] : i\n                };\n            }\n        }\n    ]), t;\n}(), Ui = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.initialAnim = this.w.config.chart.animations.enabled;\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t, e, i) {\n                var a = this.w, s = new Mi(this.ctx), r = i.realIndex, n = i.pointsPos, o = i.zRatio, l = i.elParent, h = s.group({\n                    class: \"apexcharts-series-markers apexcharts-series-\".concat(a.config.chart.type)\n                });\n                if (h.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(a.globals.cuid, \")\")), Array.isArray(n.x)) for(var c = 0; c < n.x.length; c++){\n                    var d = e + 1, u = !0;\n                    0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);\n                    var g = a.globals.markers.size[r];\n                    if (o !== 1 / 0) {\n                        var p = a.config.plotOptions.bubble;\n                        g = a.globals.seriesZ[r][d], p.zScaling && (g /= o), p.minBubbleRadius && g < p.minBubbleRadius && (g = p.minBubbleRadius), p.maxBubbleRadius && g > p.maxBubbleRadius && (g = p.maxBubbleRadius);\n                    }\n                    var f = n.x[c], x = n.y[c];\n                    if (g = g || 0, null !== x && void 0 !== a.globals.series[r][d] || (u = !1), u) {\n                        var b = this.drawPoint(f, x, g, r, d, e);\n                        h.add(b);\n                    }\n                    l.add(h);\n                }\n            }\n        },\n        {\n            key: \"drawPoint\",\n            value: function(t, e, i, a, s, r) {\n                var n = this.w, o = a, l = new y(this.ctx), h = new Li(this.ctx), c = new ji(this.ctx), d = new Vi(this.ctx), u = new Mi(this.ctx), g = d.getMarkerConfig({\n                    cssClass: \"apexcharts-marker\",\n                    seriesIndex: o,\n                    dataPointIndex: s,\n                    radius: \"bubble\" === n.config.chart.type || n.globals.comboCharts && n.config.series[a] && \"bubble\" === n.config.series[a].type ? i : null\n                }), p = c.fillPath({\n                    seriesNumber: a,\n                    dataPointIndex: s,\n                    color: g.pointFillColor,\n                    patternUnits: \"objectBoundingBox\",\n                    value: n.globals.series[a][r]\n                }), f = u.drawMarker(t, e, g);\n                if (n.config.series[o].data[s] && n.config.series[o].data[s].fillColor && (p = n.config.series[o].data[s].fillColor), f.attr({\n                    fill: p\n                }), n.config.chart.dropShadow.enabled) {\n                    var x = n.config.chart.dropShadow;\n                    h.dropShadow(f, x, a);\n                }\n                if (!this.initialAnim || n.globals.dataChanged || n.globals.resized) n.globals.animationEnded = !0;\n                else {\n                    var b = n.config.chart.animations.speed;\n                    l.animateMarker(f, b, n.globals.easing, function() {\n                        window.setTimeout(function() {\n                            l.animationCompleted(f);\n                        }, 100);\n                    });\n                }\n                return f.attr({\n                    rel: s,\n                    j: s,\n                    index: a,\n                    \"default-marker-size\": g.pSize\n                }), h.setSelectionFilter(f, a, s), d.addEvents(f), f.node.classList.add(\"apexcharts-marker\"), f;\n            }\n        },\n        {\n            key: \"centerTextInBubble\",\n            value: function(t) {\n                var e = this.w;\n                return {\n                    y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4\n                };\n            }\n        }\n    ]), t;\n}(), qi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"dataLabelsCorrection\",\n            value: function(t, e, i, a, s, r, n) {\n                var o = this.w, l = !1, h = new Mi(this.ctx).getTextRects(i, n), c = h.width, d = h.height;\n                e < 0 && (e = 0), e > o.globals.gridHeight + d && (e = o.globals.gridHeight + d / 2), void 0 === o.globals.dataLabelsRects[a] && (o.globals.dataLabelsRects[a] = []), o.globals.dataLabelsRects[a].push({\n                    x: t,\n                    y: e,\n                    width: c,\n                    height: d\n                });\n                var u = o.globals.dataLabelsRects[a].length - 2, g = void 0 !== o.globals.lastDrawnDataLabelsIndexes[a] ? o.globals.lastDrawnDataLabelsIndexes[a][o.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;\n                if (void 0 !== o.globals.dataLabelsRects[a][u]) {\n                    var p = o.globals.dataLabelsRects[a][g];\n                    (t > p.x + p.width || e > p.y + p.height || e + d < p.y || t + c < p.x) && (l = !0);\n                }\n                return (0 === s || r) && (l = !0), {\n                    x: t,\n                    y: e,\n                    textRects: h,\n                    drawnextLabel: l\n                };\n            }\n        },\n        {\n            key: \"drawDataLabel\",\n            value: function(t) {\n                var e = this, i = t.type, a = t.pos, s = t.i, r = t.j, n = t.isRangeStart, o = t.strokeWidth, l = void 0 === o ? 2 : o, h = this.w, c = new Mi(this.ctx), d = h.config.dataLabels, u = 0, g = 0, p = r, f = null;\n                if (-1 !== h.globals.collapsedSeriesIndices.indexOf(s) || !d.enabled || !Array.isArray(a.x)) return f;\n                f = c.group({\n                    class: \"apexcharts-data-labels\"\n                });\n                for(var x = 0; x < a.x.length; x++)if (u = a.x[x] + d.offsetX, g = a.y[x] + d.offsetY + l, !isNaN(u)) {\n                    1 === r && 0 === x && (p = 0), 1 === r && 1 === x && (p = 1);\n                    var b = h.globals.series[s][p];\n                    \"rangeArea\" === i && (b = n ? h.globals.seriesRangeStart[s][p] : h.globals.seriesRangeEnd[s][p]);\n                    var m = \"\", v = function(t) {\n                        return h.config.dataLabels.formatter(t, {\n                            ctx: e.ctx,\n                            seriesIndex: s,\n                            dataPointIndex: p,\n                            w: h\n                        });\n                    };\n                    if (\"bubble\" === h.config.chart.type) m = v(b = h.globals.seriesZ[s][p]), g = a.y[x], g = new Ui(this.ctx).centerTextInBubble(g, s, p).y;\n                    else void 0 !== b && (m = v(b));\n                    var y = h.config.dataLabels.textAnchor;\n                    h.globals.isSlopeChart && (y = 0 === p ? \"end\" : p === h.config.series[s].data.length - 1 ? \"start\" : \"middle\"), this.plotDataLabelsText({\n                        x: u,\n                        y: g,\n                        text: m,\n                        i: s,\n                        j: p,\n                        parent: f,\n                        offsetCorrection: !0,\n                        dataLabelsConfig: h.config.dataLabels,\n                        textAnchor: y\n                    });\n                }\n                return f;\n            }\n        },\n        {\n            key: \"plotDataLabelsText\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = t.x, s = t.y, r = t.i, n = t.j, o = t.text, l = t.textAnchor, h = t.fontSize, c = t.parent, d = t.dataLabelsConfig, u = t.color, g = t.alwaysDrawDataLabel, p = t.offsetCorrection, f = t.className, x = null;\n                if (Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(r) < 0) return x;\n                var b = {\n                    x: a,\n                    y: s,\n                    drawnextLabel: !0,\n                    textRects: null\n                };\n                p && (b = this.dataLabelsCorrection(a, s, o, r, n, g, parseInt(d.style.fontSize, 10))), e.globals.zoomed || (a = b.x, s = b.y), b.textRects && (a < -20 - b.textRects.width || a > e.globals.gridWidth + b.textRects.width + 30) && (o = \"\");\n                var m = e.globals.dataLabels.style.colors[r];\n                ((\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && e.config.plotOptions.bar.distributed || e.config.dataLabels.distributed) && (m = e.globals.dataLabels.style.colors[n]), \"function\" == typeof m && (m = m({\n                    series: e.globals.series,\n                    seriesIndex: r,\n                    dataPointIndex: n,\n                    w: e\n                })), u && (m = u);\n                var v = d.offsetX, y = d.offsetY;\n                if (\"bar\" !== e.config.chart.type && \"rangeBar\" !== e.config.chart.type || (v = 0, y = 0), e.globals.isSlopeChart && (0 !== n && (v = -2 * d.offsetX + 5), 0 !== n && n !== e.config.series[r].data.length - 1 && (v = 0)), b.drawnextLabel) {\n                    if ((x = i.drawText({\n                        width: 100,\n                        height: parseInt(d.style.fontSize, 10),\n                        x: a + v,\n                        y: s + y,\n                        foreColor: m,\n                        textAnchor: l || d.textAnchor,\n                        text: o,\n                        fontSize: h || d.style.fontSize,\n                        fontFamily: d.style.fontFamily,\n                        fontWeight: d.style.fontWeight || \"normal\"\n                    })).attr({\n                        class: f || \"apexcharts-datalabel\",\n                        cx: a,\n                        cy: s\n                    }), d.dropShadow.enabled) {\n                        var w = d.dropShadow;\n                        new Li(this.ctx).dropShadow(x, w);\n                    }\n                    c.add(x), void 0 === e.globals.lastDrawnDataLabelsIndexes[r] && (e.globals.lastDrawnDataLabelsIndexes[r] = []), e.globals.lastDrawnDataLabelsIndexes[r].push(n);\n                }\n                return x;\n            }\n        },\n        {\n            key: \"addBackgroundToDataLabel\",\n            value: function(t, e) {\n                var i = this.w, a = i.config.dataLabels.background, s = a.padding, r = a.padding / 2, n = e.width, o = e.height, l = new Mi(this.ctx).drawRect(e.x - s, e.y - r / 2, n + 2 * s, o + r, a.borderRadius, \"transparent\" !== i.config.chart.background && i.config.chart.background ? i.config.chart.background : \"#fff\", a.opacity, a.borderWidth, a.borderColor);\n                a.dropShadow.enabled && new Li(this.ctx).dropShadow(l, a.dropShadow);\n                return l;\n            }\n        },\n        {\n            key: \"dataLabelsBackground\",\n            value: function() {\n                var t = this.w;\n                if (\"bubble\" !== t.config.chart.type) for(var e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels text\"), i = 0; i < e.length; i++){\n                    var a = e[i], s = a.getBBox(), r = null;\n                    if (s.width && s.height && (r = this.addBackgroundToDataLabel(a, s)), r) {\n                        a.parentNode.insertBefore(r.node, a);\n                        var n = t.config.dataLabels.background.backgroundColor || a.getAttribute(\"fill\");\n                        t.config.chart.animations.enabled && !t.globals.resized && !t.globals.dataChanged ? r.animate().attr({\n                            fill: n\n                        }) : r.attr({\n                            fill: n\n                        }), a.setAttribute(\"fill\", t.config.dataLabels.background.foreColor);\n                    }\n                }\n            }\n        },\n        {\n            key: \"bringForward\",\n            value: function() {\n                for(var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels\"), i = t.globals.dom.baseEl.querySelector(\".apexcharts-plot-series:last-child\"), a = 0; a < e.length; a++)i && i.insertBefore(e[a], i.nextSibling);\n            }\n        }\n    ]), t;\n}(), Zi = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.legendInactiveClass = \"legend-mouseover-inactive\";\n    }\n    return s(t, [\n        {\n            key: \"getAllSeriesEls\",\n            value: function() {\n                return this.w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-series\");\n            }\n        },\n        {\n            key: \"getSeriesByName\",\n            value: function(t) {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner .apexcharts-series[seriesName='\".concat(v.escapeString(t), \"']\"));\n            }\n        },\n        {\n            key: \"isSeriesHidden\",\n            value: function(t) {\n                var e = this.getSeriesByName(t), i = parseInt(e.getAttribute(\"data:realIndex\"), 10);\n                return {\n                    isHidden: e.classList.contains(\"apexcharts-series-collapsed\"),\n                    realIndex: i\n                };\n            }\n        },\n        {\n            key: \"addCollapsedClassToSeries\",\n            value: function(t, e) {\n                var i = this.w;\n                function a(i) {\n                    for(var a = 0; a < i.length; a++)i[a].index === e && t.node.classList.add(\"apexcharts-series-collapsed\");\n                }\n                a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);\n            }\n        },\n        {\n            key: \"toggleSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;\n            }\n        },\n        {\n            key: \"showSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);\n            }\n        },\n        {\n            key: \"resetSeries\",\n            value: function() {\n                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a = this.w, s = v.clone(a.globals.initialSeries);\n                a.globals.previousPaths = [], i ? (a.globals.collapsedSeries = [], a.globals.ancillaryCollapsedSeries = [], a.globals.collapsedSeriesIndices = [], a.globals.ancillaryCollapsedSeriesIndices = []) : s = this.emptyCollapsedSeries(s), a.config.series = s, t && (e && (a.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled));\n            }\n        },\n        {\n            key: \"emptyCollapsedSeries\",\n            value: function(t) {\n                for(var e = this.w, i = 0; i < t.length; i++)e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = []);\n                return t;\n            }\n        },\n        {\n            key: \"highlightSeries\",\n            value: function(t) {\n                var e = this.w, i = this.getSeriesByName(t), a = parseInt(null == i ? void 0 : i.getAttribute(\"data:realIndex\"), 10), s = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis\"), r = null, n = null, o = null;\n                if (e.globals.axisCharts || \"radialBar\" === e.config.chart.type) if (e.globals.axisCharts) {\n                    r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(a, \"']\")), n = e.globals.dom.baseEl.querySelector(\".apexcharts-datalabels[data\\\\:realIndex='\".concat(a, \"']\"));\n                    var l = e.globals.seriesYAxisReverseMap[a];\n                    o = e.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(l, \"']\"));\n                } else r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"']\"));\n                else r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"'] path\"));\n                for(var h = 0; h < s.length; h++)s[h].classList.add(this.legendInactiveClass);\n                if (r) e.globals.axisCharts || r.parentNode.classList.remove(this.legendInactiveClass), r.classList.remove(this.legendInactiveClass), null !== n && n.classList.remove(this.legendInactiveClass), null !== o && o.classList.remove(this.legendInactiveClass);\n                else for(var c = 0; c < s.length; c++)s[c].classList.remove(this.legendInactiveClass);\n            }\n        },\n        {\n            key: \"toggleSeriesOnHover\",\n            value: function(t, e) {\n                var i = this.w;\n                e || (e = t.target);\n                var a = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis\");\n                if (\"mousemove\" === t.type) {\n                    var s = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n                    this.highlightSeries(i.globals.seriesNames[s]);\n                } else if (\"mouseout\" === t.type) for(var r = 0; r < a.length; r++)a[r].classList.remove(this.legendInactiveClass);\n            }\n        },\n        {\n            key: \"highlightRangeInSeries\",\n            value: function(t, e) {\n                var i = this, a = this.w, s = a.globals.dom.baseEl.getElementsByClassName(\"apexcharts-heatmap-rect\"), r = function(t) {\n                    for(var e = 0; e < s.length; e++)s[e].classList[t](i.legendInactiveClass);\n                };\n                if (\"mousemove\" === t.type) {\n                    var n = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n                    r(\"add\");\n                    var o = a.config.plotOptions.heatmap.colorScale.ranges;\n                    !function(t, e) {\n                        for(var a = 0; a < s.length; a++){\n                            var r = Number(s[a].getAttribute(\"val\"));\n                            r >= t.from && (r < t.to || t.to === e && r === e) && s[a].classList.remove(i.legendInactiveClass);\n                        }\n                    }(o[n], o.reduce(function(t, e) {\n                        return Math.max(t, e.to);\n                    }, 0));\n                } else \"mouseout\" === t.type && r(\"remove\");\n            }\n        },\n        {\n            key: \"getActiveConfigSeriesIndex\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"asc\", e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = this.w, a = 0;\n                if (i.config.series.length > 1) {\n                    for(var s = i.config.series.map(function(t, a) {\n                        return t.data && t.data.length > 0 && -1 === i.globals.collapsedSeriesIndices.indexOf(a) && (!i.globals.comboCharts || 0 === e.length || e.length && e.indexOf(i.config.series[a].type) > -1) ? a : -1;\n                    }), r = \"asc\" === t ? 0 : s.length - 1; \"asc\" === t ? r < s.length : r >= 0; \"asc\" === t ? r++ : r--)if (-1 !== s[r]) {\n                        a = s[r];\n                        break;\n                    }\n                }\n                return a;\n            }\n        },\n        {\n            key: \"getBarSeriesIndices\",\n            value: function() {\n                return this.w.globals.comboCharts ? this.w.config.series.map(function(t, e) {\n                    return \"bar\" === t.type || \"column\" === t.type ? e : -1;\n                }).filter(function(t) {\n                    return -1 !== t;\n                }) : this.w.config.series.map(function(t, e) {\n                    return e;\n                });\n            }\n        },\n        {\n            key: \"getPreviousPaths\",\n            value: function() {\n                var t = this.w;\n                function e(e, i, a) {\n                    for(var s = e[i].childNodes, r = {\n                        type: a,\n                        paths: [],\n                        realIndex: e[i].getAttribute(\"data:realIndex\")\n                    }, n = 0; n < s.length; n++)if (s[n].hasAttribute(\"pathTo\")) {\n                        var o = s[n].getAttribute(\"pathTo\");\n                        r.paths.push({\n                            d: o\n                        });\n                    }\n                    t.globals.previousPaths.push(r);\n                }\n                t.globals.previousPaths = [];\n                [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangebar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"radar\"\n                ].forEach(function(i) {\n                    for(var a, s = (a = i, t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(a, \"-series .apexcharts-series\"))), r = 0; r < s.length; r++)e(s, r, i);\n                });\n                var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series\"));\n                if (i.length > 0) for(var a = function(e) {\n                    for(var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] rect\")), a = [], s = function(t) {\n                        var e = function(e) {\n                            return i[t].getAttribute(e);\n                        }, s = {\n                            x: parseFloat(e(\"x\")),\n                            y: parseFloat(e(\"y\")),\n                            width: parseFloat(e(\"width\")),\n                            height: parseFloat(e(\"height\"))\n                        };\n                        a.push({\n                            rect: s,\n                            color: i[t].getAttribute(\"color\")\n                        });\n                    }, r = 0; r < i.length; r++)s(r);\n                    t.globals.previousPaths.push(a);\n                }, s = 0; s < i.length; s++)a(s);\n                t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);\n            }\n        },\n        {\n            key: \"clearPreviousPaths\",\n            value: function() {\n                var t = this.w;\n                t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1;\n            }\n        },\n        {\n            key: \"handleNoData\",\n            value: function() {\n                var t = this.w, e = t.config.noData, i = new Mi(this.ctx), a = t.globals.svgWidth / 2, s = t.globals.svgHeight / 2, r = \"middle\";\n                if (t.globals.noData = !0, t.globals.animationEnded = !0, \"left\" === e.align ? (a = 10, r = \"start\") : \"right\" === e.align && (a = t.globals.svgWidth - 10, r = \"end\"), \"top\" === e.verticalAlign ? s = 50 : \"bottom\" === e.verticalAlign && (s = t.globals.svgHeight - 50), a += e.offsetX, s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && \"\" !== e.text) {\n                    var n = i.drawText({\n                        x: a,\n                        y: s,\n                        text: e.text,\n                        textAnchor: r,\n                        fontSize: e.style.fontSize,\n                        fontFamily: e.style.fontFamily,\n                        foreColor: e.style.color,\n                        opacity: 1,\n                        class: \"apexcharts-text-nodata\"\n                    });\n                    t.globals.dom.Paper.add(n);\n                }\n            }\n        },\n        {\n            key: \"setNullSeriesToZeroValues\",\n            value: function(t) {\n                for(var e = this.w, i = 0; i < t.length; i++)if (0 === t[i].length) for(var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++)t[i].push(0);\n                return t;\n            }\n        },\n        {\n            key: \"hasAllSeriesEqualX\",\n            value: function() {\n                for(var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++)if (i[a][0] !== i[a + 1][0]) {\n                    t = !1;\n                    break;\n                }\n                return e.globals.allSeriesHasEqualX = t, t;\n            }\n        },\n        {\n            key: \"filteredSeriesX\",\n            value: function() {\n                var t = this.w.globals.seriesX.map(function(t) {\n                    return t.length > 0 ? t : [];\n                });\n                return t;\n            }\n        }\n    ]), t;\n}(), $i = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new Pi(this.ctx);\n    }\n    return s(t, [\n        {\n            key: \"isMultiFormat\",\n            value: function() {\n                return this.isFormatXY() || this.isFormat2DArray();\n            }\n        },\n        {\n            key: \"isFormatXY\",\n            value: function() {\n                var t = this.w.config.series.slice(), e = new Zi(this.ctx);\n                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;\n            }\n        },\n        {\n            key: \"isFormat2DArray\",\n            value: function() {\n                var t = this.w.config.series.slice(), e = new Zi(this.ctx);\n                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;\n            }\n        },\n        {\n            key: \"handleFormat2DArray\",\n            value: function(t, e) {\n                for(var i = this.w.config, a = this.w.globals, s = \"boxPlot\" === i.chart.type || \"boxPlot\" === i.series[e].type, r = 0; r < t[e].data.length; r++)if (void 0 !== t[e].data[r][1] && (Array.isArray(t[e].data[r][1]) && 4 === t[e].data[r][1].length && !s ? this.twoDSeries.push(v.parseNumber(t[e].data[r][1][3])) : t[e].data[r].length >= 5 ? this.twoDSeries.push(v.parseNumber(t[e].data[r][4])) : this.twoDSeries.push(v.parseNumber(t[e].data[r][1])), a.dataFormatXNumeric = !0), \"datetime\" === i.xaxis.type) {\n                    var n = new Date(t[e].data[r][0]);\n                    n = new Date(n).getTime(), this.twoDSeriesX.push(n);\n                } else this.twoDSeriesX.push(t[e].data[r][0]);\n                for(var o = 0; o < t[e].data.length; o++)void 0 !== t[e].data[o][2] && (this.threeDSeries.push(t[e].data[o][2]), a.isDataXYZ = !0);\n            }\n        },\n        {\n            key: \"handleFormatXY\",\n            value: function(t, e) {\n                var i = this.w.config, a = this.w.globals, s = new zi(this.ctx), r = e;\n                a.collapsedSeriesIndices.indexOf(e) > -1 && (r = this.activeSeriesIndex);\n                for(var n = 0; n < t[e].data.length; n++)void 0 !== t[e].data[n].y && (Array.isArray(t[e].data[n].y) ? this.twoDSeries.push(v.parseNumber(t[e].data[n].y[t[e].data[n].y.length - 1])) : this.twoDSeries.push(v.parseNumber(t[e].data[n].y))), void 0 !== t[e].data[n].goals && Array.isArray(t[e].data[n].goals) ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[n].goals)) : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));\n                for(var o = 0; o < t[r].data.length; o++){\n                    var l = \"string\" == typeof t[r].data[o].x, h = Array.isArray(t[r].data[o].x), c = !h && !!s.isValidDate(t[r].data[o].x);\n                    if (l || c) if (l || i.xaxis.convertedCatToNumeric) {\n                        var d = a.isBarHorizontal && a.isRangeData;\n                        \"datetime\" !== i.xaxis.type || d ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[o].x), isNaN(t[r].data[o].x) || \"category\" === this.w.config.xaxis.type || \"string\" == typeof t[r].data[o].x || (a.isXNumeric = !0)) : this.twoDSeriesX.push(s.parseDate(t[r].data[o].x));\n                    } else \"datetime\" === i.xaxis.type ? this.twoDSeriesX.push(s.parseDate(t[r].data[o].x.toString())) : (a.dataFormatXNumeric = !0, a.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[r].data[o].x)));\n                    else h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[o].x)) : (a.isXNumeric = !0, a.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[r].data[o].x));\n                }\n                if (t[e].data[0] && void 0 !== t[e].data[0].z) {\n                    for(var u = 0; u < t[e].data.length; u++)this.threeDSeries.push(t[e].data[u].z);\n                    a.isDataXYZ = !0;\n                }\n            }\n        },\n        {\n            key: \"handleRangeData\",\n            value: function(t, e) {\n                var i = this.w.globals, a = {};\n                return this.isFormat2DArray() ? a = this.handleRangeDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleRangeDataFormat(\"xy\", t, e)), i.seriesRangeStart[e] = void 0 === a.start ? [] : a.start, i.seriesRangeEnd[e] = void 0 === a.end ? [] : a.end, i.seriesRange[e] = a.rangeUniques, i.seriesRange.forEach(function(t, e) {\n                    t && t.forEach(function(t, e) {\n                        t.y.forEach(function(e, i) {\n                            for(var a = 0; a < t.y.length; a++)if (i !== a) {\n                                var s = e.y1, r = e.y2, n = t.y[a].y1;\n                                s <= t.y[a].y2 && n <= r && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[a].rangeName) < 0 && t.overlaps.push(t.y[a].rangeName));\n                            }\n                        });\n                    });\n                }), a;\n            }\n        },\n        {\n            key: \"handleCandleStickBoxData\",\n            value: function(t, e) {\n                var i = this.w.globals, a = {};\n                return this.isFormat2DArray() ? a = this.handleCandleStickBoxDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleCandleStickBoxDataFormat(\"xy\", t, e)), i.seriesCandleO[e] = a.o, i.seriesCandleH[e] = a.h, i.seriesCandleM[e] = a.m, i.seriesCandleL[e] = a.l, i.seriesCandleC[e] = a.c, a;\n            }\n        },\n        {\n            key: \"handleRangeDataFormat\",\n            value: function(t, e, i) {\n                var a = [], s = [], r = e[i].data.filter(function(t, e, i) {\n                    return e === i.findIndex(function(e) {\n                        return e.x === t.x;\n                    });\n                }).map(function(t, e) {\n                    return {\n                        x: t.x,\n                        overlaps: [],\n                        y: []\n                    };\n                });\n                if (\"array\" === t) for(var n = 0; n < e[i].data.length; n++)Array.isArray(e[i].data[n]) ? (a.push(e[i].data[n][1][0]), s.push(e[i].data[n][1][1])) : (a.push(e[i].data[n]), s.push(e[i].data[n]));\n                else if (\"xy\" === t) for(var o = function(t) {\n                    var n = Array.isArray(e[i].data[t].y), o = v.randomId(), l = e[i].data[t].x, h = {\n                        y1: n ? e[i].data[t].y[0] : e[i].data[t].y,\n                        y2: n ? e[i].data[t].y[1] : e[i].data[t].y,\n                        rangeName: o\n                    };\n                    e[i].data[t].rangeName = o;\n                    var c = r.findIndex(function(t) {\n                        return t.x === l;\n                    });\n                    r[c].y.push(h), a.push(h.y1), s.push(h.y2);\n                }, l = 0; l < e[i].data.length; l++)o(l);\n                return {\n                    start: a,\n                    end: s,\n                    rangeUniques: r\n                };\n            }\n        },\n        {\n            key: \"handleCandleStickBoxDataFormat\",\n            value: function(t, e, i) {\n                var a = this.w, s = \"boxPlot\" === a.config.chart.type || \"boxPlot\" === a.config.series[i].type, r = [], n = [], o = [], l = [], h = [];\n                if (\"array\" === t) if (s && 6 === e[i].data[0].length || !s && 5 === e[i].data[0].length) for(var c = 0; c < e[i].data.length; c++)r.push(e[i].data[c][1]), n.push(e[i].data[c][2]), s ? (o.push(e[i].data[c][3]), l.push(e[i].data[c][4]), h.push(e[i].data[c][5])) : (l.push(e[i].data[c][3]), h.push(e[i].data[c][4]));\n                else for(var d = 0; d < e[i].data.length; d++)Array.isArray(e[i].data[d][1]) && (r.push(e[i].data[d][1][0]), n.push(e[i].data[d][1][1]), s ? (o.push(e[i].data[d][1][2]), l.push(e[i].data[d][1][3]), h.push(e[i].data[d][1][4])) : (l.push(e[i].data[d][1][2]), h.push(e[i].data[d][1][3])));\n                else if (\"xy\" === t) for(var u = 0; u < e[i].data.length; u++)Array.isArray(e[i].data[u].y) && (r.push(e[i].data[u].y[0]), n.push(e[i].data[u].y[1]), s ? (o.push(e[i].data[u].y[2]), l.push(e[i].data[u].y[3]), h.push(e[i].data[u].y[4])) : (l.push(e[i].data[u].y[2]), h.push(e[i].data[u].y[3])));\n                return {\n                    o: r,\n                    h: n,\n                    m: o,\n                    l: l,\n                    c: h\n                };\n            }\n        },\n        {\n            key: \"parseDataAxisCharts\",\n            value: function(t) {\n                var e = this, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a = this.w.config, s = this.w.globals, r = new zi(i), n = a.labels.length > 0 ? a.labels.slice() : a.xaxis.categories.slice();\n                s.isRangeBar = \"rangeBar\" === a.chart.type && s.isBarHorizontal, s.hasXaxisGroups = \"category\" === a.xaxis.type && a.xaxis.group.groups.length > 0, s.hasXaxisGroups && (s.groups = a.xaxis.group.groups), t.forEach(function(t, e) {\n                    void 0 !== t.name ? s.seriesNames.push(t.name) : s.seriesNames.push(\"series-\" + parseInt(e + 1, 10));\n                }), this.coreUtils.setSeriesYAxisMappings();\n                var o = [], l = f(new Set(a.series.map(function(t) {\n                    return t.group;\n                })));\n                a.series.forEach(function(t, e) {\n                    var i = l.indexOf(t.group);\n                    o[i] || (o[i] = []), o[i].push(s.seriesNames[e]);\n                }), s.seriesGroups = o;\n                for(var h = function() {\n                    for(var t = 0; t < n.length; t++)if (\"string\" == typeof n[t]) {\n                        if (!r.isValidDate(n[t])) throw new Error(\"You have provided invalid Date format. Please provide a valid JavaScript Date\");\n                        e.twoDSeriesX.push(r.parseDate(n[t]));\n                    } else e.twoDSeriesX.push(n[t]);\n                }, c = 0; c < t.length; c++){\n                    if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[c].data) return void console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n                    if (\"rangeBar\" !== a.chart.type && \"rangeArea\" !== a.chart.type && \"rangeBar\" !== t[c].type && \"rangeArea\" !== t[c].type || (s.isRangeData = !0, this.handleRangeData(t, c)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, c) : this.isFormatXY() && this.handleFormatXY(t, c), \"candlestick\" !== a.chart.type && \"candlestick\" !== t[c].type && \"boxPlot\" !== a.chart.type && \"boxPlot\" !== t[c].type || this.handleCandleStickBoxData(t, c), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), s.seriesGoals = this.seriesGoals, c !== this.activeSeriesIndex || this.fallbackToCategory || (s.isXNumeric = !0);\n                    else {\n                        \"datetime\" === a.xaxis.type ? (s.isXNumeric = !0, h(), s.seriesX.push(this.twoDSeriesX)) : \"numeric\" === a.xaxis.type && (s.isXNumeric = !0, n.length > 0 && (this.twoDSeriesX = n, s.seriesX.push(this.twoDSeriesX))), s.labels.push(this.twoDSeriesX);\n                        var d = t[c].data.map(function(t) {\n                            return v.parseNumber(t);\n                        });\n                        s.series.push(d);\n                    }\n                    s.seriesZ.push(this.threeDSeries), void 0 !== t[c].color ? s.seriesColors.push(t[c].color) : s.seriesColors.push(void 0);\n                }\n                return this.w;\n            }\n        },\n        {\n            key: \"parseDataNonAxisCharts\",\n            value: function(t) {\n                var e = this.w.globals, i = this.w.config;\n                e.series = t.slice(), e.seriesNames = i.labels.slice();\n                for(var a = 0; a < e.series.length; a++)void 0 === e.seriesNames[a] && e.seriesNames.push(\"series-\" + (a + 1));\n                return this.w;\n            }\n        },\n        {\n            key: \"handleExternalLabelsData\",\n            value: function(t) {\n                var e = this.w.config, i = this.w.globals;\n                if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;\n                else if (e.labels.length > 0) i.labels = e.labels.slice();\n                else if (this.fallbackToCategory) {\n                    if (i.labels = i.labels[0], i.seriesRange.length && (i.seriesRange.map(function(t) {\n                        t.forEach(function(t) {\n                            i.labels.indexOf(t.x) < 0 && t.x && i.labels.push(t.x);\n                        });\n                    }), i.labels = Array.from(new Set(i.labels.map(JSON.stringify)), JSON.parse)), e.xaxis.convertedCatToNumeric) new Ni(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t);\n                } else this._generateExternalLabels(t);\n            }\n        },\n        {\n            key: \"_generateExternalLabels\",\n            value: function(t) {\n                var e = this.w.globals, i = this.w.config, a = [];\n                if (e.axisCharts) {\n                    if (e.series.length > 0) if (this.isFormatXY()) for(var s = i.series.map(function(t, e) {\n                        return t.data.filter(function(t, e, i) {\n                            return i.findIndex(function(e) {\n                                return e.x === t.x;\n                            }) === e;\n                        });\n                    }), r = s.reduce(function(t, e, i, a) {\n                        return a[t].length > e.length ? t : i;\n                    }, 0), n = 0; n < s[r].length; n++)a.push(n + 1);\n                    else for(var o = 0; o < e.series[e.maxValsInArrayIndex].length; o++)a.push(o + 1);\n                    e.seriesX = [];\n                    for(var l = 0; l < t.length; l++)e.seriesX.push(a);\n                    this.w.globals.isBarHorizontal || (e.isXNumeric = !0);\n                }\n                if (0 === a.length) {\n                    a = e.axisCharts ? [] : e.series.map(function(t, e) {\n                        return e + 1;\n                    });\n                    for(var h = 0; h < t.length; h++)e.seriesX.push(a);\n                }\n                e.labels = a, i.xaxis.convertedCatToNumeric && (e.categoryLabels = a.map(function(t) {\n                    return i.xaxis.labels.formatter(t);\n                })), e.noLabelsProvided = !0;\n            }\n        },\n        {\n            key: \"parseData\",\n            value: function(t) {\n                var e = this.w, i = e.config, a = e.globals;\n                if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a.axisCharts ? (this.parseDataAxisCharts(t), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t), i.chart.stacked) {\n                    var s = new Zi(this.ctx);\n                    a.series = s.setNullSeriesToZeroValues(a.series);\n                }\n                this.coreUtils.getSeriesTotals(), a.axisCharts && (a.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a.dataFormatXNumeric || a.isXNumeric && (\"numeric\" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);\n                for(var r = this.coreUtils.getCategoryLabels(a.labels), n = 0; n < r.length; n++)if (Array.isArray(r[n])) {\n                    a.isMultiLineX = !0;\n                    break;\n                }\n            }\n        },\n        {\n            key: \"excludeCollapsedSeriesInYAxis\",\n            value: function() {\n                var t = this.w, e = [];\n                t.globals.seriesYAxisMap.forEach(function(i, a) {\n                    var s = 0;\n                    i.forEach(function(e) {\n                        -1 !== t.globals.collapsedSeriesIndices.indexOf(e) && s++;\n                    }), s > 0 && s == i.length && e.push(a);\n                }), t.globals.ignoreYAxisIndexes = e.map(function(t) {\n                    return t;\n                });\n            }\n        }\n    ]), t;\n}(), Ji = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"svgStringToNode\",\n            value: function(t) {\n                return (new DOMParser).parseFromString(t, \"image/svg+xml\").documentElement;\n            }\n        },\n        {\n            key: \"scaleSvgNode\",\n            value: function(t, e) {\n                var i = parseFloat(t.getAttributeNS(null, \"width\")), a = parseFloat(t.getAttributeNS(null, \"height\"));\n                t.setAttributeNS(null, \"width\", i * e), t.setAttributeNS(null, \"height\", a * e), t.setAttributeNS(null, \"viewBox\", \"0 0 \" + i + \" \" + a);\n            }\n        },\n        {\n            key: \"getSvgString\",\n            value: function(t) {\n                var e = this;\n                return new Promise(function(i) {\n                    var a = e.w, s = t || a.config.chart.toolbar.export.scale || a.config.chart.toolbar.export.width / a.globals.svgWidth;\n                    s || (s = 1);\n                    var r = a.globals.svgWidth * s, n = a.globals.svgHeight * s, o = a.globals.dom.elWrap.cloneNode(!0);\n                    o.style.width = r + \"px\", o.style.height = n + \"px\";\n                    var l = (new XMLSerializer).serializeToString(o), h = '\\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\\n          version=\"1.1\"\\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\\n          class=\"apexcharts-svg\"\\n          xmlns:data=\"ApexChartsNS\"\\n          transform=\"translate(0, 0)\"\\n          width=\"'.concat(a.globals.svgWidth, 'px\" height=\"').concat(a.globals.svgHeight, 'px\">\\n          <foreignObject width=\"100%\" height=\"100%\">\\n            <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"width:').concat(r, \"px; height:\").concat(n, 'px;\">\\n            <style type=\"text/css\">\\n              .apexcharts-tooltip, .apexcharts-toolbar, .apexcharts-xaxistooltip, .apexcharts-yaxistooltip, .apexcharts-xcrosshairs, .apexcharts-ycrosshairs, .apexcharts-zoom-rect, .apexcharts-selection-rect {\\n                display: none;\\n              }\\n            </style>\\n              ').concat(l, \"\\n            </div>\\n          </foreignObject>\\n        </svg>\\n      \"), c = e.svgStringToNode(h);\n                    1 !== s && e.scaleSvgNode(c, s), e.convertImagesToBase64(c).then(function() {\n                        h = (new XMLSerializer).serializeToString(c), i(h.replace(/&nbsp;/g, \"&#160;\"));\n                    });\n                });\n            }\n        },\n        {\n            key: \"convertImagesToBase64\",\n            value: function(t) {\n                var e = this, i = t.getElementsByTagName(\"image\"), a = Array.from(i).map(function(t) {\n                    var i = t.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\");\n                    return i && !i.startsWith(\"data:\") ? e.getBase64FromUrl(i).then(function(e) {\n                        t.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", e);\n                    }).catch(function(t) {\n                        console.error(\"Error converting image to base64:\", t);\n                    }) : Promise.resolve();\n                });\n                return Promise.all(a);\n            }\n        },\n        {\n            key: \"getBase64FromUrl\",\n            value: function(t) {\n                return new Promise(function(e, i) {\n                    var a = new Image;\n                    a.crossOrigin = \"Anonymous\", a.onload = function() {\n                        var t = document.createElement(\"canvas\");\n                        t.width = a.width, t.height = a.height, t.getContext(\"2d\").drawImage(a, 0, 0), e(t.toDataURL());\n                    }, a.onerror = i, a.src = t;\n                });\n            }\n        },\n        {\n            key: \"svgUrl\",\n            value: function() {\n                var t = this;\n                return new Promise(function(e) {\n                    t.getSvgString().then(function(t) {\n                        var i = new Blob([\n                            t\n                        ], {\n                            type: \"image/svg+xml;charset=utf-8\"\n                        });\n                        e(URL.createObjectURL(i));\n                    });\n                });\n            }\n        },\n        {\n            key: \"dataURI\",\n            value: function(t) {\n                var e = this;\n                return new Promise(function(i) {\n                    var a = e.w, s = t ? t.scale || t.width / a.globals.svgWidth : 1, r = document.createElement(\"canvas\");\n                    r.width = a.globals.svgWidth * s, r.height = parseInt(a.globals.dom.elWrap.style.height, 10) * s;\n                    var n = \"transparent\" !== a.config.chart.background && a.config.chart.background ? a.config.chart.background : \"#fff\", o = r.getContext(\"2d\");\n                    o.fillStyle = n, o.fillRect(0, 0, r.width * s, r.height * s), e.getSvgString(s).then(function(t) {\n                        var e = \"data:image/svg+xml,\" + encodeURIComponent(t), a = new Image;\n                        a.crossOrigin = \"anonymous\", a.onload = function() {\n                            if (o.drawImage(a, 0, 0), r.msToBlob) {\n                                var t = r.msToBlob();\n                                i({\n                                    blob: t\n                                });\n                            } else {\n                                var e = r.toDataURL(\"image/png\");\n                                i({\n                                    imgURI: e\n                                });\n                            }\n                        }, a.src = e;\n                    });\n                });\n            }\n        },\n        {\n            key: \"exportToSVG\",\n            value: function() {\n                var t = this;\n                this.svgUrl().then(function(e) {\n                    t.triggerDownload(e, t.w.config.chart.toolbar.export.svg.filename, \".svg\");\n                });\n            }\n        },\n        {\n            key: \"exportToPng\",\n            value: function() {\n                var t = this, e = this.w.config.chart.toolbar.export.scale, i = this.w.config.chart.toolbar.export.width, a = e ? {\n                    scale: e\n                } : i ? {\n                    width: i\n                } : void 0;\n                this.dataURI(a).then(function(e) {\n                    var i = e.imgURI, a = e.blob;\n                    a ? navigator.msSaveOrOpenBlob(a, t.w.globals.chartID + \".png\") : t.triggerDownload(i, t.w.config.chart.toolbar.export.png.filename, \".png\");\n                });\n            }\n        },\n        {\n            key: \"exportToCSV\",\n            value: function(t) {\n                var e = this, i = t.series, a = t.fileName, s = t.columnDelimiter, r = void 0 === s ? \",\" : s, n = t.lineDelimiter, o = void 0 === n ? \"\\n\" : n, l = this.w;\n                i || (i = l.config.series);\n                var h = [], c = [], d = \"\", u = l.globals.series.map(function(t, e) {\n                    return -1 === l.globals.collapsedSeriesIndices.indexOf(e) ? t : [];\n                }), g = function(t) {\n                    return \"function\" == typeof l.config.chart.toolbar.export.csv.categoryFormatter ? l.config.chart.toolbar.export.csv.categoryFormatter(t) : \"datetime\" === l.config.xaxis.type && String(t).length >= 10 ? new Date(t).toDateString() : v.isNumber(t) ? t : t.split(r).join(\"\");\n                }, p = function(t) {\n                    return \"function\" == typeof l.config.chart.toolbar.export.csv.valueFormatter ? l.config.chart.toolbar.export.csv.valueFormatter(t) : t;\n                }, x = Math.max.apply(Math, f(i.map(function(t) {\n                    return t.data ? t.data.length : 0;\n                }))), b = new $i(this.ctx), m = new Ri(this.ctx), y = function(t) {\n                    var i = \"\";\n                    if (l.globals.axisCharts) {\n                        if (\"category\" === l.config.xaxis.type || l.config.xaxis.convertedCatToNumeric) if (l.globals.isBarHorizontal) {\n                            var a = l.globals.yLabelFormatters[0], s = new Zi(e.ctx).getActiveConfigSeriesIndex();\n                            i = a(l.globals.labels[t], {\n                                seriesIndex: s,\n                                dataPointIndex: t,\n                                w: l\n                            });\n                        } else i = m.getLabel(l.globals.labels, l.globals.timescaleLabels, 0, t).text;\n                        \"datetime\" === l.config.xaxis.type && (l.config.xaxis.categories.length ? i = l.config.xaxis.categories[t] : l.config.labels.length && (i = l.config.labels[t]));\n                    } else i = l.config.labels[t];\n                    return null === i ? \"nullvalue\" : (Array.isArray(i) && (i = i.join(\" \")), v.isNumber(i) ? i : i.split(r).join(\"\"));\n                }, w = function(t, e) {\n                    if (h.length && 0 === e && c.push(h.join(r)), t.data) {\n                        t.data = t.data.length && t.data || f(Array(x)).map(function() {\n                            return \"\";\n                        });\n                        for(var a = 0; a < t.data.length; a++){\n                            h = [];\n                            var s = y(a);\n                            if (\"nullvalue\" !== s) {\n                                if (s || (b.isFormatXY() ? s = i[e].data[a].x : b.isFormat2DArray() && (s = i[e].data[a] ? i[e].data[a][0] : \"\")), 0 === e) {\n                                    h.push(g(s));\n                                    for(var n = 0; n < l.globals.series.length; n++){\n                                        var o, d = b.isFormatXY() ? null === (o = i[n].data[a]) || void 0 === o ? void 0 : o.y : u[n][a];\n                                        h.push(p(d));\n                                    }\n                                }\n                                (\"candlestick\" === l.config.chart.type || t.type && \"candlestick\" === t.type) && (h.pop(), h.push(l.globals.seriesCandleO[e][a]), h.push(l.globals.seriesCandleH[e][a]), h.push(l.globals.seriesCandleL[e][a]), h.push(l.globals.seriesCandleC[e][a])), (\"boxPlot\" === l.config.chart.type || t.type && \"boxPlot\" === t.type) && (h.pop(), h.push(l.globals.seriesCandleO[e][a]), h.push(l.globals.seriesCandleH[e][a]), h.push(l.globals.seriesCandleM[e][a]), h.push(l.globals.seriesCandleL[e][a]), h.push(l.globals.seriesCandleC[e][a])), \"rangeBar\" === l.config.chart.type && (h.pop(), h.push(l.globals.seriesRangeStart[e][a]), h.push(l.globals.seriesRangeEnd[e][a])), h.length && c.push(h.join(r));\n                            }\n                        }\n                    }\n                };\n                h.push(l.config.chart.toolbar.export.csv.headerCategory), \"boxPlot\" === l.config.chart.type ? (h.push(\"minimum\"), h.push(\"q1\"), h.push(\"median\"), h.push(\"q3\"), h.push(\"maximum\")) : \"candlestick\" === l.config.chart.type ? (h.push(\"open\"), h.push(\"high\"), h.push(\"low\"), h.push(\"close\")) : \"rangeBar\" === l.config.chart.type ? (h.push(\"minimum\"), h.push(\"maximum\")) : i.map(function(t, e) {\n                    var i = (t.name ? t.name : \"series-\".concat(e)) + \"\";\n                    l.globals.axisCharts && h.push(i.split(r).join(\"\") ? i.split(r).join(\"\") : \"series-\".concat(e));\n                }), l.globals.axisCharts || (h.push(l.config.chart.toolbar.export.csv.headerValue), c.push(h.join(r))), l.globals.allSeriesHasEqualX || !l.globals.axisCharts || l.config.xaxis.categories.length || l.config.labels.length ? i.map(function(t, e) {\n                    l.globals.axisCharts ? w(t, e) : ((h = []).push(g(l.globals.labels[e])), h.push(p(u[e])), c.push(h.join(r)));\n                }) : function() {\n                    var t = new Set, e = {};\n                    i.forEach(function(a, s) {\n                        null == a || a.data.forEach(function(a) {\n                            var r, n;\n                            if (b.isFormatXY()) r = a.x, n = a.y;\n                            else {\n                                if (!b.isFormat2DArray()) return;\n                                r = a[0], n = a[1];\n                            }\n                            e[r] || (e[r] = Array(i.length).fill(\"\")), e[r][s] = p(n), t.add(r);\n                        });\n                    }), h.length && c.push(h.join(r)), Array.from(t).sort().forEach(function(t) {\n                        c.push([\n                            g(t),\n                            e[t].join(r)\n                        ]);\n                    });\n                }(), d += c.join(o), this.triggerDownload(\"data:text/csv; charset=utf-8,\" + encodeURIComponent(\"\\ufeff\" + d), a || l.config.chart.toolbar.export.csv.filename, \".csv\");\n            }\n        },\n        {\n            key: \"triggerDownload\",\n            value: function(t, e, i) {\n                var a = document.createElement(\"a\");\n                a.href = t, a.download = (e || this.w.globals.chartID) + i, document.body.appendChild(a), a.click(), document.body.removeChild(a);\n            }\n        }\n    ]), t;\n}(), Qi = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.elgrid = a, this.w = e.w;\n        var s = this.w;\n        this.axesUtils = new Ri(e), this.xaxisLabels = s.globals.labels.slice(), s.globals.timescaleLabels.length > 0 && !s.globals.isBarHorizontal && (this.xaxisLabels = s.globals.timescaleLabels.slice()), s.config.xaxis.overwriteCategories && (this.xaxisLabels = s.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], \"top\" === s.config.xaxis.position ? this.offY = 0 : this.offY = s.globals.gridHeight, this.offY = this.offY + s.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf(\"%\") > -1 ? this.xaxisBorderWidth = s.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s.config.xaxis.axisBorder.height, this.yaxis = s.config.yaxis[0];\n    }\n    return s(t, [\n        {\n            key: \"drawXaxis\",\n            value: function() {\n                var t = this.w, e = new Mi(this.ctx), i = e.group({\n                    class: \"apexcharts-xaxis\",\n                    transform: \"translate(\".concat(t.config.xaxis.offsetX, \", \").concat(t.config.xaxis.offsetY, \")\")\n                }), a = e.group({\n                    class: \"apexcharts-xaxis-texts-g\",\n                    transform: \"translate(\".concat(t.globals.translateXAxisX, \", \").concat(t.globals.translateXAxisY, \")\")\n                });\n                i.add(a);\n                for(var s = [], r = 0; r < this.xaxisLabels.length; r++)s.push(this.xaxisLabels[r]);\n                if (this.drawXAxisLabelAndGroup(!0, e, a, s, t.globals.isXNumeric, function(t, e) {\n                    return e;\n                }), t.globals.hasXaxisGroups) {\n                    var n = t.globals.groups;\n                    s = [];\n                    for(var o = 0; o < n.length; o++)s.push(n[o].title);\n                    var l = {};\n                    t.config.xaxis.group.style && (l.xaxisFontSize = t.config.xaxis.group.style.fontSize, l.xaxisFontFamily = t.config.xaxis.group.style.fontFamily, l.xaxisForeColors = t.config.xaxis.group.style.colors, l.fontWeight = t.config.xaxis.group.style.fontWeight, l.cssClass = t.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(!1, e, a, s, !1, function(t, e) {\n                        return n[t].cols * e;\n                    }, l);\n                }\n                if (void 0 !== t.config.xaxis.title.text) {\n                    var h = e.group({\n                        class: \"apexcharts-xaxis-title\"\n                    }), c = e.drawText({\n                        x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,\n                        y: this.offY + parseFloat(this.xaxisFontSize) + (\"bottom\" === t.config.xaxis.position ? t.globals.xAxisLabelsHeight : -t.globals.xAxisLabelsHeight - 10) + t.config.xaxis.title.offsetY,\n                        text: t.config.xaxis.title.text,\n                        textAnchor: \"middle\",\n                        fontSize: t.config.xaxis.title.style.fontSize,\n                        fontFamily: t.config.xaxis.title.style.fontFamily,\n                        fontWeight: t.config.xaxis.title.style.fontWeight,\n                        foreColor: t.config.xaxis.title.style.color,\n                        cssClass: \"apexcharts-xaxis-title-text \" + t.config.xaxis.title.style.cssClass\n                    });\n                    h.add(c), i.add(h);\n                }\n                if (t.config.xaxis.axisBorder.show) {\n                    var d = t.globals.barPadForNumericAxis, u = e.drawLine(t.globals.padHorizontal + t.config.xaxis.axisBorder.offsetX - d, this.offY, this.xaxisBorderWidth + d, this.offY, t.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n                    this.elgrid && this.elgrid.elGridBorders && t.config.grid.show ? this.elgrid.elGridBorders.add(u) : i.add(u);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"drawXAxisLabelAndGroup\",\n            value: function(t, e, i, a, s, r) {\n                var n, o = this, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h = [], c = [], d = this.w, u = l.xaxisFontSize || this.xaxisFontSize, g = l.xaxisFontFamily || this.xaxisFontFamily, p = l.xaxisForeColors || this.xaxisForeColors, f = l.fontWeight || d.config.xaxis.labels.style.fontWeight, x = l.cssClass || d.config.xaxis.labels.style.cssClass, b = d.globals.padHorizontal, m = a.length, v = \"category\" === d.config.xaxis.type ? d.globals.dataPoints : m;\n                if (0 === v && m > v && (v = m), s) {\n                    var y = Math.max(Number(d.config.xaxis.tickAmount) || 1, v > 1 ? v - 1 : v);\n                    n = d.globals.gridWidth / Math.min(y, m - 1), b = b + r(0, n) / 2 + d.config.xaxis.labels.offsetX;\n                } else n = d.globals.gridWidth / v, b = b + r(0, n) + d.config.xaxis.labels.offsetX;\n                for(var w = function(s) {\n                    var l = b - r(s, n) / 2 + d.config.xaxis.labels.offsetX;\n                    0 === s && 1 === m && n / 2 === b && 1 === v && (l = d.globals.gridWidth / 2);\n                    var y = o.axesUtils.getLabel(a, d.globals.timescaleLabels, l, s, h, u, t), w = 28;\n                    d.globals.rotateXLabels && t && (w = 22), d.config.xaxis.title.text && \"top\" === d.config.xaxis.position && (w += parseFloat(d.config.xaxis.title.style.fontSize) + 2), t || (w = w + parseFloat(u) + (d.globals.xAxisLabelsHeight - d.globals.xAxisGroupLabelsHeight) + (d.globals.rotateXLabels ? 10 : 0)), y = void 0 !== d.config.xaxis.tickAmount && \"dataPoints\" !== d.config.xaxis.tickAmount && \"datetime\" !== d.config.xaxis.type ? o.axesUtils.checkLabelBasedOnTickamount(s, y, m) : o.axesUtils.checkForOverflowingLabels(s, y, m, h, c);\n                    if (d.config.xaxis.labels.show) {\n                        var k = e.drawText({\n                            x: y.x,\n                            y: o.offY + d.config.xaxis.labels.offsetY + w - (\"top\" === d.config.xaxis.position ? d.globals.xAxisHeight + d.config.xaxis.axisTicks.height - 2 : 0),\n                            text: y.text,\n                            textAnchor: \"middle\",\n                            fontWeight: y.isBold ? 600 : f,\n                            fontSize: u,\n                            fontFamily: g,\n                            foreColor: Array.isArray(p) ? t && d.config.xaxis.convertedCatToNumeric ? p[d.globals.minX + s - 1] : p[s] : p,\n                            isPlainText: !1,\n                            cssClass: (t ? \"apexcharts-xaxis-label \" : \"apexcharts-xaxis-group-label \") + x\n                        });\n                        if (i.add(k), k.on(\"click\", function(t) {\n                            if (\"function\" == typeof d.config.chart.events.xAxisLabelClick) {\n                                var e = Object.assign({}, d, {\n                                    labelIndex: s\n                                });\n                                d.config.chart.events.xAxisLabelClick(t, o.ctx, e);\n                            }\n                        }), t) {\n                            var A = document.createElementNS(d.globals.SVGNS, \"title\");\n                            A.textContent = Array.isArray(y.text) ? y.text.join(\" \") : y.text, k.node.appendChild(A), \"\" !== y.text && (h.push(y.text), c.push(y));\n                        }\n                    }\n                    s < m - 1 && (b += r(s + 1, n));\n                }, k = 0; k <= m - 1; k++)w(k);\n            }\n        },\n        {\n            key: \"drawXaxisInversed\",\n            value: function(t) {\n                var e, i, a = this, s = this.w, r = new Mi(this.ctx), n = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0, o = r.group({\n                    class: \"apexcharts-yaxis apexcharts-xaxis-inversed\",\n                    rel: t\n                }), l = r.group({\n                    class: \"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g\",\n                    transform: \"translate(\" + n + \", 0)\"\n                });\n                o.add(l);\n                var h = [];\n                if (s.config.yaxis[t].show) for(var c = 0; c < this.xaxisLabels.length; c++)h.push(this.xaxisLabels[c]);\n                e = s.globals.gridHeight / h.length, i = -e / 2.2;\n                var d = s.globals.yLabelFormatters[0], u = s.config.yaxis[0].labels;\n                if (u.show) for(var g = function(n) {\n                    var o = void 0 === h[n] ? \"\" : h[n];\n                    o = d(o, {\n                        seriesIndex: t,\n                        dataPointIndex: n,\n                        w: s\n                    });\n                    var c = a.axesUtils.getYAxisForeColor(u.style.colors, t), g = 0;\n                    Array.isArray(o) && (g = o.length / 2 * parseInt(u.style.fontSize, 10));\n                    var p = u.offsetX - 15, f = \"end\";\n                    a.yaxis.opposite && (f = \"start\"), \"left\" === s.config.yaxis[0].labels.align ? (p = u.offsetX, f = \"start\") : \"center\" === s.config.yaxis[0].labels.align ? (p = u.offsetX, f = \"middle\") : \"right\" === s.config.yaxis[0].labels.align && (f = \"end\");\n                    var x = r.drawText({\n                        x: p,\n                        y: i + e + u.offsetY - g,\n                        text: o,\n                        textAnchor: f,\n                        foreColor: Array.isArray(c) ? c[n] : c,\n                        fontSize: u.style.fontSize,\n                        fontFamily: u.style.fontFamily,\n                        fontWeight: u.style.fontWeight,\n                        isPlainText: !1,\n                        cssClass: \"apexcharts-yaxis-label \" + u.style.cssClass,\n                        maxWidth: u.maxWidth\n                    });\n                    l.add(x), x.on(\"click\", function(t) {\n                        if (\"function\" == typeof s.config.chart.events.xAxisLabelClick) {\n                            var e = Object.assign({}, s, {\n                                labelIndex: n\n                            });\n                            s.config.chart.events.xAxisLabelClick(t, a.ctx, e);\n                        }\n                    });\n                    var b = document.createElementNS(s.globals.SVGNS, \"title\");\n                    if (b.textContent = Array.isArray(o) ? o.join(\" \") : o, x.node.appendChild(b), 0 !== s.config.yaxis[t].labels.rotate) {\n                        var m = r.rotateAroundCenter(x.node);\n                        x.node.setAttribute(\"transform\", \"rotate(\".concat(s.config.yaxis[t].labels.rotate, \" 0 \").concat(m.y, \")\"));\n                    }\n                    i += e;\n                }, p = 0; p <= h.length - 1; p++)g(p);\n                if (void 0 !== s.config.yaxis[0].title.text) {\n                    var f = r.group({\n                        class: \"apexcharts-yaxis-title apexcharts-xaxis-title-inversed\",\n                        transform: \"translate(\" + n + \", 0)\"\n                    }), x = r.drawText({\n                        x: s.config.yaxis[0].title.offsetX,\n                        y: s.globals.gridHeight / 2 + s.config.yaxis[0].title.offsetY,\n                        text: s.config.yaxis[0].title.text,\n                        textAnchor: \"middle\",\n                        foreColor: s.config.yaxis[0].title.style.color,\n                        fontSize: s.config.yaxis[0].title.style.fontSize,\n                        fontWeight: s.config.yaxis[0].title.style.fontWeight,\n                        fontFamily: s.config.yaxis[0].title.style.fontFamily,\n                        cssClass: \"apexcharts-yaxis-title-text \" + s.config.yaxis[0].title.style.cssClass\n                    });\n                    f.add(x), o.add(f);\n                }\n                var b = 0;\n                this.isCategoryBarHorizontal && s.config.yaxis[0].opposite && (b = s.globals.gridWidth);\n                var m = s.config.xaxis.axisBorder;\n                if (m.show) {\n                    var v = r.drawLine(s.globals.padHorizontal + m.offsetX + b, 1 + m.offsetY, s.globals.padHorizontal + m.offsetX + b, s.globals.gridHeight + m.offsetY, m.color, 0);\n                    this.elgrid && this.elgrid.elGridBorders && s.config.grid.show ? this.elgrid.elGridBorders.add(v) : o.add(v);\n                }\n                return s.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b, h.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, o), o;\n            }\n        },\n        {\n            key: \"drawXaxisTicks\",\n            value: function(t, e, i) {\n                var a = this.w, s = t;\n                if (!(t < 0 || t - 2 > a.globals.gridWidth)) {\n                    var r = this.offY + a.config.xaxis.axisTicks.offsetY;\n                    if (e = e + r + a.config.xaxis.axisTicks.height, \"top\" === a.config.xaxis.position && (e = r - a.config.xaxis.axisTicks.height), a.config.xaxis.axisTicks.show) {\n                        var n = new Mi(this.ctx).drawLine(t + a.config.xaxis.axisTicks.offsetX, r + a.config.xaxis.offsetY, s + a.config.xaxis.axisTicks.offsetX, e + a.config.xaxis.offsetY, a.config.xaxis.axisTicks.color);\n                        i.add(n), n.node.classList.add(\"apexcharts-xaxis-tick\");\n                    }\n                }\n            }\n        },\n        {\n            key: \"getXAxisTicksPositions\",\n            value: function() {\n                var t = this.w, e = [], i = this.xaxisLabels.length, a = t.globals.padHorizontal;\n                if (t.globals.timescaleLabels.length > 0) for(var s = 0; s < i; s++)a = this.xaxisLabels[s].position, e.push(a);\n                else for(var r = i, n = 0; n < r; n++){\n                    var o = r;\n                    t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (o -= 1), a += t.globals.gridWidth / o, e.push(a);\n                }\n                return e;\n            }\n        },\n        {\n            key: \"xAxisLabelCorrections\",\n            value: function() {\n                var t = this.w, e = new Mi(this.ctx), i = t.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g\"), a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)\"), s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-inversed text\"), r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-inversed-texts-g text tspan\");\n                if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for(var n = 0; n < a.length; n++){\n                    var o = e.rotateAroundCenter(a[n]);\n                    o.y = o.y - 1, o.x = o.x + 1, a[n].setAttribute(\"transform\", \"rotate(\".concat(t.config.xaxis.labels.rotate, \" \").concat(o.x, \" \").concat(o.y, \")\")), a[n].setAttribute(\"text-anchor\", \"end\");\n                    i.setAttribute(\"transform\", \"translate(0, \".concat(-10, \")\"));\n                    var l = a[n].childNodes;\n                    t.config.xaxis.labels.trim && Array.prototype.forEach.call(l, function(i) {\n                        e.placeTextWithEllipsis(i, i.textContent, t.globals.xAxisLabelsHeight - (\"bottom\" === t.config.legend.position ? 20 : 10));\n                    });\n                }\n                else !function() {\n                    for(var i = t.globals.gridWidth / (t.globals.labels.length + 1), s = 0; s < a.length; s++){\n                        var r = a[s].childNodes;\n                        t.config.xaxis.labels.trim && \"datetime\" !== t.config.xaxis.type && Array.prototype.forEach.call(r, function(t) {\n                            e.placeTextWithEllipsis(t, t.textContent, i);\n                        });\n                    }\n                }();\n                if (s.length > 0) {\n                    var h = s[s.length - 1].getBBox(), c = s[0].getBBox();\n                    h.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);\n                    for(var d = 0; d < r.length; d++)e.placeTextWithEllipsis(r[d], r[d].textContent, t.config.yaxis[0].labels.maxWidth - (t.config.yaxis[0].title.text ? 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) : 0) - 15);\n                }\n            }\n        }\n    ]), t;\n}(), Ki = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n        var a = this.w;\n        this.xaxisLabels = a.globals.labels.slice(), this.axesUtils = new Ri(e), this.isRangeBar = a.globals.seriesRange.length && a.globals.isBarHorizontal, a.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a.globals.timescaleLabels.slice());\n    }\n    return s(t, [\n        {\n            key: \"drawGridArea\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = this.w, i = new Mi(this.ctx);\n                t || (t = i.group({\n                    class: \"apexcharts-grid\"\n                }));\n                var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, \"transparent\"), s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, \"transparent\");\n                return t.add(s), t.add(a), t;\n            }\n        },\n        {\n            key: \"drawGrid\",\n            value: function() {\n                if (this.w.globals.axisCharts) {\n                    var t = this.renderGrid();\n                    return this.drawGridArea(t.el), t;\n                }\n                return null;\n            }\n        },\n        {\n            key: \"createGridMask\",\n            value: function() {\n                var t = this.w, e = t.globals, i = new Mi(this.ctx), a = Array.isArray(t.config.stroke.width) ? Math.max.apply(Math, f(t.config.stroke.width)) : t.config.stroke.width, s = function(t) {\n                    var i = document.createElementNS(e.SVGNS, \"clipPath\");\n                    return i.setAttribute(\"id\", t), i;\n                };\n                e.dom.elGridRectMask = s(\"gridRectMask\".concat(e.cuid)), e.dom.elGridRectBarMask = s(\"gridRectBarMask\".concat(e.cuid)), e.dom.elGridRectMarkerMask = s(\"gridRectMarkerMask\".concat(e.cuid)), e.dom.elForecastMask = s(\"forecastMask\".concat(e.cuid)), e.dom.elNonForecastMask = s(\"nonForecastMask\".concat(e.cuid));\n                var r = 0, n = 0;\n                ([\n                    \"bar\",\n                    \"rangeBar\",\n                    \"candlestick\",\n                    \"boxPlot\"\n                ].includes(t.config.chart.type) || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (r = Math.max(t.config.grid.padding.left, e.barPadForNumericAxis), n = Math.max(t.config.grid.padding.right, e.barPadForNumericAxis)), e.dom.elGridRect = i.drawRect(-a / 2 - 2, -a / 2 - 2, e.gridWidth + a + 4, e.gridHeight + a + 4, 0, \"#fff\"), e.dom.elGridRectBar = i.drawRect(-a / 2 - r - 2, -a / 2 - 2, e.gridWidth + a + n + r + 4, e.gridHeight + a + 4, 0, \"#fff\");\n                var o = t.globals.markers.largestSize;\n                e.dom.elGridRectMarker = i.drawRect(-o, -o, e.gridWidth + 2 * o, e.gridHeight + 2 * o, 0, \"#fff\"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectBarMask.appendChild(e.dom.elGridRectBar.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);\n                var l = e.dom.baseEl.querySelector(\"defs\");\n                l.appendChild(e.dom.elGridRectMask), l.appendChild(e.dom.elGridRectBarMask), l.appendChild(e.dom.elGridRectMarkerMask), l.appendChild(e.dom.elForecastMask), l.appendChild(e.dom.elNonForecastMask);\n            }\n        },\n        {\n            key: \"_drawGridLines\",\n            value: function(t) {\n                var e = t.i, i = t.x1, a = t.y1, s = t.x2, r = t.y2, n = t.xCount, o = t.parent, l = this.w;\n                if (!(0 === e && l.globals.skipFirstTimelinelabel || e === n - 1 && l.globals.skipLastTimelinelabel && !l.config.xaxis.labels.formatter || \"radar\" === l.config.chart.type)) {\n                    l.config.grid.xaxis.lines.show && this._drawGridLine({\n                        i: e,\n                        x1: i,\n                        y1: a,\n                        x2: s,\n                        y2: r,\n                        xCount: n,\n                        parent: o\n                    });\n                    var h = 0;\n                    if (l.globals.hasXaxisGroups && \"between\" === l.config.xaxis.tickPlacement) {\n                        var c = l.globals.groups;\n                        if (c) {\n                            for(var d = 0, u = 0; d < e && u < c.length; u++)d += c[u].cols;\n                            d === e && (h = .6 * l.globals.xAxisLabelsHeight);\n                        }\n                    }\n                    new Qi(this.ctx).drawXaxisTicks(i, h, l.globals.dom.elGraphical);\n                }\n            }\n        },\n        {\n            key: \"_drawGridLine\",\n            value: function(t) {\n                var e = t.i, i = t.x1, a = t.y1, s = t.x2, r = t.y2, n = t.xCount, o = t.parent, l = this.w, h = o.node.classList.contains(\"apexcharts-gridlines-horizontal\"), c = l.globals.barPadForNumericAxis, d = 0 === a && 0 === r || 0 === i && 0 === s || a === l.globals.gridHeight && r === l.globals.gridHeight || l.globals.isBarHorizontal && (0 === e || e === n - 1), u = new Mi(this).drawLine(i - (h ? c : 0), a, s + (h ? c : 0), r, l.config.grid.borderColor, l.config.grid.strokeDashArray);\n                u.node.classList.add(\"apexcharts-gridline\"), d && l.config.grid.show ? this.elGridBorders.add(u) : o.add(u);\n            }\n        },\n        {\n            key: \"_drawGridBandRect\",\n            value: function(t) {\n                var e = t.c, i = t.x1, a = t.y1, s = t.x2, r = t.y2, n = t.type, o = this.w, l = new Mi(this.ctx), h = o.globals.barPadForNumericAxis, c = o.config.grid[n].colors[e], d = l.drawRect(i - (\"row\" === n ? h : 0), a, s + (\"row\" === n ? 2 * h : 0), r, 0, c, o.config.grid[n].opacity);\n                this.elg.add(d), d.attr(\"clip-path\", \"url(#gridRectMask\".concat(o.globals.cuid, \")\")), d.node.classList.add(\"apexcharts-grid-\".concat(n));\n            }\n        },\n        {\n            key: \"_drawXYLines\",\n            value: function(t) {\n                var e = this, i = t.xCount, a = t.tickAmount, s = this.w;\n                if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {\n                    var r, n = s.globals.padHorizontal, o = s.globals.gridHeight;\n                    s.globals.timescaleLabels.length ? function(t) {\n                        for(var a = t.xC, s = t.x1, r = t.y1, n = t.x2, o = t.y2, l = 0; l < a; l++)s = e.xaxisLabels[l].position, n = e.xaxisLabels[l].position, e._drawGridLines({\n                            i: l,\n                            x1: s,\n                            y1: r,\n                            x2: n,\n                            y2: o,\n                            xCount: i,\n                            parent: e.elgridLinesV\n                        });\n                    }({\n                        xC: i,\n                        x1: n,\n                        y1: 0,\n                        x2: r,\n                        y2: o\n                    }) : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length), function(t) {\n                        for(var a = t.xC, r = t.x1, n = t.y1, o = t.x2, l = t.y2, h = 0; h < a + (s.globals.isXNumeric ? 0 : 1); h++)0 === h && 1 === a && 1 === s.globals.dataPoints && (o = r = s.globals.gridWidth / 2), e._drawGridLines({\n                            i: h,\n                            x1: r,\n                            y1: n,\n                            x2: o,\n                            y2: l,\n                            xCount: i,\n                            parent: e.elgridLinesV\n                        }), o = r += s.globals.gridWidth / (s.globals.isXNumeric ? a - 1 : a);\n                    }({\n                        xC: i,\n                        x1: n,\n                        y1: 0,\n                        x2: r,\n                        y2: o\n                    }));\n                }\n                if (s.config.grid.yaxis.lines.show) {\n                    var l = 0, h = 0, c = s.globals.gridWidth, d = a + 1;\n                    this.isRangeBar && (d = s.globals.labels.length);\n                    for(var u = 0; u < d + (this.isRangeBar ? 1 : 0); u++)this._drawGridLine({\n                        i: u,\n                        xCount: d + (this.isRangeBar ? 1 : 0),\n                        x1: 0,\n                        y1: l,\n                        x2: c,\n                        y2: h,\n                        parent: this.elgridLinesH\n                    }), h = l += s.globals.gridHeight / (this.isRangeBar ? d : a);\n                }\n            }\n        },\n        {\n            key: \"_drawInvertedXYLines\",\n            value: function(t) {\n                var e = t.xCount, i = this.w;\n                if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show) for(var a, s = i.globals.padHorizontal, r = i.globals.gridHeight, n = 0; n < e + 1; n++){\n                    i.config.grid.xaxis.lines.show && this._drawGridLine({\n                        i: n,\n                        xCount: e + 1,\n                        x1: s,\n                        y1: 0,\n                        x2: a,\n                        y2: r,\n                        parent: this.elgridLinesV\n                    }), new Qi(this.ctx).drawXaxisTicks(s, 0, i.globals.dom.elGraphical), a = s += i.globals.gridWidth / e;\n                }\n                if (i.config.grid.yaxis.lines.show) for(var o = 0, l = 0, h = i.globals.gridWidth, c = 0; c < i.globals.dataPoints + 1; c++)this._drawGridLine({\n                    i: c,\n                    xCount: i.globals.dataPoints + 1,\n                    x1: 0,\n                    y1: o,\n                    x2: h,\n                    y2: l,\n                    parent: this.elgridLinesH\n                }), l = o += i.globals.gridHeight / i.globals.dataPoints;\n            }\n        },\n        {\n            key: \"renderGrid\",\n            value: function() {\n                var t = this.w, e = t.globals, i = new Mi(this.ctx);\n                this.elg = i.group({\n                    class: \"apexcharts-grid\"\n                }), this.elgridLinesH = i.group({\n                    class: \"apexcharts-gridlines-horizontal\"\n                }), this.elgridLinesV = i.group({\n                    class: \"apexcharts-gridlines-vertical\"\n                }), this.elGridBorders = i.group({\n                    class: \"apexcharts-grid-borders\"\n                }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());\n                for(var a = 0; a < e.seriesYAxisMap.length && e.ignoreYAxisIndexes.includes(a);)a++;\n                a === e.seriesYAxisMap.length && (a = 0);\n                var s, r = e.yAxisScale[a].result.length - 1;\n                if (!e.isBarHorizontal || this.isRangeBar) {\n                    var n, o, l;\n                    if (s = this.xaxisLabels.length, this.isRangeBar) r = e.labels.length, t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (s = t.config.xaxis.tickAmount), (null === (n = e.yAxisScale) || void 0 === n || null === (o = n[a]) || void 0 === o || null === (l = o.result) || void 0 === l ? void 0 : l.length) > 0 && \"datetime\" !== t.config.xaxis.type && (s = e.yAxisScale[a].result.length - 1);\n                    this._drawXYLines({\n                        xCount: s,\n                        tickAmount: r\n                    });\n                } else s = r, r = e.xTickAmount, this._drawInvertedXYLines({\n                    xCount: s,\n                    tickAmount: r\n                });\n                return this.drawGridBands(s, r), {\n                    el: this.elg,\n                    elGridBorders: this.elGridBorders,\n                    xAxisTickWidth: e.gridWidth / s\n                };\n            }\n        },\n        {\n            key: \"drawGridBands\",\n            value: function(t, e) {\n                var i, a, s = this, r = this.w;\n                if ((null === (i = r.config.grid.row.colors) || void 0 === i ? void 0 : i.length) > 0 && function(t, i, a, n, o, l) {\n                    for(var h = 0, c = 0; h < i; h++, c++)c >= r.config.grid[t].colors.length && (c = 0), s._drawGridBandRect({\n                        c: c,\n                        x1: a,\n                        y1: n,\n                        x2: o,\n                        y2: l,\n                        type: t\n                    }), n += r.globals.gridHeight / e;\n                }(\"row\", e, 0, 0, r.globals.gridWidth, r.globals.gridHeight / e), (null === (a = r.config.grid.column.colors) || void 0 === a ? void 0 : a.length) > 0) {\n                    var n = r.globals.isBarHorizontal || \"on\" !== r.config.xaxis.tickPlacement || \"category\" !== r.config.xaxis.type && !r.config.xaxis.convertedCatToNumeric ? t : t - 1;\n                    r.globals.isXNumeric && (n = r.globals.xAxisScale.result.length - 1);\n                    for(var o = r.globals.padHorizontal, l = r.globals.padHorizontal + r.globals.gridWidth / n, h = r.globals.gridHeight, c = 0, d = 0; c < t; c++, d++){\n                        var u;\n                        if (d >= r.config.grid.column.colors.length && (d = 0), \"datetime\" === r.config.xaxis.type) o = this.xaxisLabels[c].position, l = ((null === (u = this.xaxisLabels[c + 1]) || void 0 === u ? void 0 : u.position) || r.globals.gridWidth) - this.xaxisLabels[c].position;\n                        this._drawGridBandRect({\n                            c: d,\n                            x1: o,\n                            y1: 0,\n                            x2: l,\n                            y2: h,\n                            type: \"column\"\n                        }), o += r.globals.gridWidth / n;\n                    }\n                }\n            }\n        }\n    ]), t;\n}(), ta = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.coreUtils = new Pi(this.ctx);\n    }\n    return s(t, [\n        {\n            key: \"niceScale\",\n            value: function(t, e) {\n                var i, a, s, r, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o = 1e-11, l = this.w, h = l.globals;\n                h.isBarHorizontal ? (i = l.config.xaxis, a = Math.max((h.svgWidth - 100) / 25, 2)) : (i = l.config.yaxis[n], a = Math.max((h.svgHeight - 100) / 15, 2)), v.isNumber(a) || (a = 10), s = void 0 !== i.min && null !== i.min, r = void 0 !== i.max && null !== i.min;\n                var c = void 0 !== i.stepSize && null !== i.stepSize, d = void 0 !== i.tickAmount && null !== i.tickAmount, u = d ? i.tickAmount : h.niceScaleDefaultTicks[Math.min(Math.round(a / 2), h.niceScaleDefaultTicks.length - 1)];\n                if (h.isMultipleYAxis && !d && h.multiAxisTickAmount > 0 && (u = h.multiAxisTickAmount, d = !0), u = \"dataPoints\" === u ? h.dataPoints - 1 : Math.abs(Math.round(u)), (t === Number.MIN_VALUE && 0 === e || !v.isNumber(t) && !v.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) && (t = v.isNumber(i.min) ? i.min : 0, e = v.isNumber(i.max) ? i.max : t + u, h.allSeriesCollapsed = !1), t > e) {\n                    console.warn(\"axis.min cannot be greater than axis.max: swapping min and max\");\n                    var g = e;\n                    e = t, t = g;\n                } else t === e && (t = 0 === t ? 0 : t - 1, e = 0 === e ? 2 : e + 1);\n                var p = [];\n                u < 1 && (u = 1);\n                var f = u, x = Math.abs(e - t);\n                !s && t > 0 && t / x < .15 && (t = 0, s = !0), !r && e < 0 && -e / x < .15 && (e = 0, r = !0);\n                var b = (x = Math.abs(e - t)) / f, m = b, y = Math.floor(Math.log10(m)), w = Math.pow(10, y), k = Math.ceil(m / w);\n                if (b = m = (k = h.niceScaleAllowedMagMsd[0 === h.yValueDecimal ? 0 : 1][k]) * w, h.isBarHorizontal && i.stepSize && \"datetime\" !== i.type ? (b = i.stepSize, c = !0) : c && (b = i.stepSize), c && i.forceNiceScale) {\n                    var A = Math.floor(Math.log10(b));\n                    b *= Math.pow(10, y - A);\n                }\n                if (s && r) {\n                    var C = x / f;\n                    if (d) if (c) if (0 != v.mod(x, b)) {\n                        var S = v.getGCD(b, C);\n                        b = C / S < 10 ? S : C;\n                    } else 0 == v.mod(b, C) ? b = C : (C = b, d = !1);\n                    else b = C;\n                    else if (c) 0 == v.mod(x, b) ? C = b : b = C;\n                    else if (0 == v.mod(x, b)) C = b;\n                    else {\n                        C = x / (f = Math.ceil(x / b));\n                        var L = v.getGCD(x, b);\n                        x / L < a && (C = L), b = C;\n                    }\n                    f = Math.round(x / b);\n                } else {\n                    if (s || r) {\n                        if (r) if (d) t = e - b * f;\n                        else {\n                            var M = t;\n                            t = b * Math.floor(t / b), Math.abs(e - t) / v.getGCD(x, b) > a && (t = e - b * u, t += b * Math.floor((M - t) / b));\n                        }\n                        else if (s) if (d) e = t + b * f;\n                        else {\n                            var P = e;\n                            e = b * Math.ceil(e / b), Math.abs(e - t) / v.getGCD(x, b) > a && (e = t + b * u, e += b * Math.ceil((P - e) / b));\n                        }\n                    } else if (h.isMultipleYAxis && d) {\n                        var I = b * Math.floor(t / b), T = I + b * f;\n                        T < e && (b *= 2), T = e, e = (t = I) + b * f, x = Math.abs(e - t), t > 0 && t < Math.abs(T - e) && (t = 0, e = b * f), e < 0 && -e < Math.abs(I - t) && (e = 0, t = -b * f);\n                    } else t = b * Math.floor(t / b), e = b * Math.ceil(e / b);\n                    x = Math.abs(e - t), b = v.getGCD(x, b), f = Math.round(x / b);\n                }\n                if (d || s || r || (f = Math.ceil((x - o) / (b + o))) > 16 && v.getPrimeFactors(f).length < 2 && f++, !d && i.forceNiceScale && 0 === h.yValueDecimal && f > x && (f = x, b = Math.round(x / f)), f > a && (!d && !c || i.forceNiceScale)) {\n                    var z = v.getPrimeFactors(f), X = z.length - 1, R = f;\n                    t: for(var E = 0; E < X; E++)for(var Y = 0; Y <= X - E; Y++){\n                        for(var H = Math.min(Y + E, X), O = R, F = 1, D = Y; D <= H; D++)F *= z[D];\n                        if ((O /= F) < a) {\n                            R = O;\n                            break t;\n                        }\n                    }\n                    b = R === f ? x : x / R, f = Math.round(x / b);\n                }\n                h.isMultipleYAxis && 0 == h.multiAxisTickAmount && h.ignoreYAxisIndexes.indexOf(n) < 0 && (h.multiAxisTickAmount = f);\n                var _ = t - b, N = b * o;\n                do {\n                    _ += b, p.push(v.stripNumber(_, 7));\n                }while (e - _ > N);\n                return {\n                    result: p,\n                    niceMin: p[0],\n                    niceMax: p[p.length - 1]\n                };\n            }\n        },\n        {\n            key: \"linearScale\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r = Math.abs(e - t), n = [];\n                if (t === e) return {\n                    result: n = [\n                        t\n                    ],\n                    niceMin: n[0],\n                    niceMax: n[n.length - 1]\n                };\n                \"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, r)) && (i = this.w.globals.dataPoints - 1), s || (s = r / i), s = Math.round(100 * (s + Number.EPSILON)) / 100, i === Number.MAX_VALUE && (i = 5, s = 1);\n                for(var o = t; i >= 0;)n.push(o), o = v.preciseAddition(o, s), i -= 1;\n                return {\n                    result: n,\n                    niceMin: n[0],\n                    niceMax: n[n.length - 1]\n                };\n            }\n        },\n        {\n            key: \"logarithmicScaleNice\",\n            value: function(t, e, i) {\n                e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n                for(var a = [], s = Math.ceil(Math.log(e) / Math.log(i) + 1), r = Math.floor(Math.log(t) / Math.log(i)); r < s; r++)a.push(Math.pow(i, r));\n                return {\n                    result: a,\n                    niceMin: a[0],\n                    niceMax: a[a.length - 1]\n                };\n            }\n        },\n        {\n            key: \"logarithmicScale\",\n            value: function(t, e, i) {\n                e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n                for(var a = [], s = Math.log(e) / Math.log(i), r = Math.log(t) / Math.log(i), n = s - r, o = Math.round(n), l = n / o, h = 0, c = r; h < o; h++, c += l)a.push(Math.pow(i, c));\n                return a.push(Math.pow(i, s)), {\n                    result: a,\n                    niceMin: t,\n                    niceMax: e\n                };\n            }\n        },\n        {\n            key: \"_adjustTicksForSmallRange\",\n            value: function(t, e, i) {\n                var a = t;\n                if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {\n                    var s = Number(this.w.config.yaxis[e].labels.formatter(1));\n                    v.isNumber(s) && 0 === this.w.globals.yValueDecimal && (a = Math.ceil(i));\n                }\n                return a < t ? a : t;\n            }\n        },\n        {\n            key: \"setYScaleForIndex\",\n            value: function(t, e, i) {\n                var a = this.w.globals, s = this.w.config, r = a.isBarHorizontal ? s.xaxis : s.yaxis[t];\n                void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);\n                var n = Math.abs(i - e);\n                r.logarithmic && n <= 5 && (a.invalidLogScale = !0), r.logarithmic && n > 5 ? (a.allSeriesCollapsed = !1, a.yAxisScale[t] = r.forceNiceScale ? this.logarithmicScaleNice(e, i, r.logBase) : this.logarithmicScale(e, i, r.logBase)) : i !== -Number.MAX_VALUE && v.isNumber(i) && e !== Number.MAX_VALUE && v.isNumber(e) ? (a.allSeriesCollapsed = !1, a.yAxisScale[t] = this.niceScale(e, i, t)) : a.yAxisScale[t] = this.niceScale(Number.MIN_VALUE, 0, t);\n            }\n        },\n        {\n            key: \"setXScale\",\n            value: function(t, e) {\n                var i = this.w, a = i.globals;\n                if (e !== -Number.MAX_VALUE && v.isNumber(e)) {\n                    var s = a.xTickAmount;\n                    a.xAxisScale = this.linearScale(t, e, s, 0, i.config.xaxis.stepSize);\n                } else a.xAxisScale = this.linearScale(0, 10, 10);\n                return a.xAxisScale;\n            }\n        },\n        {\n            key: \"scaleMultipleYAxes\",\n            value: function() {\n                var t = this, e = this.w.config, i = this.w.globals;\n                this.coreUtils.setSeriesYAxisMappings();\n                var a = i.seriesYAxisMap, s = i.minYArr, r = i.maxYArr;\n                i.allSeriesCollapsed = !0, i.barGroups = [], a.forEach(function(a, n) {\n                    var o = [];\n                    a.forEach(function(t) {\n                        var i, a = null === (i = e.series[t]) || void 0 === i ? void 0 : i.group;\n                        o.indexOf(a) < 0 && o.push(a);\n                    }), a.length > 0 ? function() {\n                        var l, h, c = Number.MAX_VALUE, d = -Number.MAX_VALUE, u = c, g = d;\n                        if (e.chart.stacked) !function() {\n                            var t = new Array(i.dataPoints).fill(0), s = [], r = [], p = [];\n                            o.forEach(function() {\n                                s.push(t.map(function() {\n                                    return Number.MIN_VALUE;\n                                })), r.push(t.map(function() {\n                                    return Number.MIN_VALUE;\n                                })), p.push(t.map(function() {\n                                    return Number.MIN_VALUE;\n                                }));\n                            });\n                            for(var f = function(t) {\n                                !l && e.series[a[t]].type && (l = e.series[a[t]].type);\n                                var c = a[t];\n                                h = e.series[c].group ? e.series[c].group : \"axis-\".concat(n), !(i.collapsedSeriesIndices.indexOf(c) < 0 && i.ancillaryCollapsedSeriesIndices.indexOf(c) < 0) || (i.allSeriesCollapsed = !1, o.forEach(function(t, a) {\n                                    if (e.series[c].group === t) for(var n = 0; n < i.series[c].length; n++){\n                                        var o = i.series[c][n];\n                                        o >= 0 ? r[a][n] += o : p[a][n] += o, s[a][n] += o, u = Math.min(u, o), g = Math.max(g, o);\n                                    }\n                                })), \"bar\" !== l && \"column\" !== l || i.barGroups.push(h);\n                            }, x = 0; x < a.length; x++)f(x);\n                            l || (l = e.chart.type), \"bar\" === l || \"column\" === l ? o.forEach(function(t, e) {\n                                c = Math.min(c, Math.min.apply(null, p[e])), d = Math.max(d, Math.max.apply(null, r[e]));\n                            }) : (o.forEach(function(t, e) {\n                                u = Math.min(u, Math.min.apply(null, s[e])), g = Math.max(g, Math.max.apply(null, s[e]));\n                            }), c = u, d = g), c === Number.MIN_VALUE && d === Number.MIN_VALUE && (d = -Number.MAX_VALUE);\n                        }();\n                        else for(var p = 0; p < a.length; p++){\n                            var f = a[p];\n                            c = Math.min(c, s[f]), d = Math.max(d, r[f]), !(i.collapsedSeriesIndices.indexOf(f) < 0 && i.ancillaryCollapsedSeriesIndices.indexOf(f) < 0) || (i.allSeriesCollapsed = !1);\n                        }\n                        void 0 !== e.yaxis[n].min && (c = \"function\" == typeof e.yaxis[n].min ? e.yaxis[n].min(c) : e.yaxis[n].min), void 0 !== e.yaxis[n].max && (d = \"function\" == typeof e.yaxis[n].max ? e.yaxis[n].max(d) : e.yaxis[n].max), i.barGroups = i.barGroups.filter(function(t, e, i) {\n                            return i.indexOf(t) === e;\n                        }), t.setYScaleForIndex(n, c, d), a.forEach(function(t) {\n                            s[t] = i.yAxisScale[n].niceMin, r[t] = i.yAxisScale[n].niceMax;\n                        });\n                    }() : t.setYScaleForIndex(n, 0, -Number.MAX_VALUE);\n                });\n            }\n        }\n    ]), t;\n}(), ea = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.scales = new ta(e);\n    }\n    return s(t, [\n        {\n            key: \"init\",\n            value: function() {\n                this.setYRange(), this.setXRange(), this.setZRange();\n            }\n        },\n        {\n            key: \"getMinYMaxY\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s = this.w.config, r = this.w.globals, n = -Number.MAX_VALUE, o = Number.MIN_VALUE;\n                null === a && (a = t + 1);\n                var l = r.series, h = l, c = l;\n                \"candlestick\" === s.chart.type ? (h = r.seriesCandleL, c = r.seriesCandleH) : \"boxPlot\" === s.chart.type ? (h = r.seriesCandleO, c = r.seriesCandleC) : r.isRangeData && (h = r.seriesRangeStart, c = r.seriesRangeEnd);\n                var d = !1;\n                if (r.seriesX.length >= a) {\n                    var u, g = null === (u = r.brushSource) || void 0 === u ? void 0 : u.w.config.chart.brush;\n                    (s.chart.zoom.enabled && s.chart.zoom.autoScaleYaxis || null != g && g.enabled && null != g && g.autoScaleYaxis) && (d = !0);\n                }\n                for(var p = t; p < a; p++){\n                    r.dataPoints = Math.max(r.dataPoints, l[p].length);\n                    var f = s.series[p].type;\n                    r.categoryLabels.length && (r.dataPoints = r.categoryLabels.filter(function(t) {\n                        return void 0 !== t;\n                    }).length), r.labels.length && \"datetime\" !== s.xaxis.type && 0 !== r.series.reduce(function(t, e) {\n                        return t + e.length;\n                    }, 0) && (r.dataPoints = Math.max(r.dataPoints, r.labels.length));\n                    var x = 0, b = l[p].length - 1;\n                    if (d) {\n                        if (s.xaxis.min) for(; x < b && r.seriesX[p][x] < s.xaxis.min; x++);\n                        if (s.xaxis.max) for(; b > x && r.seriesX[p][b] > s.xaxis.max; b--);\n                    }\n                    for(var m = x; m <= b && m < r.series[p].length; m++){\n                        var y = l[p][m];\n                        if (null !== y && v.isNumber(y)) {\n                            var w, k, A, C;\n                            switch(void 0 !== (null === (w = c[p]) || void 0 === w ? void 0 : w[m]) && (n = Math.max(n, c[p][m]), e = Math.min(e, c[p][m])), void 0 !== (null === (k = h[p]) || void 0 === k ? void 0 : k[m]) && (e = Math.min(e, h[p][m]), i = Math.max(i, h[p][m])), f){\n                                case \"candlestick\":\n                                    void 0 !== r.seriesCandleC[p][m] && (n = Math.max(n, r.seriesCandleH[p][m]), e = Math.min(e, r.seriesCandleL[p][m]));\n                                    break;\n                                case \"boxPlot\":\n                                    void 0 !== r.seriesCandleC[p][m] && (n = Math.max(n, r.seriesCandleC[p][m]), e = Math.min(e, r.seriesCandleO[p][m]));\n                            }\n                            f && \"candlestick\" !== f && \"boxPlot\" !== f && \"rangeArea\" !== f && \"rangeBar\" !== f && (n = Math.max(n, r.series[p][m]), e = Math.min(e, r.series[p][m])), r.seriesGoals[p] && r.seriesGoals[p][m] && Array.isArray(r.seriesGoals[p][m]) && r.seriesGoals[p][m].forEach(function(t) {\n                                n = Math.max(n, t.value), e = Math.min(e, t.value);\n                            }), i = n, y = v.noExponents(y), v.isFloat(y) && (r.yValueDecimal = Math.max(r.yValueDecimal, y.toString().split(\".\")[1].length)), o > (null === (A = h[p]) || void 0 === A ? void 0 : A[m]) && (null === (C = h[p]) || void 0 === C ? void 0 : C[m]) < 0 && (o = h[p][m]);\n                        } else r.hasNullValues = !0;\n                    }\n                    \"bar\" !== f && \"column\" !== f || (o < 0 && n < 0 && (n = 0, i = Math.max(i, 0)), o === Number.MIN_VALUE && (o = 0, e = Math.min(e, 0)));\n                }\n                return \"rangeBar\" === s.chart.type && r.seriesRangeStart.length && r.isBarHorizontal && (o = e), \"bar\" === s.chart.type && (o < 0 && n < 0 && (n = 0), o === Number.MIN_VALUE && (o = 0)), {\n                    minY: o,\n                    maxY: n,\n                    lowestY: e,\n                    highestY: i\n                };\n            }\n        },\n        {\n            key: \"setYRange\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config;\n                t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;\n                var i, a = Number.MAX_VALUE;\n                if (t.isMultipleYAxis) {\n                    a = Number.MAX_VALUE;\n                    for(var s = 0; s < t.series.length; s++)i = this.getMinYMaxY(s), t.minYArr[s] = i.lowestY, t.maxYArr[s] = i.highestY, a = Math.min(a, i.lowestY);\n                }\n                if (i = this.getMinYMaxY(0, a, null, t.series.length), \"bar\" === e.chart.type ? (t.minY = i.minY, t.maxY = i.maxY) : (t.minY = i.lowestY, t.maxY = i.highestY), a = i.lowestY, e.chart.stacked && this._setStackedMinMax(), \"line\" === e.chart.type || \"area\" === e.chart.type || \"scatter\" === e.chart.type || \"candlestick\" === e.chart.type || \"boxPlot\" === e.chart.type || \"rangeBar\" === e.chart.type && !t.isBarHorizontal ? t.minY === Number.MIN_VALUE && a !== -Number.MAX_VALUE && a !== t.maxY && (t.minY = a) : t.minY = t.minY !== Number.MIN_VALUE ? Math.min(i.minY, t.minY) : i.minY, e.yaxis.forEach(function(e, i) {\n                    void 0 !== e.max && (\"number\" == typeof e.max ? t.maxYArr[i] = e.max : \"function\" == typeof e.max && (t.maxYArr[i] = e.max(t.isMultipleYAxis ? t.maxYArr[i] : t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && (\"number\" == typeof e.min ? t.minYArr[i] = e.min : \"function\" == typeof e.min && (t.minYArr[i] = e.min(t.isMultipleYAxis ? t.minYArr[i] === Number.MIN_VALUE ? 0 : t.minYArr[i] : t.minY)), t.minY = t.minYArr[i]);\n                }), t.isBarHorizontal) {\n                    [\n                        \"min\",\n                        \"max\"\n                    ].forEach(function(i) {\n                        void 0 !== e.xaxis[i] && \"number\" == typeof e.xaxis[i] && (\"min\" === i ? t.minY = e.xaxis[i] : t.maxY = e.xaxis[i]);\n                    });\n                }\n                return t.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t.minY = a) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.minY, t.maxYArr[0] = t.maxY), t.barGroups = [], t.lineGroups = [], t.areaGroups = [], e.series.forEach(function(i) {\n                    switch(i.type || e.chart.type){\n                        case \"bar\":\n                        case \"column\":\n                            t.barGroups.push(i.group);\n                            break;\n                        case \"line\":\n                            t.lineGroups.push(i.group);\n                            break;\n                        case \"area\":\n                            t.areaGroups.push(i.group);\n                    }\n                }), t.barGroups = t.barGroups.filter(function(t, e, i) {\n                    return i.indexOf(t) === e;\n                }), t.lineGroups = t.lineGroups.filter(function(t, e, i) {\n                    return i.indexOf(t) === e;\n                }), t.areaGroups = t.areaGroups.filter(function(t, e, i) {\n                    return i.indexOf(t) === e;\n                }), {\n                    minY: t.minY,\n                    maxY: t.maxY,\n                    minYArr: t.minYArr,\n                    maxYArr: t.maxYArr,\n                    yAxisScale: t.yAxisScale\n                };\n            }\n        },\n        {\n            key: \"setXRange\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config, i = \"numeric\" === e.xaxis.type || \"datetime\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;\n                if (t.isXNumeric && function() {\n                    for(var e = 0; e < t.series.length; e++)if (t.labels[e]) for(var i = 0; i < t.labels[e].length; i++)null !== t.labels[e][i] && v.isNumber(t.labels[e][i]) && (t.maxX = Math.max(t.maxX, t.labels[e][i]), t.initialMaxX = Math.max(t.maxX, t.labels[e][i]), t.minX = Math.min(t.minX, t.labels[e][i]), t.initialMinX = Math.min(t.minX, t.labels[e][i]));\n                }(), t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {\n                    var a = 10;\n                    if (void 0 === e.xaxis.tickAmount) a = Math.round(t.svgWidth / 150), \"numeric\" === e.xaxis.type && t.dataPoints < 30 && (a = t.dataPoints - 1), a > t.dataPoints && 0 !== t.dataPoints && (a = t.dataPoints - 1);\n                    else if (\"dataPoints\" === e.xaxis.tickAmount) {\n                        if (t.series.length > 1 && (a = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric) {\n                            var s = Math.round(t.maxX - t.minX);\n                            s < 30 && (a = s - 1);\n                        }\n                    } else a = e.xaxis.tickAmount;\n                    if (t.xTickAmount = a, void 0 !== e.xaxis.max && \"number\" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && \"number\" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE) if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {\n                        for(var r = [], n = t.minX - 1; n < t.maxX; n++)r.push(n + 1);\n                        t.xAxisScale = {\n                            result: r,\n                            niceMin: r[0],\n                            niceMax: r[r.length - 1]\n                        };\n                    } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);\n                    else t.xAxisScale = this.scales.linearScale(0, a, a, 0, e.xaxis.stepSize), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, a - 1, 0, e.xaxis.stepSize), t.seriesX = t.labels.slice());\n                    i && (t.labels = t.xAxisScale.result.slice());\n                }\n                return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {\n                    minX: t.minX,\n                    maxX: t.maxX\n                };\n            }\n        },\n        {\n            key: \"setZRange\",\n            value: function() {\n                var t = this.w.globals;\n                if (t.isDataXYZ) {\n                    for(var e = 0; e < t.series.length; e++)if (void 0 !== t.seriesZ[e]) for(var i = 0; i < t.seriesZ[e].length; i++)null !== t.seriesZ[e][i] && v.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));\n                }\n            }\n        },\n        {\n            key: \"_handleSingleDataPoint\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config;\n                if (t.minX === t.maxX) {\n                    var i = new zi(this.ctx);\n                    if (\"datetime\" === e.xaxis.type) {\n                        var a = i.getDate(t.minX);\n                        e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() - 2) : a.setDate(a.getDate() - 2), t.minX = new Date(a).getTime();\n                        var s = i.getDate(t.maxX);\n                        e.xaxis.labels.datetimeUTC ? s.setUTCDate(s.getUTCDate() + 2) : s.setDate(s.getDate() + 2), t.maxX = new Date(s).getTime();\n                    } else (\"numeric\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX);\n                }\n            }\n        },\n        {\n            key: \"_getMinXDiff\",\n            value: function() {\n                var t = this.w.globals;\n                t.isXNumeric && t.seriesX.forEach(function(e, i) {\n                    if (e.length) {\n                        1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);\n                        var a = e.slice();\n                        a.sort(function(t, e) {\n                            return t - e;\n                        }), a.forEach(function(e, i) {\n                            if (i > 0) {\n                                var s = e - a[i - 1];\n                                s > 0 && (t.minXDiff = Math.min(s, t.minXDiff));\n                            }\n                        }), 1 !== t.dataPoints && t.minXDiff !== Number.MAX_VALUE || (t.minXDiff = .5);\n                    }\n                });\n            }\n        },\n        {\n            key: \"_setStackedMinMax\",\n            value: function() {\n                var t = this, e = this.w.globals;\n                if (e.series.length) {\n                    var i = e.seriesGroups;\n                    i.length || (i = [\n                        this.w.globals.seriesNames.map(function(t) {\n                            return t;\n                        })\n                    ]);\n                    var a = {}, s = {};\n                    i.forEach(function(i) {\n                        a[i] = [], s[i] = [], t.w.config.series.map(function(t, a) {\n                            return i.indexOf(e.seriesNames[a]) > -1 ? a : null;\n                        }).filter(function(t) {\n                            return null !== t;\n                        }).forEach(function(r) {\n                            for(var n = 0; n < e.series[e.maxValsInArrayIndex].length; n++){\n                                var o, l, h, c;\n                                void 0 === a[i][n] && (a[i][n] = 0, s[i][n] = 0), (t.w.config.chart.stacked && !e.comboCharts || t.w.config.chart.stacked && e.comboCharts && (!t.w.config.chart.stackOnlyBar || \"bar\" === (null === (o = t.w.config.series) || void 0 === o || null === (l = o[r]) || void 0 === l ? void 0 : l.type) || \"column\" === (null === (h = t.w.config.series) || void 0 === h || null === (c = h[r]) || void 0 === c ? void 0 : c.type))) && null !== e.series[r][n] && v.isNumber(e.series[r][n]) && (e.series[r][n] > 0 ? a[i][n] += parseFloat(e.series[r][n]) + 1e-4 : s[i][n] += parseFloat(e.series[r][n]));\n                            }\n                        });\n                    }), Object.entries(a).forEach(function(t) {\n                        var i = p(t, 1)[0];\n                        a[i].forEach(function(t, r) {\n                            e.maxY = Math.max(e.maxY, a[i][r]), e.minY = Math.min(e.minY, s[i][r]);\n                        });\n                    });\n                }\n            }\n        }\n    ]), t;\n}(), ia = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.elgrid = a, this.w = e.w;\n        var s = this.w;\n        this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.axisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xAxisoffX = \"bottom\" === s.config.xaxis.position ? s.globals.gridHeight : 0, this.drawnLabels = [], this.axesUtils = new Ri(e);\n    }\n    return s(t, [\n        {\n            key: \"drawYaxis\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = e.config.yaxis[t].labels.style, s = a.fontSize, r = a.fontFamily, n = a.fontWeight, o = i.group({\n                    class: \"apexcharts-yaxis\",\n                    rel: t,\n                    transform: \"translate(\".concat(e.globals.translateYAxisX[t], \", 0)\")\n                });\n                if (this.axesUtils.isYAxisHidden(t)) return o;\n                var l = i.group({\n                    class: \"apexcharts-yaxis-texts-g\"\n                });\n                o.add(l);\n                var h = e.globals.yAxisScale[t].result.length - 1, c = e.globals.gridHeight / h, d = e.globals.yLabelFormatters[t], u = this.axesUtils.checkForReversedLabels(t, e.globals.yAxisScale[t].result.slice());\n                if (e.config.yaxis[t].labels.show) {\n                    var g = e.globals.translateY + e.config.yaxis[t].labels.offsetY;\n                    e.globals.isBarHorizontal ? g = 0 : \"heatmap\" === e.config.chart.type && (g -= c / 2), g += parseInt(s, 10) / 3;\n                    for(var p = h; p >= 0; p--){\n                        var f = d(u[p], p, e), x = e.config.yaxis[t].labels.padding;\n                        e.config.yaxis[t].opposite && 0 !== e.config.yaxis.length && (x *= -1);\n                        var b = this.getTextAnchor(e.config.yaxis[t].labels.align, e.config.yaxis[t].opposite), m = this.axesUtils.getYAxisForeColor(a.colors, t), y = Array.isArray(m) ? m[p] : m, w = v.listToArray(e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-label tspan\"))).map(function(t) {\n                            return t.textContent;\n                        }), k = i.drawText({\n                            x: x,\n                            y: g,\n                            text: w.includes(f) && !e.config.yaxis[t].labels.showDuplicates ? \"\" : f,\n                            textAnchor: b,\n                            fontSize: s,\n                            fontFamily: r,\n                            fontWeight: n,\n                            maxWidth: e.config.yaxis[t].labels.maxWidth,\n                            foreColor: y,\n                            isPlainText: !1,\n                            cssClass: \"apexcharts-yaxis-label \".concat(a.cssClass)\n                        });\n                        l.add(k), this.addTooltip(k, f), 0 !== e.config.yaxis[t].labels.rotate && this.rotateLabel(i, k, firstLabel, e.config.yaxis[t].labels.rotate), g += c;\n                    }\n                }\n                return this.addYAxisTitle(i, o, t), this.addAxisBorder(i, o, t, h, c), o;\n            }\n        },\n        {\n            key: \"getTextAnchor\",\n            value: function(t, e) {\n                return \"left\" === t ? \"start\" : \"center\" === t ? \"middle\" : \"right\" === t ? \"end\" : e ? \"start\" : \"end\";\n            }\n        },\n        {\n            key: \"addTooltip\",\n            value: function(t, e) {\n                var i = document.createElementNS(this.w.globals.SVGNS, \"title\");\n                i.textContent = Array.isArray(e) ? e.join(\" \") : e, t.node.appendChild(i);\n            }\n        },\n        {\n            key: \"rotateLabel\",\n            value: function(t, e, i, a) {\n                var s = t.rotateAroundCenter(i.node), r = t.rotateAroundCenter(e.node);\n                e.node.setAttribute(\"transform\", \"rotate(\".concat(a, \" \").concat(s.x, \" \").concat(r.y, \")\"));\n            }\n        },\n        {\n            key: \"addYAxisTitle\",\n            value: function(t, e, i) {\n                var a = this.w;\n                if (void 0 !== a.config.yaxis[i].title.text) {\n                    var s = t.group({\n                        class: \"apexcharts-yaxis-title\"\n                    }), r = a.config.yaxis[i].opposite ? a.globals.translateYAxisX[i] : 0, n = t.drawText({\n                        x: r,\n                        y: a.globals.gridHeight / 2 + a.globals.translateY + a.config.yaxis[i].title.offsetY,\n                        text: a.config.yaxis[i].title.text,\n                        textAnchor: \"end\",\n                        foreColor: a.config.yaxis[i].title.style.color,\n                        fontSize: a.config.yaxis[i].title.style.fontSize,\n                        fontWeight: a.config.yaxis[i].title.style.fontWeight,\n                        fontFamily: a.config.yaxis[i].title.style.fontFamily,\n                        cssClass: \"apexcharts-yaxis-title-text \".concat(a.config.yaxis[i].title.style.cssClass)\n                    });\n                    s.add(n), e.add(s);\n                }\n            }\n        },\n        {\n            key: \"addAxisBorder\",\n            value: function(t, e, i, a, s) {\n                var r = this.w, n = r.config.yaxis[i].axisBorder, o = 31 + n.offsetX;\n                if (r.config.yaxis[i].opposite && (o = -31 - n.offsetX), n.show) {\n                    var l = t.drawLine(o, r.globals.translateY + n.offsetY - 2, o, r.globals.gridHeight + r.globals.translateY + n.offsetY + 2, n.color, 0, n.width);\n                    e.add(l);\n                }\n                r.config.yaxis[i].axisTicks.show && this.axesUtils.drawYAxisTicks(o, a, n, r.config.yaxis[i].axisTicks, i, s, e);\n            }\n        },\n        {\n            key: \"drawYaxisInversed\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = i.group({\n                    class: \"apexcharts-xaxis apexcharts-yaxis-inversed\"\n                }), s = i.group({\n                    class: \"apexcharts-xaxis-texts-g\",\n                    transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n                });\n                a.add(s);\n                var r = e.globals.yAxisScale[t].result.length - 1, n = e.globals.gridWidth / r + .1, o = n + e.config.xaxis.labels.offsetX, l = e.globals.xLabelFormatter, h = this.axesUtils.checkForReversedLabels(t, e.globals.yAxisScale[t].result.slice()), c = e.globals.timescaleLabels;\n                if (c.length > 0 && (this.xaxisLabels = c.slice(), r = (h = c.slice()).length), e.config.xaxis.labels.show) for(var d = c.length ? 0 : r; c.length ? d < c.length : d >= 0; c.length ? d++ : d--){\n                    var u = l(h[d], d, e), g = e.globals.gridWidth + e.globals.padHorizontal - (o - n + e.config.xaxis.labels.offsetX);\n                    if (c.length) {\n                        var p = this.axesUtils.getLabel(h, c, g, d, this.drawnLabels, this.xaxisFontSize);\n                        g = p.x, u = p.text, this.drawnLabels.push(p.text), 0 === d && e.globals.skipFirstTimelinelabel && (u = \"\"), d === h.length - 1 && e.globals.skipLastTimelinelabel && (u = \"\");\n                    }\n                    var f = i.drawText({\n                        x: g,\n                        y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - (\"top\" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),\n                        text: u,\n                        textAnchor: \"middle\",\n                        foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,\n                        fontSize: this.xaxisFontSize,\n                        fontFamily: this.xaxisFontFamily,\n                        fontWeight: e.config.xaxis.labels.style.fontWeight,\n                        isPlainText: !1,\n                        cssClass: \"apexcharts-xaxis-label \".concat(e.config.xaxis.labels.style.cssClass)\n                    });\n                    s.add(f), f.tspan(u), this.addTooltip(f, u), o += n;\n                }\n                return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;\n            }\n        },\n        {\n            key: \"inversedYAxisBorder\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = e.config.xaxis.axisBorder;\n                if (a.show) {\n                    var s = 0;\n                    \"bar\" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);\n                    var r = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);\n                    this.elgrid && this.elgrid.elGridBorders && e.config.grid.show ? this.elgrid.elGridBorders.add(r) : t.add(r);\n                }\n            }\n        },\n        {\n            key: \"inversedYAxisTitleText\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx);\n                if (void 0 !== e.config.xaxis.title.text) {\n                    var a = i.group({\n                        class: \"apexcharts-xaxis-title apexcharts-yaxis-title-inversed\"\n                    }), s = i.drawText({\n                        x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,\n                        y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,\n                        text: e.config.xaxis.title.text,\n                        textAnchor: \"middle\",\n                        fontSize: e.config.xaxis.title.style.fontSize,\n                        fontFamily: e.config.xaxis.title.style.fontFamily,\n                        fontWeight: e.config.xaxis.title.style.fontWeight,\n                        foreColor: e.config.xaxis.title.style.color,\n                        cssClass: \"apexcharts-xaxis-title-text \".concat(e.config.xaxis.title.style.cssClass)\n                    });\n                    a.add(s), t.add(a);\n                }\n            }\n        },\n        {\n            key: \"yAxisTitleRotate\",\n            value: function(t, e) {\n                var i = this.w, a = new Mi(this.ctx), s = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-texts-g\")), r = s ? s.getBoundingClientRect() : {\n                    width: 0,\n                    height: 0\n                }, n = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-title text\")), o = n ? n.getBoundingClientRect() : {\n                    width: 0,\n                    height: 0\n                };\n                if (n) {\n                    var l = this.xPaddingForYAxisTitle(t, r, o, e);\n                    n.setAttribute(\"x\", l.xPos - (e ? 10 : 0));\n                    var h = a.rotateAroundCenter(n);\n                    n.setAttribute(\"transform\", \"rotate(\".concat(e ? -1 * i.config.yaxis[t].title.rotate : i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\"));\n                }\n            }\n        },\n        {\n            key: \"xPaddingForYAxisTitle\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = 0, n = 10;\n                return void 0 === s.config.yaxis[t].title.text || t < 0 ? {\n                    xPos: r,\n                    padd: 0\n                } : (a ? r = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + n / 2 : (r = -1 * e.width + s.config.yaxis[t].title.offsetX + n / 2 + i.width / 2, s.globals.isBarHorizontal && (n = 25, r = -1 * e.width - s.config.yaxis[t].title.offsetX - n)), {\n                    xPos: r,\n                    padd: n\n                });\n            }\n        },\n        {\n            key: \"setYAxisXPosition\",\n            value: function(t, e) {\n                var i = this.w, a = 0, s = 0, r = 18, n = 1;\n                i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.forEach(function(o, l) {\n                    var h = i.globals.ignoreYAxisIndexes.includes(l) || !o.show || o.floating || 0 === t[l].width, c = t[l].width + e[l].width;\n                    o.opposite ? i.globals.isBarHorizontal ? (s = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = s - o.labels.offsetX) : (s = i.globals.gridWidth + i.globals.translateX + n, h || (n += c + 20), i.globals.translateYAxisX[l] = s - o.labels.offsetX + 20) : (a = i.globals.translateX - r, h || (r += c + 20), i.globals.translateYAxisX[l] = a + o.labels.offsetX);\n                });\n            }\n        },\n        {\n            key: \"setYAxisTextAlignments\",\n            value: function() {\n                var t = this.w;\n                v.listToArray(t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-yaxis\")).forEach(function(e, i) {\n                    var a = t.config.yaxis[i];\n                    if (a && !a.floating && void 0 !== a.labels.align) {\n                        var s = t.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-texts-g\")), r = v.listToArray(t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-label\"))), n = s.getBoundingClientRect();\n                        r.forEach(function(t) {\n                            t.setAttribute(\"text-anchor\", a.labels.align);\n                        }), \"left\" !== a.labels.align || a.opposite ? \"center\" === a.labels.align ? s.setAttribute(\"transform\", \"translate(\".concat(n.width / 2 * (a.opposite ? 1 : -1), \", 0)\")) : \"right\" === a.labels.align && a.opposite && s.setAttribute(\"transform\", \"translate(\".concat(n.width, \", 0)\")) : s.setAttribute(\"transform\", \"translate(-\".concat(n.width, \", 0)\"));\n                    }\n                });\n            }\n        }\n    ]), t;\n}(), aa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.documentEvent = v.bind(this.documentEvent, this);\n    }\n    return s(t, [\n        {\n            key: \"addEventListener\",\n            value: function(t, e) {\n                var i = this.w;\n                i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [\n                    e\n                ];\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function(t, e) {\n                var i = this.w;\n                if (i.globals.events.hasOwnProperty(t)) {\n                    var a = i.globals.events[t].indexOf(e);\n                    -1 !== a && i.globals.events[t].splice(a, 1);\n                }\n            }\n        },\n        {\n            key: \"fireEvent\",\n            value: function(t, e) {\n                var i = this.w;\n                if (i.globals.events.hasOwnProperty(t)) {\n                    e && e.length || (e = []);\n                    for(var a = i.globals.events[t], s = a.length, r = 0; r < s; r++)a[r].apply(null, e);\n                }\n            }\n        },\n        {\n            key: \"setupEventHandlers\",\n            value: function() {\n                var t = this, e = this.w, i = this.ctx, a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);\n                this.ctx.eventList.forEach(function(t) {\n                    a.addEventListener(t, function(t) {\n                        var a = null === t.target.getAttribute(\"i\") && -1 !== e.globals.capturedSeriesIndex ? e.globals.capturedSeriesIndex : t.target.getAttribute(\"i\"), s = null === t.target.getAttribute(\"j\") && -1 !== e.globals.capturedDataPointIndex ? e.globals.capturedDataPointIndex : t.target.getAttribute(\"j\"), r = Object.assign({}, e, {\n                            seriesIndex: e.globals.axisCharts ? a : 0,\n                            dataPointIndex: s\n                        });\n                        \"mousemove\" === t.type || \"touchmove\" === t.type ? \"function\" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, i, r) : \"mouseleave\" === t.type || \"touchleave\" === t.type ? \"function\" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(t, i, r) : (\"mouseup\" === t.type && 1 === t.which || \"touchend\" === t.type) && (\"function\" == typeof e.config.chart.events.click && e.config.chart.events.click(t, i, r), i.ctx.events.fireEvent(\"click\", [\n                            t,\n                            i,\n                            r\n                        ]));\n                    }, {\n                        capture: !1,\n                        passive: !0\n                    });\n                }), this.ctx.eventList.forEach(function(i) {\n                    e.globals.dom.baseEl.addEventListener(i, t.documentEvent, {\n                        passive: !0\n                    });\n                }), this.ctx.core.setupBrushHandler();\n            }\n        },\n        {\n            key: \"documentEvent\",\n            value: function(t) {\n                var e = this.w, i = t.target.className;\n                if (\"click\" === t.type) {\n                    var a = e.globals.dom.baseEl.querySelector(\".apexcharts-menu\");\n                    a && a.classList.contains(\"apexcharts-menu-open\") && \"apexcharts-menu-icon\" !== i && a.classList.remove(\"apexcharts-menu-open\");\n                }\n                e.globals.clientX = \"touchmove\" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = \"touchmove\" === t.type ? t.touches[0].clientY : t.clientY;\n            }\n        }\n    ]), t;\n}(), sa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"setCurrentLocaleValues\",\n            value: function(t) {\n                var e = this.w.config.chart.locales;\n                window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));\n                var i = e.filter(function(e) {\n                    return e.name === t;\n                })[0];\n                if (!i) throw new Error(\"Wrong locale name provided. Please make sure you set the correct locale name in options\");\n                var a = v.extend(Hi, i);\n                this.w.globals.locale = a.options;\n            }\n        }\n    ]), t;\n}(), ra = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"drawAxis\",\n            value: function(t, e) {\n                var i, a, s = this, r = this.w.globals, n = this.w.config, o = new Qi(this.ctx, e), l = new ia(this.ctx, e);\n                r.axisCharts && \"radar\" !== t && (r.isBarHorizontal ? (a = l.drawYaxisInversed(0), i = o.drawXaxisInversed(0), r.dom.elGraphical.add(i), r.dom.elGraphical.add(a)) : (i = o.drawXaxis(), r.dom.elGraphical.add(i), n.yaxis.map(function(t, e) {\n                    if (-1 === r.ignoreYAxisIndexes.indexOf(e) && (a = l.drawYaxis(e), r.dom.Paper.add(a), \"back\" === s.w.config.grid.position)) {\n                        var i = r.dom.Paper.children()[1];\n                        i.remove(), r.dom.Paper.add(i);\n                    }\n                })));\n            }\n        }\n    ]), t;\n}(), na = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"drawXCrosshairs\",\n            value: function() {\n                var t = this.w, e = new Mi(this.ctx), i = new Li(this.ctx), a = t.config.xaxis.crosshairs.fill.gradient, s = t.config.xaxis.crosshairs.dropShadow, r = t.config.xaxis.crosshairs.fill.type, n = a.colorFrom, o = a.colorTo, l = a.opacityFrom, h = a.opacityTo, c = a.stops, d = s.enabled, u = s.left, g = s.top, p = s.blur, f = s.color, x = s.opacity, b = t.config.xaxis.crosshairs.fill.color;\n                if (t.config.xaxis.crosshairs.show) {\n                    \"gradient\" === r && (b = e.drawGradient(\"vertical\", n, o, l, h, null, c, null));\n                    var m = e.drawRect();\n                    1 === t.config.xaxis.crosshairs.width && (m = e.drawLine());\n                    var y = t.globals.gridHeight;\n                    (!v.isNumber(y) || y < 0) && (y = 0);\n                    var w = t.config.xaxis.crosshairs.width;\n                    (!v.isNumber(w) || w < 0) && (w = 0), m.attr({\n                        class: \"apexcharts-xcrosshairs\",\n                        x: 0,\n                        y: 0,\n                        y2: y,\n                        width: w,\n                        height: y,\n                        fill: b,\n                        filter: \"none\",\n                        \"fill-opacity\": t.config.xaxis.crosshairs.opacity,\n                        stroke: t.config.xaxis.crosshairs.stroke.color,\n                        \"stroke-width\": t.config.xaxis.crosshairs.stroke.width,\n                        \"stroke-dasharray\": t.config.xaxis.crosshairs.stroke.dashArray\n                    }), d && (m = i.dropShadow(m, {\n                        left: u,\n                        top: g,\n                        blur: p,\n                        color: f,\n                        opacity: x\n                    })), t.globals.dom.elGraphical.add(m);\n                }\n            }\n        },\n        {\n            key: \"drawYCrosshairs\",\n            value: function() {\n                var t = this.w, e = new Mi(this.ctx), i = t.config.yaxis[0].crosshairs, a = t.globals.barPadForNumericAxis;\n                if (t.config.yaxis[0].crosshairs.show) {\n                    var s = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);\n                    s.attr({\n                        class: \"apexcharts-ycrosshairs\"\n                    }), t.globals.dom.elGraphical.add(s);\n                }\n                var r = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, 0, 0);\n                r.attr({\n                    class: \"apexcharts-ycrosshairs-hidden\"\n                }), t.globals.dom.elGraphical.add(r);\n            }\n        }\n    ]), t;\n}(), oa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"checkResponsiveConfig\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.config;\n                if (0 !== a.responsive.length) {\n                    var s = a.responsive.slice();\n                    s.sort(function(t, e) {\n                        return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;\n                    }).reverse();\n                    var r = new Wi({}), n = function() {\n                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a = s[0].breakpoint, n = window.innerWidth > 0 ? window.innerWidth : screen.width;\n                        if (n > a) {\n                            var o = v.clone(i.globals.initialConfig);\n                            o.series = v.clone(i.config.series);\n                            var l = Pi.extendArrayProps(r, o, i);\n                            t = v.extend(l, t), t = v.extend(i.config, t), e.overrideResponsiveOptions(t);\n                        } else for(var h = 0; h < s.length; h++)n < s[h].breakpoint && (t = Pi.extendArrayProps(r, s[h].options, i), t = v.extend(i.config, t), e.overrideResponsiveOptions(t));\n                    };\n                    if (t) {\n                        var o = Pi.extendArrayProps(r, t, i);\n                        o = v.extend(i.config, o), n(o = v.extend(o, t));\n                    } else n({});\n                }\n            }\n        },\n        {\n            key: \"overrideResponsiveOptions\",\n            value: function(t) {\n                var e = new Wi(t).init({\n                    responsiveOverride: !0\n                });\n                this.w.config = e;\n            }\n        }\n    ]), t;\n}(), la = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.colors = [], this.isColorFn = !1, this.isHeatmapDistributed = this.checkHeatmapDistributed(), this.isBarDistributed = this.checkBarDistributed();\n    }\n    return s(t, [\n        {\n            key: \"checkHeatmapDistributed\",\n            value: function() {\n                var t = this.w.config, e = t.chart, i = t.plotOptions;\n                return \"treemap\" === e.type && i.treemap && i.treemap.distributed || \"heatmap\" === e.type && i.heatmap && i.heatmap.distributed;\n            }\n        },\n        {\n            key: \"checkBarDistributed\",\n            value: function() {\n                var t = this.w.config, e = t.chart, i = t.plotOptions;\n                return i.bar && i.bar.distributed && (\"bar\" === e.type || \"rangeBar\" === e.type);\n            }\n        },\n        {\n            key: \"init\",\n            value: function() {\n                this.setDefaultColors();\n            }\n        },\n        {\n            key: \"setDefaultColors\",\n            value: function() {\n                var t = this.w, e = new v;\n                t.globals.dom.elWrap.classList.add(\"apexcharts-theme-\".concat(t.config.theme.mode || \"light\"));\n                var i = f(t.config.colors || t.config.fill.colors || []);\n                t.globals.colors = this.getColors(i), this.applySeriesColors(t.globals.seriesColors, t.globals.colors), t.config.theme.monochrome.enabled && (t.globals.colors = this.getMonochromeColors(t.config.theme.monochrome, t.globals.series, e));\n                var a = t.globals.colors.slice();\n                this.pushExtraColors(t.globals.colors), this.applyColorTypes([\n                    \"fill\",\n                    \"stroke\"\n                ], a), this.applyDataLabelsColors(a), this.applyRadarPolygonsColors(), this.applyMarkersColors(a);\n            }\n        },\n        {\n            key: \"getColors\",\n            value: function(t) {\n                var e = this, i = this.w;\n                return t && 0 !== t.length ? Array.isArray(t) && t.length > 0 && \"function\" == typeof t[0] ? (this.isColorFn = !0, i.config.series.map(function(a, s) {\n                    var r = t[s] || t[0];\n                    return \"function\" == typeof r ? r({\n                        value: i.globals.axisCharts ? i.globals.series[s][0] || 0 : i.globals.series[s],\n                        seriesIndex: s,\n                        dataPointIndex: s,\n                        w: e.w\n                    }) : r;\n                })) : t : this.predefined();\n            }\n        },\n        {\n            key: \"applySeriesColors\",\n            value: function(t, e) {\n                t.forEach(function(t, i) {\n                    t && (e[i] = t);\n                });\n            }\n        },\n        {\n            key: \"getMonochromeColors\",\n            value: function(t, e, i) {\n                var a = t.color, s = t.shadeIntensity, r = t.shadeTo, n = this.isBarDistributed || this.isHeatmapDistributed ? e[0].length * e.length : e.length, o = 1 / (n / s), l = 0;\n                return Array.from({\n                    length: n\n                }, function() {\n                    var t = \"dark\" === r ? i.shadeColor(-1 * l, a) : i.shadeColor(l, a);\n                    return l += o, t;\n                });\n            }\n        },\n        {\n            key: \"applyColorTypes\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                t.forEach(function(t) {\n                    a.globals[t].colors = void 0 === a.config[t].colors ? i.isColorFn ? a.config.colors : e : a.config[t].colors.slice(), i.pushExtraColors(a.globals[t].colors);\n                });\n            }\n        },\n        {\n            key: \"applyDataLabelsColors\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.dataLabels.style.colors = void 0 === e.config.dataLabels.style.colors ? t : e.config.dataLabels.style.colors.slice(), this.pushExtraColors(e.globals.dataLabels.style.colors, 50);\n            }\n        },\n        {\n            key: \"applyRadarPolygonsColors\",\n            value: function() {\n                var t = this.w;\n                t.globals.radarPolygons.fill.colors = void 0 === t.config.plotOptions.radar.polygons.fill.colors ? [\n                    \"dark\" === t.config.theme.mode ? \"#343A3F\" : \"none\"\n                ] : t.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(t.globals.radarPolygons.fill.colors, 20);\n            }\n        },\n        {\n            key: \"applyMarkersColors\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.markers.colors = void 0 === e.config.markers.colors ? t : e.config.markers.colors.slice(), this.pushExtraColors(e.globals.markers.colors);\n            }\n        },\n        {\n            key: \"pushExtraColors\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = this.w, s = e || a.globals.series.length;\n                if (null === i && (i = this.isBarDistributed || this.isHeatmapDistributed || \"heatmap\" === a.config.chart.type && a.config.plotOptions.heatmap && a.config.plotOptions.heatmap.colorScale.inverse), i && a.globals.series.length && (s = a.globals.series[a.globals.maxValsInArrayIndex].length * a.globals.series.length), t.length < s) for(var r = s - t.length, n = 0; n < r; n++)t.push(t[n]);\n            }\n        },\n        {\n            key: \"updateThemeOptions\",\n            value: function(t) {\n                t.chart = t.chart || {}, t.tooltip = t.tooltip || {};\n                var e = t.theme.mode, i = \"dark\" === e ? \"palette4\" : \"light\" === e ? \"palette1\" : t.theme.palette || \"palette1\", a = \"dark\" === e ? \"#f6f7f8\" : \"light\" === e ? \"#373d3f\" : t.chart.foreColor || \"#373d3f\";\n                return t.tooltip.theme = e || \"light\", t.chart.foreColor = a, t.theme.palette = i, t;\n            }\n        },\n        {\n            key: \"predefined\",\n            value: function() {\n                var t = {\n                    palette1: [\n                        \"#008FFB\",\n                        \"#00E396\",\n                        \"#FEB019\",\n                        \"#FF4560\",\n                        \"#775DD0\"\n                    ],\n                    palette2: [\n                        \"#3f51b5\",\n                        \"#03a9f4\",\n                        \"#4caf50\",\n                        \"#f9ce1d\",\n                        \"#FF9800\"\n                    ],\n                    palette3: [\n                        \"#33b2df\",\n                        \"#546E7A\",\n                        \"#d4526e\",\n                        \"#13d8aa\",\n                        \"#A5978B\"\n                    ],\n                    palette4: [\n                        \"#4ecdc4\",\n                        \"#c7f464\",\n                        \"#81D4FA\",\n                        \"#fd6a6a\",\n                        \"#546E7A\"\n                    ],\n                    palette5: [\n                        \"#2b908f\",\n                        \"#f9a3a4\",\n                        \"#90ee7e\",\n                        \"#fa4443\",\n                        \"#69d2e7\"\n                    ],\n                    palette6: [\n                        \"#449DD1\",\n                        \"#F86624\",\n                        \"#EA3546\",\n                        \"#662E9B\",\n                        \"#C5D86D\"\n                    ],\n                    palette7: [\n                        \"#D7263D\",\n                        \"#1B998B\",\n                        \"#2E294E\",\n                        \"#F46036\",\n                        \"#E2C044\"\n                    ],\n                    palette8: [\n                        \"#662E9B\",\n                        \"#F86624\",\n                        \"#F9C80E\",\n                        \"#EA3546\",\n                        \"#43BCCD\"\n                    ],\n                    palette9: [\n                        \"#5C4742\",\n                        \"#A5978B\",\n                        \"#8D5B4C\",\n                        \"#5A2A27\",\n                        \"#C4BBAF\"\n                    ],\n                    palette10: [\n                        \"#A300D6\",\n                        \"#7D02EB\",\n                        \"#5653FE\",\n                        \"#2983FF\",\n                        \"#00B1F2\"\n                    ],\n                    default: [\n                        \"#008FFB\",\n                        \"#00E396\",\n                        \"#FEB019\",\n                        \"#FF4560\",\n                        \"#775DD0\"\n                    ]\n                };\n                return t[this.w.config.theme.palette] || t.default;\n            }\n        }\n    ]), t;\n}(), ha = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function() {\n                this.drawTitleSubtitle(\"title\"), this.drawTitleSubtitle(\"subtitle\");\n            }\n        },\n        {\n            key: \"drawTitleSubtitle\",\n            value: function(t) {\n                var e = this.w, i = \"title\" === t ? e.config.title : e.config.subtitle, a = e.globals.svgWidth / 2, s = i.offsetY, r = \"middle\";\n                if (\"left\" === i.align ? (a = 10, r = \"start\") : \"right\" === i.align && (a = e.globals.svgWidth - 10, r = \"end\"), a += i.offsetX, s = s + parseInt(i.style.fontSize, 10) + i.margin / 2, void 0 !== i.text) {\n                    var n = new Mi(this.ctx).drawText({\n                        x: a,\n                        y: s,\n                        text: i.text,\n                        textAnchor: r,\n                        fontSize: i.style.fontSize,\n                        fontFamily: i.style.fontFamily,\n                        fontWeight: i.style.fontWeight,\n                        foreColor: i.style.color,\n                        opacity: 1\n                    });\n                    n.node.setAttribute(\"class\", \"apexcharts-\".concat(t, \"-text\")), e.globals.dom.Paper.add(n);\n                }\n            }\n        }\n    ]), t;\n}(), ca = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"getTitleSubtitleCoords\",\n            value: function(t) {\n                var e = this.w, i = 0, a = 0, s = \"title\" === t ? e.config.title.floating : e.config.subtitle.floating, r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(t, \"-text\"));\n                if (null !== r && !s) {\n                    var n = r.getBoundingClientRect();\n                    i = n.width, a = e.globals.axisCharts ? n.height + 5 : n.height;\n                }\n                return {\n                    width: i,\n                    height: a\n                };\n            }\n        },\n        {\n            key: \"getLegendsRect\",\n            value: function() {\n                var t = this.w, e = t.globals.dom.elLegendWrap;\n                t.config.legend.height || \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || (e.style.maxHeight = t.globals.svgHeight / 2 + \"px\");\n                var i = Object.assign({}, v.getBoundingClientRect(e));\n                return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {\n                    x: i.x,\n                    y: i.y,\n                    height: i.height,\n                    width: 0 === i.height ? 0 : i.width\n                } : this.dCtx.lgRect = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0\n                }, \"left\" !== t.config.legend.position && \"right\" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), this.dCtx.lgRect;\n            }\n        },\n        {\n            key: \"getDatalabelsRect\",\n            value: function() {\n                var t = this, e = this.w, i = [];\n                e.config.series.forEach(function(s, r) {\n                    s.data.forEach(function(s, n) {\n                        var o;\n                        o = e.globals.series[r][n], a = e.config.dataLabels.formatter(o, {\n                            ctx: t.dCtx.ctx,\n                            seriesIndex: r,\n                            dataPointIndex: n,\n                            w: e\n                        }), i.push(a);\n                    });\n                });\n                var a = v.getLargestStringFromArr(i), s = new Mi(this.dCtx.ctx), r = e.config.dataLabels.style, n = s.getTextRects(a, parseInt(r.fontSize), r.fontFamily);\n                return {\n                    width: 1.05 * n.width,\n                    height: n.height\n                };\n            }\n        },\n        {\n            key: \"getLargestStringFromMultiArr\",\n            value: function(t, e) {\n                var i = t;\n                if (this.w.globals.isMultiLineX) {\n                    var a = e.map(function(t, e) {\n                        return Array.isArray(t) ? t.length : 1;\n                    }), s = Math.max.apply(Math, f(a));\n                    i = e[a.indexOf(s)];\n                }\n                return i;\n            }\n        }\n    ]), t;\n}(), da = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"getxAxisLabelsCoords\",\n            value: function() {\n                var t, e = this.w, i = e.globals.labels.slice();\n                if (e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {\n                    var a = this.getxAxisTimeScaleLabelsCoords();\n                    t = {\n                        width: a.width,\n                        height: a.height\n                    }, e.globals.rotateXLabels = !1;\n                } else {\n                    this.dCtx.lgWidthForSideLegends = \"left\" !== e.config.legend.position && \"right\" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;\n                    var s = e.globals.xLabelFormatter, r = v.getLargestStringFromArr(i), n = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, i);\n                    e.globals.isBarHorizontal && (n = r = e.globals.yAxisScale[0].result.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    }, 0));\n                    var o = new Xi(this.dCtx.ctx), l = r;\n                    r = o.xLabelFormat(s, r, l, {\n                        i: void 0,\n                        dateFormatter: new zi(this.dCtx.ctx).formatDate,\n                        w: e\n                    }), n = o.xLabelFormat(s, n, l, {\n                        i: void 0,\n                        dateFormatter: new zi(this.dCtx.ctx).formatDate,\n                        w: e\n                    }), (e.config.xaxis.convertedCatToNumeric && void 0 === r || \"\" === String(r).trim()) && (n = r = \"1\");\n                    var h = new Mi(this.dCtx.ctx), c = h.getTextRects(r, e.config.xaxis.labels.style.fontSize), d = c;\n                    if (r !== n && (d = h.getTextRects(n, e.config.xaxis.labels.style.fontSize)), (t = {\n                        width: c.width >= d.width ? c.width : d.width,\n                        height: c.height >= d.height ? c.height : d.height\n                    }).width * i.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {\n                        if (!e.globals.isBarHorizontal) {\n                            e.globals.rotateXLabels = !0;\n                            var u = function(t) {\n                                return h.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(e.config.xaxis.labels.rotate, \" 0 0)\"), !1);\n                            };\n                            c = u(r), r !== n && (d = u(n)), t.height = (c.height > d.height ? c.height : d.height) / 1.5, t.width = c.width > d.width ? c.width : d.width;\n                        }\n                    } else e.globals.rotateXLabels = !1;\n                }\n                return e.config.xaxis.labels.show || (t = {\n                    width: 0,\n                    height: 0\n                }), {\n                    width: t.width,\n                    height: t.height\n                };\n            }\n        },\n        {\n            key: \"getxAxisGroupLabelsCoords\",\n            value: function() {\n                var t, e = this.w;\n                if (!e.globals.hasXaxisGroups) return {\n                    width: 0,\n                    height: 0\n                };\n                var i, a = (null === (t = e.config.xaxis.group.style) || void 0 === t ? void 0 : t.fontSize) || e.config.xaxis.labels.style.fontSize, s = e.globals.groups.map(function(t) {\n                    return t.title;\n                }), r = v.getLargestStringFromArr(s), n = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, s), o = new Mi(this.dCtx.ctx), l = o.getTextRects(r, a), h = l;\n                return r !== n && (h = o.getTextRects(n, a)), i = {\n                    width: l.width >= h.width ? l.width : h.width,\n                    height: l.height >= h.height ? l.height : h.height\n                }, e.config.xaxis.labels.show || (i = {\n                    width: 0,\n                    height: 0\n                }), {\n                    width: i.width,\n                    height: i.height\n                };\n            }\n        },\n        {\n            key: \"getxAxisTitleCoords\",\n            value: function() {\n                var t = this.w, e = 0, i = 0;\n                if (void 0 !== t.config.xaxis.title.text) {\n                    var a = new Mi(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);\n                    e = a.width, i = a.height;\n                }\n                return {\n                    width: e,\n                    height: i\n                };\n            }\n        },\n        {\n            key: \"getxAxisTimeScaleLabelsCoords\",\n            value: function() {\n                var t, e = this.w;\n                this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();\n                var i = this.dCtx.timescaleLabels.map(function(t) {\n                    return t.value;\n                }), a = i.reduce(function(t, e) {\n                    return void 0 === t ? (console.error(\"You have possibly supplied invalid Date format. Please supply a valid JavaScript Date\"), 0) : t.length > e.length ? t : e;\n                }, 0);\n                return 1.05 * (t = new Mi(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;\n            }\n        },\n        {\n            key: \"additionalPaddingXLabels\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.globals, s = i.config, r = s.xaxis.type, n = t.width;\n                a.skipLastTimelinelabel = !1, a.skipFirstTimelinelabel = !1;\n                var o = i.config.yaxis[0].opposite && i.globals.isBarHorizontal, l = function(t, o) {\n                    s.yaxis.length > 1 && function(t) {\n                        return -1 !== a.collapsedSeriesIndices.indexOf(t);\n                    }(o) || function(t) {\n                        if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {\n                            var o = e.dCtx.timescaleLabels[0], l = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + n / 1.75 - e.dCtx.yAxisWidthRight, h = o.position - n / 1.75 + e.dCtx.yAxisWidthLeft, c = \"right\" === i.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0;\n                            l > a.svgWidth - a.translateX - c && (a.skipLastTimelinelabel = !0), h < -(t.show && !t.floating || \"bar\" !== s.chart.type && \"candlestick\" !== s.chart.type && \"rangeBar\" !== s.chart.type && \"boxPlot\" !== s.chart.type ? 10 : n / 1.75) && (a.skipFirstTimelinelabel = !0);\n                        } else \"datetime\" === r ? e.dCtx.gridPad.right < n && !a.rotateXLabels && (a.skipLastTimelinelabel = !0) : \"datetime\" !== r && e.dCtx.gridPad.right < n / 2 - e.dCtx.yAxisWidthRight && !a.rotateXLabels && !i.config.xaxis.labels.trim && (e.dCtx.xPadRight = n / 2 + 1);\n                    }(t);\n                };\n                s.yaxis.forEach(function(t, i) {\n                    o ? (e.dCtx.gridPad.left < n && (e.dCtx.xPadLeft = n / 2 + 1), e.dCtx.xPadRight = n / 2 + 1) : l(t, i);\n                });\n            }\n        }\n    ]), t;\n}(), ua = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"getyAxisLabelsCoords\",\n            value: function() {\n                var t = this, e = this.w, i = [], a = 10, s = new Ri(this.dCtx.ctx);\n                return e.config.yaxis.map(function(r, n) {\n                    var o = {\n                        seriesIndex: n,\n                        dataPointIndex: -1,\n                        w: e\n                    }, l = e.globals.yAxisScale[n], h = 0;\n                    if (!s.isYAxisHidden(n) && r.labels.show && void 0 !== r.labels.minWidth && (h = r.labels.minWidth), !s.isYAxisHidden(n) && r.labels.show && l.result.length) {\n                        var c = e.globals.yLabelFormatters[n], d = l.niceMin === Number.MIN_VALUE ? 0 : l.niceMin, u = l.result.reduce(function(t, e) {\n                            var i, a;\n                            return (null === (i = String(c(t, o))) || void 0 === i ? void 0 : i.length) > (null === (a = String(c(e, o))) || void 0 === a ? void 0 : a.length) ? t : e;\n                        }, d), g = u = c(u, o);\n                        if (void 0 !== u && 0 !== u.length || (u = l.niceMax), e.globals.isBarHorizontal) {\n                            a = 0;\n                            var p = e.globals.labels.slice();\n                            u = v.getLargestStringFromArr(p), u = c(u, {\n                                seriesIndex: n,\n                                dataPointIndex: -1,\n                                w: e\n                            }), g = t.dCtx.dimHelpers.getLargestStringFromMultiArr(u, p);\n                        }\n                        var f = new Mi(t.dCtx.ctx), x = \"rotate(\".concat(r.labels.rotate, \" 0 0)\"), b = f.getTextRects(u, r.labels.style.fontSize, r.labels.style.fontFamily, x, !1), m = b;\n                        u !== g && (m = f.getTextRects(g, r.labels.style.fontSize, r.labels.style.fontFamily, x, !1)), i.push({\n                            width: (h > m.width || h > b.width ? h : m.width > b.width ? m.width : b.width) + a,\n                            height: m.height > b.height ? m.height : b.height\n                        });\n                    } else i.push({\n                        width: 0,\n                        height: 0\n                    });\n                }), i;\n            }\n        },\n        {\n            key: \"getyAxisTitleCoords\",\n            value: function() {\n                var t = this, e = this.w, i = [];\n                return e.config.yaxis.map(function(e, a) {\n                    if (e.show && void 0 !== e.title.text) {\n                        var s = new Mi(t.dCtx.ctx), r = \"rotate(\".concat(e.title.rotate, \" 0 0)\"), n = s.getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, r, !1);\n                        i.push({\n                            width: n.width,\n                            height: n.height\n                        });\n                    } else i.push({\n                        width: 0,\n                        height: 0\n                    });\n                }), i;\n            }\n        },\n        {\n            key: \"getTotalYAxisWidth\",\n            value: function() {\n                var t = this.w, e = 0, i = 0, a = 0, s = t.globals.yAxisScale.length > 1 ? 10 : 0, r = new Ri(this.dCtx.ctx), n = function(n, o) {\n                    var l = t.config.yaxis[o].floating, h = 0;\n                    n.width > 0 && !l ? (h = n.width + s, function(e) {\n                        return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;\n                    }(o) && (h = h - n.width - s)) : h = l || r.isYAxisHidden(o) ? 0 : 5, t.config.yaxis[o].opposite ? a += h : i += h, e += h;\n                };\n                return t.globals.yLabelsCoords.map(function(t, e) {\n                    n(t, e);\n                }), t.globals.yTitleCoords.map(function(t, e) {\n                    n(t, e);\n                }), t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i, this.dCtx.yAxisWidthRight = a, e;\n            }\n        }\n    ]), t;\n}(), ga = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"gridPadForColumnsInNumericAxis\",\n            value: function(t) {\n                var e = this.w, i = e.config, a = e.globals;\n                if (a.noData || a.collapsedSeries.length + a.ancillaryCollapsedSeries.length === i.series.length) return 0;\n                var s = function(t) {\n                    return [\n                        \"bar\",\n                        \"rangeBar\",\n                        \"candlestick\",\n                        \"boxPlot\"\n                    ].includes(t);\n                }, r = i.chart.type, n = 0, o = s(r) ? i.series.length : 1;\n                a.comboBarCount > 0 && (o = a.comboBarCount), a.collapsedSeries.forEach(function(t) {\n                    s(t.type) && (o -= 1);\n                }), i.chart.stacked && (o = 1);\n                var l = s(r) || a.comboBarCount > 0, h = Math.abs(a.initialMaxX - a.initialMinX);\n                if (l && a.isXNumeric && !a.isBarHorizontal && o > 0 && 0 !== h) {\n                    h <= 3 && (h = a.dataPoints);\n                    var c = h / t, d = a.minXDiff && a.minXDiff / c > 0 ? a.minXDiff / c : 0;\n                    d > t / 2 && (d /= 2), (n = d * parseInt(i.plotOptions.bar.columnWidth, 10) / 100) < 1 && (n = 1), a.barPadForNumericAxis = n;\n                }\n                return n;\n            }\n        },\n        {\n            key: \"gridPadFortitleSubtitle\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals, a = this.dCtx.isSparkline || !i.axisCharts ? 0 : 10;\n                [\n                    \"title\",\n                    \"subtitle\"\n                ].forEach(function(s) {\n                    void 0 !== e.config[s].text ? a += e.config[s].margin : a += t.dCtx.isSparkline || !i.axisCharts ? 0 : 5;\n                }), !e.config.legend.show || \"bottom\" !== e.config.legend.position || e.config.legend.floating || i.axisCharts || (a += 10);\n                var s = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"title\"), r = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"subtitle\");\n                i.gridHeight -= s.height + r.height + a, i.translateY += s.height + r.height + a;\n            }\n        },\n        {\n            key: \"setGridXPosForDualYAxis\",\n            value: function(t, e) {\n                var i = this.w, a = new Ri(this.dCtx.ctx);\n                i.config.yaxis.forEach(function(s, r) {\n                    -1 !== i.globals.ignoreYAxisIndexes.indexOf(r) || s.floating || a.isYAxisHidden(r) || (s.opposite && (i.globals.translateX -= e[r].width + t[r].width + parseInt(s.labels.style.fontSize, 10) / 1.2 + 12), i.globals.translateX < 2 && (i.globals.translateX = 2));\n                });\n            }\n        }\n    ]), t;\n}(), pa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new ca(this), this.dimYAxis = new ua(this), this.dimXAxis = new da(this), this.dimGrid = new ga(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;\n    }\n    return s(t, [\n        {\n            key: \"plotCoords\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals;\n                this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = {\n                    width: 0,\n                    height: 0\n                };\n                var a = Array.isArray(e.config.stroke.width) ? Math.max.apply(Math, f(e.config.stroke.width)) : e.config.stroke.width;\n                this.isSparkline && ((e.config.markers.discrete.length > 0 || e.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e) {\n                    var i = p(e, 2), a = i[0], s = i[1];\n                    t.gridPad[a] = Math.max(s, t.w.globals.markers.largestSize / 1.5);\n                }), this.gridPad.top = Math.max(a / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a / 2, this.gridPad.bottom)), i.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i.gridHeight = i.gridHeight - this.gridPad.top - this.gridPad.bottom, i.gridWidth = i.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;\n                var s = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);\n                i.gridWidth = i.gridWidth - 2 * s, i.translateX = i.translateX + this.gridPad.left + this.xPadLeft + (s > 0 ? s : 0), i.translateY = i.translateY + this.gridPad.top;\n            }\n        },\n        {\n            key: \"setDimensionsForAxisCharts\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals, a = this.dimYAxis.getyAxisLabelsCoords(), s = this.dimYAxis.getyAxisTitleCoords();\n                i.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function(t, i) {\n                    e.globals.yLabelsCoords.push({\n                        width: a[i].width,\n                        index: i\n                    }), e.globals.yTitleCoords.push({\n                        width: s[i].width,\n                        index: i\n                    });\n                }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();\n                var r = this.dimXAxis.getxAxisLabelsCoords(), n = this.dimXAxis.getxAxisGroupLabelsCoords(), o = this.dimXAxis.getxAxisTitleCoords();\n                this.conditionalChecksForAxisCoords(r, o, n), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;\n                var l = this.yAxisWidth, h = this.xAxisHeight;\n                i.xAxisLabelsHeight = this.xAxisHeight - o.height, i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - r.height, i.xAxisLabelsWidth = this.xAxisWidth, i.xAxisHeight = this.xAxisHeight;\n                var c = 10;\n                (\"radar\" === e.config.chart.type || this.isSparkline) && (l = 0, h = 0), this.isSparkline && (this.lgRect = {\n                    height: 0,\n                    width: 0\n                }), (this.isSparkline || \"treemap\" === e.config.chart.type) && (l = 0, h = 0, c = 0), this.isSparkline || \"treemap\" === e.config.chart.type || this.dimXAxis.additionalPaddingXLabels(r);\n                var d = function() {\n                    i.translateX = l + t.datalabelsCoords.width, i.gridHeight = i.svgHeight - t.lgRect.height - h - (t.isSparkline || \"treemap\" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - l - 2 * t.datalabelsCoords.width;\n                };\n                switch(\"top\" === e.config.xaxis.position && (c = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position){\n                    case \"bottom\":\n                        i.translateY = c, d();\n                        break;\n                    case \"top\":\n                        i.translateY = this.lgRect.height + c, d();\n                        break;\n                    case \"left\":\n                        i.translateY = c, i.translateX = this.lgRect.width + l + this.datalabelsCoords.width, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 2 * this.datalabelsCoords.width;\n                        break;\n                    case \"right\":\n                        i.translateY = c, i.translateX = l + this.datalabelsCoords.width, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 2 * this.datalabelsCoords.width - 5;\n                        break;\n                    default:\n                        throw new Error(\"Legend position not supported\");\n                }\n                this.dimGrid.setGridXPosForDualYAxis(s, a), new ia(this.ctx).setYAxisXPosition(a, s);\n            }\n        },\n        {\n            key: \"setDimensionsForNonAxisCharts\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config, a = 0;\n                t.config.legend.show && !t.config.legend.floating && (a = 20);\n                var s = \"pie\" === i.chart.type || \"polarArea\" === i.chart.type || \"donut\" === i.chart.type ? \"pie\" : \"radialBar\", r = i.plotOptions[s].offsetY, n = i.plotOptions[s].offsetX;\n                if (!i.legend.show || i.legend.floating) {\n                    e.gridHeight = e.svgHeight;\n                    var o = e.dom.elWrap.getBoundingClientRect().width;\n                    return e.gridWidth = Math.min(o, e.gridHeight), e.translateY = r, void (e.translateX = n + (e.svgWidth - e.gridWidth) / 2);\n                }\n                switch(i.legend.position){\n                    case \"bottom\":\n                        e.gridHeight = e.svgHeight - this.lgRect.height, e.gridWidth = e.svgWidth, e.translateY = r - 10, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;\n                        break;\n                    case \"top\":\n                        e.gridHeight = e.svgHeight - this.lgRect.height, e.gridWidth = e.svgWidth, e.translateY = this.lgRect.height + r + 10, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;\n                        break;\n                    case \"left\":\n                        e.gridWidth = e.svgWidth - this.lgRect.width - a, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = n + this.lgRect.width + a;\n                        break;\n                    case \"right\":\n                        e.gridWidth = e.svgWidth - this.lgRect.width - a - 5, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = n + 10;\n                        break;\n                    default:\n                        throw new Error(\"Legend position not supported\");\n                }\n            }\n        },\n        {\n            key: \"conditionalChecksForAxisCoords\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.globals.hasXaxisGroups ? 2 : 1, r = i.height + t.height + e.height, n = a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO, o = a.globals.rotateXLabels ? 22 : 10, l = a.globals.rotateXLabels && \"bottom\" === a.config.legend.position ? 10 : 0;\n                this.xAxisHeight = r * n + s * o + l, this.xAxisWidth = t.width, this.xAxisHeight - e.height > a.config.xaxis.labels.maxHeight && (this.xAxisHeight = a.config.xaxis.labels.maxHeight), a.config.xaxis.labels.minHeight && this.xAxisHeight < a.config.xaxis.labels.minHeight && (this.xAxisHeight = a.config.xaxis.labels.minHeight), a.config.xaxis.floating && (this.xAxisHeight = 0);\n                var h = 0, c = 0;\n                a.config.yaxis.forEach(function(t) {\n                    h += t.labels.minWidth, c += t.labels.maxWidth;\n                }), this.yAxisWidth < h && (this.yAxisWidth = h), this.yAxisWidth > c && (this.yAxisWidth = c);\n            }\n        }\n    ]), t;\n}(), fa = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.lgCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"getLegendStyles\",\n            value: function() {\n                var t, e, i, a = document.createElement(\"style\");\n                a.setAttribute(\"type\", \"text/css\");\n                var s = (null === (t = this.lgCtx.ctx) || void 0 === t || null === (e = t.opts) || void 0 === e || null === (i = e.chart) || void 0 === i ? void 0 : i.nonce) || this.w.config.chart.nonce;\n                s && a.setAttribute(\"nonce\", s);\n                var r = document.createTextNode(\"\\n      .apexcharts-flip-y {\\n        transform: scaleY(-1) translateY(-100%);\\n        transform-origin: top;\\n        transform-box: fill-box;\\n      }\\n      .apexcharts-flip-x {\\n        transform: scaleX(-1);\\n        transform-origin: center;\\n        transform-box: fill-box;\\n      }\\n      .apexcharts-legend {\\n        display: flex;\\n        overflow: auto;\\n        padding: 0 10px;\\n      }\\n      .apexcharts-legend.apexcharts-legend-group-horizontal {\\n        flex-direction: column;\\n      }\\n      .apexcharts-legend-group {\\n        display: flex;\\n      }\\n      .apexcharts-legend-group-vertical {\\n        flex-direction: column-reverse;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\\n        flex-wrap: wrap\\n      }\\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        flex-direction: column;\\n        bottom: 0;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        justify-content: flex-start;\\n        align-items: flex-start;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\\n        justify-content: center;\\n        align-items: center;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\\n        justify-content: flex-end;\\n        align-items: flex-end;\\n      }\\n      .apexcharts-legend-series {\\n        cursor: pointer;\\n        line-height: normal;\\n        display: flex;\\n        align-items: center;\\n      }\\n      .apexcharts-legend-text {\\n        position: relative;\\n        font-size: 14px;\\n      }\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\n        pointer-events: none;\\n      }\\n      .apexcharts-legend-marker {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        margin-right: 1px;\\n      }\\n\\n      .apexcharts-legend-series.apexcharts-no-click {\\n        cursor: auto;\\n      }\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\n        display: none !important;\\n      }\\n      .apexcharts-inactive-legend {\\n        opacity: 0.45;\\n      }\\n\\n    \");\n                return a.appendChild(r), a;\n            }\n        },\n        {\n            key: \"getLegendDimensions\",\n            value: function() {\n                var t = this.w.globals.dom.baseEl.querySelector(\".apexcharts-legend\").getBoundingClientRect(), e = t.width;\n                return {\n                    clwh: t.height,\n                    clww: e\n                };\n            }\n        },\n        {\n            key: \"appendToForeignObject\",\n            value: function() {\n                this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());\n            }\n        },\n        {\n            key: \"toggleDataSeries\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                if (a.globals.axisCharts || \"radialBar\" === a.config.chart.type) {\n                    a.globals.resized = !0;\n                    var s = null, r = null;\n                    if (a.globals.risingSeries = [], a.globals.axisCharts ? (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\")), r = parseInt(s.getAttribute(\"data:realIndex\"), 10)) : (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(t + 1, \"']\")), r = parseInt(s.getAttribute(\"rel\"), 10) - 1), e) [\n                        {\n                            cs: a.globals.collapsedSeries,\n                            csi: a.globals.collapsedSeriesIndices\n                        },\n                        {\n                            cs: a.globals.ancillaryCollapsedSeries,\n                            csi: a.globals.ancillaryCollapsedSeriesIndices\n                        }\n                    ].forEach(function(t) {\n                        i.riseCollapsedSeries(t.cs, t.csi, r);\n                    });\n                    else this.hideSeries({\n                        seriesEl: s,\n                        realIndex: r\n                    });\n                } else {\n                    var n = a.globals.dom.Paper.findOne(\" .apexcharts-series[rel='\".concat(t + 1, \"'] path\")), o = a.config.chart.type;\n                    if (\"pie\" === o || \"polarArea\" === o || \"donut\" === o) {\n                        var l = a.config.plotOptions.pie.donut.labels;\n                        new Mi(this.lgCtx.ctx).pathMouseDown(n, null), this.lgCtx.ctx.pie.printDataLabelsInner(n.node, l);\n                    }\n                    n.fire(\"click\");\n                }\n            }\n        },\n        {\n            key: \"getSeriesAfterCollapsing\",\n            value: function(t) {\n                var e = t.realIndex, i = this.w, a = i.globals, s = v.clone(i.config.series);\n                if (a.axisCharts) {\n                    var r = i.config.yaxis[a.seriesYAxisReverseMap[e]], n = {\n                        index: e,\n                        data: s[e].data.slice(),\n                        type: s[e].type || i.config.chart.type\n                    };\n                    if (r && r.show && r.showAlways) a.ancillaryCollapsedSeriesIndices.indexOf(e) < 0 && (a.ancillaryCollapsedSeries.push(n), a.ancillaryCollapsedSeriesIndices.push(e));\n                    else if (a.collapsedSeriesIndices.indexOf(e) < 0) {\n                        a.collapsedSeries.push(n), a.collapsedSeriesIndices.push(e);\n                        var o = a.risingSeries.indexOf(e);\n                        a.risingSeries.splice(o, 1);\n                    }\n                } else a.collapsedSeries.push({\n                    index: e,\n                    data: s[e]\n                }), a.collapsedSeriesIndices.push(e);\n                return a.allSeriesCollapsed = a.collapsedSeries.length + a.ancillaryCollapsedSeries.length === i.config.series.length, this._getSeriesBasedOnCollapsedState(s);\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                for(var e = t.seriesEl, i = t.realIndex, a = this.w, s = this.getSeriesAfterCollapsing({\n                    realIndex: i\n                }), r = e.childNodes, n = 0; n < r.length; n++)r[n].classList.contains(\"apexcharts-series-markers-wrap\") && (r[n].classList.contains(\"apexcharts-hide\") ? r[n].classList.remove(\"apexcharts-hide\") : r[n].classList.add(\"apexcharts-hide\"));\n                this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n            }\n        },\n        {\n            key: \"riseCollapsedSeries\",\n            value: function(t, e, i) {\n                var a = this.w, s = v.clone(a.config.series);\n                if (t.length > 0) {\n                    for(var r = 0; r < t.length; r++)t[r].index === i && (a.globals.axisCharts ? s[i].data = t[r].data.slice() : s[i] = t[r].data, \"number\" != typeof s[i] && (s[i].hidden = !1), t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i));\n                    s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n                }\n            }\n        },\n        {\n            key: \"_getSeriesBasedOnCollapsedState\",\n            value: function(t) {\n                var e = this.w, i = 0;\n                return e.globals.axisCharts ? t.forEach(function(a, s) {\n                    e.globals.collapsedSeriesIndices.indexOf(s) < 0 && e.globals.ancillaryCollapsedSeriesIndices.indexOf(s) < 0 || (t[s].data = [], i++);\n                }) : t.forEach(function(a, s) {\n                    !e.globals.collapsedSeriesIndices.indexOf(s) < 0 && (t[s] = 0, i++);\n                }), e.globals.allSeriesCollapsed = i === t.length, t;\n            }\n        }\n    ]), t;\n}(), xa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = \"bar\" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new fa(this);\n    }\n    return s(t, [\n        {\n            key: \"init\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config, a = i.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1;\n                if (this.legendHelpers.appendToForeignObject(), (a || !e.axisCharts) && i.legend.show) {\n                    for(; e.dom.elLegendWrap.firstChild;)e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);\n                    this.drawLegends(), \"bottom\" === i.legend.position || \"top\" === i.legend.position ? this.legendAlignHorizontal() : \"right\" !== i.legend.position && \"left\" !== i.legend.position || this.legendAlignVertical();\n                }\n            }\n        },\n        {\n            key: \"createLegendMarker\",\n            value: function(t) {\n                var e = t.i, i = t.fillcolor, a = this.w, s = document.createElement(\"span\");\n                s.classList.add(\"apexcharts-legend-marker\");\n                var r = a.config.legend.markers.shape || a.config.markers.shape, n = r;\n                Array.isArray(r) && (n = r[e]);\n                var o = Array.isArray(a.config.legend.markers.size) ? parseFloat(a.config.legend.markers.size[e]) : parseFloat(a.config.legend.markers.size), l = Array.isArray(a.config.legend.markers.offsetX) ? parseFloat(a.config.legend.markers.offsetX[e]) : parseFloat(a.config.legend.markers.offsetX), h = Array.isArray(a.config.legend.markers.offsetY) ? parseFloat(a.config.legend.markers.offsetY[e]) : parseFloat(a.config.legend.markers.offsetY), c = Array.isArray(a.config.legend.markers.strokeWidth) ? parseFloat(a.config.legend.markers.strokeWidth[e]) : parseFloat(a.config.legend.markers.strokeWidth), d = s.style;\n                if (d.height = 2 * (o + c) + \"px\", d.width = 2 * (o + c) + \"px\", d.left = l + \"px\", d.top = h + \"px\", a.config.legend.markers.customHTML) d.background = \"transparent\", d.color = i[e], Array.isArray(a.config.legend.markers.customHTML) ? a.config.legend.markers.customHTML[e] && (s.innerHTML = a.config.legend.markers.customHTML[e]()) : s.innerHTML = a.config.legend.markers.customHTML();\n                else {\n                    var g = new Vi(this.ctx).getMarkerConfig({\n                        cssClass: \"apexcharts-legend-marker apexcharts-marker apexcharts-marker-\".concat(n),\n                        seriesIndex: e,\n                        strokeWidth: c,\n                        size: o\n                    }), p = window.SVG().addTo(s).size(\"100%\", \"100%\"), f = new Mi(this.ctx).drawMarker(0, 0, u(u({}, g), {}, {\n                        pointFillColor: Array.isArray(i) ? i[e] : g.pointFillColor,\n                        shape: n\n                    }));\n                    a.globals.dom.Paper.find(\".apexcharts-legend-marker.apexcharts-marker\").forEach(function(t) {\n                        t.node.classList.contains(\"apexcharts-marker-triangle\") ? t.node.style.transform = \"translate(50%, 45%)\" : t.node.style.transform = \"translate(50%, 50%)\";\n                    }), p.add(f);\n                }\n                return s;\n            }\n        },\n        {\n            key: \"drawLegends\",\n            value: function() {\n                var t = this, e = this, i = this.w, a = i.config.legend.fontFamily, s = i.globals.seriesNames, r = i.config.legend.markers.fillColors ? i.config.legend.markers.fillColors.slice() : i.globals.colors.slice();\n                if (\"heatmap\" === i.config.chart.type) {\n                    var n = i.config.plotOptions.heatmap.colorScale.ranges;\n                    s = n.map(function(t) {\n                        return t.name ? t.name : t.from + \" - \" + t.to;\n                    }), r = n.map(function(t) {\n                        return t.color;\n                    });\n                } else this.isBarsDistributed && (s = i.globals.labels.slice());\n                i.config.legend.customLegendItems.length && (s = i.config.legend.customLegendItems);\n                var o = i.globals.legendFormatter, l = i.config.legend.inverseOrder, h = [];\n                i.globals.seriesGroups.length > 1 && i.config.legend.clusterGroupedSeries && i.globals.seriesGroups.forEach(function(t, e) {\n                    h[e] = document.createElement(\"div\"), h[e].classList.add(\"apexcharts-legend-group\", \"apexcharts-legend-group-\".concat(e)), \"horizontal\" === i.config.legend.clusterGroupedSeriesOrientation ? i.globals.dom.elLegendWrap.classList.add(\"apexcharts-legend-group-horizontal\") : h[e].classList.add(\"apexcharts-legend-group-vertical\");\n                });\n                for(var c = function(e) {\n                    var n, l = o(s[e], {\n                        seriesIndex: e,\n                        w: i\n                    }), c = !1, d = !1;\n                    if (i.globals.collapsedSeries.length > 0) for(var u = 0; u < i.globals.collapsedSeries.length; u++)i.globals.collapsedSeries[u].index === e && (c = !0);\n                    if (i.globals.ancillaryCollapsedSeriesIndices.length > 0) for(var g = 0; g < i.globals.ancillaryCollapsedSeriesIndices.length; g++)i.globals.ancillaryCollapsedSeriesIndices[g] === e && (d = !0);\n                    var p = t.createLegendMarker({\n                        i: e,\n                        fillcolor: r\n                    });\n                    Mi.setAttrs(p, {\n                        rel: e + 1,\n                        \"data:collapsed\": c || d\n                    }), (c || d) && p.classList.add(\"apexcharts-inactive-legend\");\n                    var f = document.createElement(\"div\"), x = document.createElement(\"span\");\n                    x.classList.add(\"apexcharts-legend-text\"), x.innerHTML = Array.isArray(l) ? l.join(\" \") : l;\n                    var b = i.config.legend.labels.useSeriesColors ? i.globals.colors[e] : Array.isArray(i.config.legend.labels.colors) ? null === (n = i.config.legend.labels.colors) || void 0 === n ? void 0 : n[e] : i.config.legend.labels.colors;\n                    b || (b = i.config.chart.foreColor), x.style.color = b, x.style.fontSize = parseFloat(i.config.legend.fontSize) + \"px\", x.style.fontWeight = i.config.legend.fontWeight, x.style.fontFamily = a || i.config.chart.fontFamily, Mi.setAttrs(x, {\n                        rel: e + 1,\n                        i: e,\n                        \"data:default-text\": encodeURIComponent(l),\n                        \"data:collapsed\": c || d\n                    }), f.appendChild(p), f.appendChild(x);\n                    var m = new Pi(t.ctx);\n                    i.config.legend.showForZeroSeries || 0 === m.getSeriesTotalByIndex(e) && m.seriesHaveSameValues(e) && !m.isSeriesNull(e) && -1 === i.globals.collapsedSeriesIndices.indexOf(e) && -1 === i.globals.ancillaryCollapsedSeriesIndices.indexOf(e) && f.classList.add(\"apexcharts-hidden-zero-series\");\n                    i.config.legend.showForNullSeries || m.isSeriesNull(e) && -1 === i.globals.collapsedSeriesIndices.indexOf(e) && -1 === i.globals.ancillaryCollapsedSeriesIndices.indexOf(e) && f.classList.add(\"apexcharts-hidden-null-series\"), h.length ? i.globals.seriesGroups.forEach(function(t, a) {\n                        var s;\n                        t.includes(null === (s = i.config.series[e]) || void 0 === s ? void 0 : s.name) && (i.globals.dom.elLegendWrap.appendChild(h[a]), h[a].appendChild(f));\n                    }) : i.globals.dom.elLegendWrap.appendChild(f), i.globals.dom.elLegendWrap.classList.add(\"apexcharts-align-\".concat(i.config.legend.horizontalAlign)), i.globals.dom.elLegendWrap.classList.add(\"apx-legend-position-\" + i.config.legend.position), f.classList.add(\"apexcharts-legend-series\"), f.style.margin = \"\".concat(i.config.legend.itemMargin.vertical, \"px \").concat(i.config.legend.itemMargin.horizontal, \"px\"), i.globals.dom.elLegendWrap.style.width = i.config.legend.width ? i.config.legend.width + \"px\" : \"\", i.globals.dom.elLegendWrap.style.height = i.config.legend.height ? i.config.legend.height + \"px\" : \"\", Mi.setAttrs(f, {\n                        rel: e + 1,\n                        seriesName: v.escapeString(s[e]),\n                        \"data:collapsed\": c || d\n                    }), (c || d) && f.classList.add(\"apexcharts-inactive-legend\"), i.config.legend.onItemClick.toggleDataSeries || f.classList.add(\"apexcharts-no-click\");\n                }, d = l ? s.length - 1 : 0; l ? d >= 0 : d <= s.length - 1; l ? d-- : d++)c(d);\n                i.globals.dom.elWrap.addEventListener(\"click\", e.onLegendClick, !0), i.config.legend.onItemHover.highlightDataSeries && 0 === i.config.legend.customLegendItems.length && (i.globals.dom.elWrap.addEventListener(\"mousemove\", e.onLegendHovered, !0), i.globals.dom.elWrap.addEventListener(\"mouseout\", e.onLegendHovered, !0));\n            }\n        },\n        {\n            key: \"setLegendWrapXY\",\n            value: function(t, e) {\n                var i = this.w, a = i.globals.dom.elLegendWrap, s = a.clientHeight, r = 0, n = 0;\n                if (\"bottom\" === i.config.legend.position) n = i.globals.svgHeight - Math.min(s, i.globals.svgHeight / 2) - 5;\n                else if (\"top\" === i.config.legend.position) {\n                    var o = new pa(this.ctx), l = o.dimHelpers.getTitleSubtitleCoords(\"title\").height, h = o.dimHelpers.getTitleSubtitleCoords(\"subtitle\").height;\n                    n = (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);\n                }\n                a.style.position = \"absolute\", r = r + t + i.config.legend.offsetX, n = n + e + i.config.legend.offsetY, a.style.left = r + \"px\", a.style.top = n + \"px\", \"right\" === i.config.legend.position && (a.style.left = \"auto\", a.style.right = 25 + i.config.legend.offsetX + \"px\");\n                [\n                    \"width\",\n                    \"height\"\n                ].forEach(function(t) {\n                    a.style[t] && (a.style[t] = parseInt(i.config.legend[t], 10) + \"px\");\n                });\n            }\n        },\n        {\n            key: \"legendAlignHorizontal\",\n            value: function() {\n                var t = this.w;\n                t.globals.dom.elLegendWrap.style.right = 0;\n                var e = new pa(this.ctx), i = e.dimHelpers.getTitleSubtitleCoords(\"title\"), a = e.dimHelpers.getTitleSubtitleCoords(\"subtitle\"), s = 0;\n                \"top\" === t.config.legend.position && (s = i.height + a.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, s);\n            }\n        },\n        {\n            key: \"legendAlignVertical\",\n            value: function() {\n                var t = this.w, e = this.legendHelpers.getLegendDimensions(), i = 0;\n                \"left\" === t.config.legend.position && (i = 20), \"right\" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);\n            }\n        },\n        {\n            key: \"onLegendHovered\",\n            value: function(t) {\n                var e = this.w, i = t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\");\n                if (\"heatmap\" === e.config.chart.type || this.isBarsDistributed) {\n                    if (i) {\n                        var a = parseInt(t.target.getAttribute(\"rel\"), 10) - 1;\n                        this.ctx.events.fireEvent(\"legendHover\", [\n                            this.ctx,\n                            a,\n                            this.w\n                        ]), new Zi(this.ctx).highlightRangeInSeries(t, t.target);\n                    }\n                } else !t.target.classList.contains(\"apexcharts-inactive-legend\") && i && new Zi(this.ctx).toggleSeriesOnHover(t, t.target);\n            }\n        },\n        {\n            key: \"onLegendClick\",\n            value: function(t) {\n                var e = this.w;\n                if (!e.config.legend.customLegendItems.length && (t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\"))) {\n                    var i = parseInt(t.target.getAttribute(\"rel\"), 10) - 1, a = \"true\" === t.target.getAttribute(\"data:collapsed\"), s = this.w.config.chart.events.legendClick;\n                    \"function\" == typeof s && s(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendClick\", [\n                        this.ctx,\n                        i,\n                        this.w\n                    ]);\n                    var r = this.w.config.legend.markers.onClick;\n                    \"function\" == typeof r && t.target.classList.contains(\"apexcharts-legend-marker\") && (r(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendMarkerClick\", [\n                        this.ctx,\n                        i,\n                        this.w\n                    ])), \"treemap\" !== e.config.chart.type && \"heatmap\" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i, a);\n                }\n            }\n        }\n    ]), t;\n}(), ba = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n        var a = this.w;\n        this.ev = this.w.config.chart.events, this.selectedClass = \"apexcharts-selected\", this.localeValues = this.w.globals.locale.toolbar, this.minX = a.globals.minX, this.maxX = a.globals.maxX;\n    }\n    return s(t, [\n        {\n            key: \"createToolbar\",\n            value: function() {\n                var t = this, e = this.w, i = function() {\n                    return document.createElement(\"div\");\n                }, a = i();\n                if (a.setAttribute(\"class\", \"apexcharts-toolbar\"), a.style.top = e.config.chart.toolbar.offsetY + \"px\", a.style.right = 3 - e.config.chart.toolbar.offsetX + \"px\", e.globals.dom.elWrap.appendChild(a), this.elZoom = i(), this.elZoomIn = i(), this.elZoomOut = i(), this.elPan = i(), this.elSelection = i(), this.elZoomReset = i(), this.elMenuIcon = i(), this.elMenu = i(), this.elCustomIcons = [], this.t = e.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for(var s = 0; s < this.t.customIcons.length; s++)this.elCustomIcons.push(i());\n                var r = [], n = function(i, a, s) {\n                    var n = i.toLowerCase();\n                    t.t[n] && e.config.chart.zoom.enabled && r.push({\n                        el: a,\n                        icon: \"string\" == typeof t.t[n] ? t.t[n] : s,\n                        title: t.localeValues[i],\n                        class: \"apexcharts-\".concat(n, \"-icon\")\n                    });\n                };\n                n(\"zoomIn\", this.elZoomIn, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n'), n(\"zoomOut\", this.elZoomOut, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n');\n                var o = function(i) {\n                    t.t[i] && e.config.chart[i].enabled && r.push({\n                        el: \"zoom\" === i ? t.elZoom : t.elSelection,\n                        icon: \"string\" == typeof t.t[i] ? t.t[i] : \"zoom\" === i ? '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\\n    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\\n</svg>' : '<svg fill=\"#6E8192\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\"/>\\n</svg>',\n                        title: t.localeValues[\"zoom\" === i ? \"selectionZoom\" : \"selection\"],\n                        class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-\".concat(i, \"-icon\")\n                    });\n                };\n                o(\"zoom\"), o(\"selection\"), this.t.pan && e.config.chart.zoom.enabled && r.push({\n                    el: this.elPan,\n                    icon: \"string\" == typeof this.t.pan ? this.t.pan : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <defs>\\n        <path d=\"M0 0h24v24H0z\" id=\"a\"/>\\n    </defs>\\n    <clipPath id=\"b\">\\n        <use overflow=\"visible\" xlink:href=\"#a\"/>\\n    </clipPath>\\n    <path clip-path=\"url(#b)\" d=\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"/>\\n</svg>',\n                    title: this.localeValues.pan,\n                    class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-pan-icon\"\n                }), n(\"reset\", this.elZoomReset, '<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n</svg>'), this.t.download && r.push({\n                    el: this.elMenuIcon,\n                    icon: \"string\" == typeof this.t.download ? this.t.download : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>',\n                    title: this.localeValues.menu,\n                    class: \"apexcharts-menu-icon\"\n                });\n                for(var l = 0; l < this.elCustomIcons.length; l++)r.push({\n                    el: this.elCustomIcons[l],\n                    icon: this.t.customIcons[l].icon,\n                    title: this.t.customIcons[l].title,\n                    index: this.t.customIcons[l].index,\n                    class: \"apexcharts-toolbar-custom-icon \" + this.t.customIcons[l].class\n                });\n                r.forEach(function(t, e) {\n                    t.index && v.moveIndexInArray(r, e, t.index);\n                });\n                for(var h = 0; h < r.length; h++)Mi.setAttrs(r[h].el, {\n                    class: r[h].class,\n                    title: r[h].title\n                }), r[h].el.innerHTML = r[h].icon, a.appendChild(r[h].el);\n                this._createHamburgerMenu(a), e.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();\n            }\n        },\n        {\n            key: \"_createHamburgerMenu\",\n            value: function(t) {\n                this.elMenuItems = [], t.appendChild(this.elMenu), Mi.setAttrs(this.elMenu, {\n                    class: \"apexcharts-menu\"\n                });\n                for(var e = [\n                    {\n                        name: \"exportSVG\",\n                        title: this.localeValues.exportToSVG\n                    },\n                    {\n                        name: \"exportPNG\",\n                        title: this.localeValues.exportToPNG\n                    },\n                    {\n                        name: \"exportCSV\",\n                        title: this.localeValues.exportToCSV\n                    }\n                ], i = 0; i < e.length; i++)this.elMenuItems.push(document.createElement(\"div\")), this.elMenuItems[i].innerHTML = e[i].title, Mi.setAttrs(this.elMenuItems[i], {\n                    class: \"apexcharts-menu-item \".concat(e[i].name),\n                    title: e[i].title\n                }), this.elMenu.appendChild(this.elMenuItems[i]);\n            }\n        },\n        {\n            key: \"addToolbarEventListeners\",\n            value: function() {\n                var t = this;\n                this.elZoomReset.addEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"selection\")), this.elZoom.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"zoom\")), this.elZoomIn.addEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.addEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener(\"click\", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e) {\n                    e.classList.contains(\"exportSVG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"svg\")) : e.classList.contains(\"exportPNG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"png\")) : e.classList.contains(\"exportCSV\") && e.addEventListener(\"click\", t.handleDownload.bind(t, \"csv\"));\n                });\n                for(var e = 0; e < this.t.customIcons.length; e++)this.elCustomIcons[e].addEventListener(\"click\", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));\n            }\n        },\n        {\n            key: \"toggleZoomSelection\",\n            value: function(t) {\n                this.ctx.getSyncedCharts().forEach(function(e) {\n                    e.ctx.toolbar.toggleOtherControls();\n                    var i = \"selection\" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom, a = \"selection\" === t ? \"selectionEnabled\" : \"zoomEnabled\";\n                    e.w.globals[a] = !e.w.globals[a], i.classList.contains(e.ctx.toolbar.selectedClass) ? i.classList.remove(e.ctx.toolbar.selectedClass) : i.classList.add(e.ctx.toolbar.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"getToolbarIconsReference\",\n            value: function() {\n                var t = this.w;\n                this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(\".apexcharts-zoom-icon\")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(\".apexcharts-pan-icon\")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(\".apexcharts-selection-icon\"));\n            }\n        },\n        {\n            key: \"enableZoomPanFromToolbar\",\n            value: function(t) {\n                this.toggleOtherControls(), \"pan\" === t ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;\n                var e = \"pan\" === t ? this.elPan : this.elZoom, i = \"pan\" === t ? this.elZoom : this.elPan;\n                e && e.classList.add(this.selectedClass), i && i.classList.remove(this.selectedClass);\n            }\n        },\n        {\n            key: \"togglePanning\",\n            value: function() {\n                this.ctx.getSyncedCharts().forEach(function(t) {\n                    t.ctx.toolbar.toggleOtherControls(), t.w.globals.panEnabled = !t.w.globals.panEnabled, t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass) ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass) : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"toggleOtherControls\",\n            value: function() {\n                var t = this, e = this.w;\n                e.globals.panEnabled = !1, e.globals.zoomEnabled = !1, e.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [\n                    this.elPan,\n                    this.elSelection,\n                    this.elZoom\n                ].forEach(function(e) {\n                    e && e.classList.remove(t.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"handleZoomIn\",\n            value: function() {\n                var t = this.w;\n                t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY);\n                var e = (this.minX + this.maxX) / 2, i = (this.minX + e) / 2, a = (this.maxX + e) / 2, s = this._getNewMinXMaxX(i, a);\n                t.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);\n            }\n        },\n        {\n            key: \"handleZoomOut\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY), !(\"datetime\" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {\n                    var e = (this.minX + this.maxX) / 2, i = this.minX - (e - this.minX), a = this.maxX - (e - this.maxX), s = this._getNewMinXMaxX(i, a);\n                    t.globals.disableZoomOut || this.zoomUpdateOptions(s.minX, s.maxX);\n                }\n            }\n        },\n        {\n            key: \"_getNewMinXMaxX\",\n            value: function(t, e) {\n                var i = this.w.config.xaxis.convertedCatToNumeric;\n                return {\n                    minX: i ? Math.floor(t) : t,\n                    maxX: i ? Math.floor(e) : e\n                };\n            }\n        },\n        {\n            key: \"zoomUpdateOptions\",\n            value: function(t, e) {\n                var i = this.w;\n                if (void 0 !== t || void 0 !== e) {\n                    if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = i.globals.dataPoints), e - t < 2))) {\n                        var a = {\n                            min: t,\n                            max: e\n                        }, s = this.getBeforeZoomRange(a);\n                        s && (a = s.xaxis);\n                        var r = {\n                            xaxis: a\n                        }, n = v.clone(i.globals.initialConfig.yaxis);\n                        i.config.chart.group || (r.yaxis = n), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a, n);\n                    }\n                } else this.handleZoomReset();\n            }\n        },\n        {\n            key: \"zoomCallback\",\n            value: function(t, e) {\n                \"function\" == typeof this.ev.zoomed && (this.ev.zoomed(this.ctx, {\n                    xaxis: t,\n                    yaxis: e\n                }), this.ctx.events.fireEvent(\"zoomed\", {\n                    xaxis: t,\n                    yaxis: e\n                }));\n            }\n        },\n        {\n            key: \"getBeforeZoomRange\",\n            value: function(t, e) {\n                var i = null;\n                return \"function\" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {\n                    xaxis: t,\n                    yaxis: e\n                })), i;\n            }\n        },\n        {\n            key: \"toggleMenu\",\n            value: function() {\n                var t = this;\n                window.setTimeout(function() {\n                    t.elMenu.classList.contains(\"apexcharts-menu-open\") ? t.elMenu.classList.remove(\"apexcharts-menu-open\") : t.elMenu.classList.add(\"apexcharts-menu-open\");\n                }, 0);\n            }\n        },\n        {\n            key: \"handleDownload\",\n            value: function(t) {\n                var e = this.w, i = new Ji(this.ctx);\n                switch(t){\n                    case \"svg\":\n                        i.exportToSVG(this.ctx);\n                        break;\n                    case \"png\":\n                        i.exportToPng(this.ctx);\n                        break;\n                    case \"csv\":\n                        i.exportToCSV({\n                            series: e.config.series,\n                            columnDelimiter: e.config.chart.toolbar.export.csv.columnDelimiter\n                        });\n                }\n            }\n        },\n        {\n            key: \"handleZoomReset\",\n            value: function(t) {\n                this.ctx.getSyncedCharts().forEach(function(t) {\n                    var e = t.w;\n                    if (e.globals.lastXAxis.min = e.globals.initialConfig.xaxis.min, e.globals.lastXAxis.max = e.globals.initialConfig.xaxis.max, t.updateHelpers.revertDefaultAxisMinMax(), \"function\" == typeof e.config.chart.events.beforeResetZoom) {\n                        var i = e.config.chart.events.beforeResetZoom(t, e);\n                        i && t.updateHelpers.revertDefaultAxisMinMax(i);\n                    }\n                    \"function\" == typeof e.config.chart.events.zoomed && t.ctx.toolbar.zoomCallback({\n                        min: e.config.xaxis.min,\n                        max: e.config.xaxis.max\n                    }), e.globals.zoomed = !1;\n                    var a = t.ctx.series.emptyCollapsedSeries(v.clone(e.globals.initialSeries));\n                    t.updateHelpers._updateSeries(a, e.config.chart.animations.dynamicAnimation.enabled);\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;\n            }\n        }\n    ]), t;\n}(), ma = function(t) {\n    h(a, ba);\n    var e = n(a);\n    function a(t) {\n        var s;\n        return i(this, a), (s = e.call(this, t)).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new Mi(s.ctx), s.eventList = [\n            \"mousedown\",\n            \"mouseleave\",\n            \"mousemove\",\n            \"touchstart\",\n            \"touchmove\",\n            \"mouseup\",\n            \"touchend\",\n            \"wheel\"\n        ], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s.moveDirection = \"none\", s.debounceTimer = null, s.debounceDelay = 100, s.wheelDelay = 400, s;\n    }\n    return s(a, [\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = this, i = t.xyRatios, a = this.w, s = this;\n                this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a.globals.dom.baseEl.querySelector(\".apexcharts-grid\"), this.constraints = new kt(0, 0, a.globals.gridWidth, a.globals.gridHeight), this.zoomRect.node.classList.add(\"apexcharts-zoom-rect\"), this.selectionRect.node.classList.add(\"apexcharts-selection-rect\"), a.globals.dom.Paper.add(this.zoomRect), a.globals.dom.Paper.add(this.selectionRect), \"x\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n                    minX: 0,\n                    minY: 0,\n                    maxX: a.globals.gridWidth,\n                    maxY: a.globals.gridHeight\n                }).on(\"dragmove.namespace\", this.selectionDragging.bind(this, \"dragging\")) : \"y\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n                    minX: 0,\n                    maxX: a.globals.gridWidth\n                }).on(\"dragmove.namespace\", this.selectionDragging.bind(this, \"dragging\")) : this.slDraggableRect = this.selectionRect.draggable().on(\"dragmove.namespace\", this.selectionDragging.bind(this, \"dragging\")), this.preselectedSelection(), this.hoverArea = a.globals.dom.baseEl.querySelector(\"\".concat(a.globals.chartClass, \" .apexcharts-svg\")), this.hoverArea.classList.add(\"apexcharts-zoomable\"), this.eventList.forEach(function(t) {\n                    e.hoverArea.addEventListener(t, s.svgMouseEvents.bind(s, i), {\n                        capture: !1,\n                        passive: !0\n                    });\n                }), a.config.chart.zoom.enabled && a.config.chart.zoom.allowMouseWheelZoom && this.hoverArea.addEventListener(\"wheel\", s.mouseWheelEvent.bind(s), {\n                    capture: !1,\n                    passive: !1\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;\n            }\n        },\n        {\n            key: \"svgMouseEvents\",\n            value: function(t, e) {\n                var i = this.w, a = this.ctx.toolbar, s = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type, r = i.config.chart.toolbar.autoSelected;\n                if (e.shiftKey ? (this.shiftWasPressed = !0, a.enableZoomPanFromToolbar(\"pan\" === r ? \"zoom\" : \"pan\")) : this.shiftWasPressed && (a.enableZoomPanFromToolbar(r), this.shiftWasPressed = !1), e.target) {\n                    var n, o = e.target.classList;\n                    if (e.target.parentNode && null !== e.target.parentNode && (n = e.target.parentNode.classList), !(o.contains(\"apexcharts-legend-marker\") || o.contains(\"apexcharts-legend-text\") || n && n.contains(\"apexcharts-toolbar\"))) {\n                        if (this.clientX = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientX : \"touchend\" === e.type ? e.changedTouches[0].clientX : e.clientX, this.clientY = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientY : \"touchend\" === e.type ? e.changedTouches[0].clientY : e.clientY, \"mousedown\" === e.type && 1 === e.which || \"touchstart\" === e.type) {\n                            var l = this.gridRect.getBoundingClientRect();\n                            this.startX = this.clientX - l.left - i.globals.barPadForNumericAxis, this.startY = this.clientY - l.top, this.dragged = !1, this.w.globals.mousedown = !0;\n                        }\n                        (\"mousemove\" === e.type && 1 === e.which || \"touchmove\" === e.type) && (this.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, this.w.globals.mousedown && this.panDragging({\n                            context: this,\n                            zoomtype: s,\n                            xyRatios: t\n                        })) : (this.w.globals.mousedown && i.globals.zoomEnabled || this.w.globals.mousedown && i.globals.selectionEnabled) && (this.selection = this.selectionDrawing({\n                            context: this,\n                            zoomtype: s\n                        }))), \"mouseup\" !== e.type && \"touchend\" !== e.type && \"mouseleave\" !== e.type || this.handleMouseUp({\n                            zoomtype: s\n                        }), this.makeSelectionRectDraggable();\n                    }\n                }\n            }\n        },\n        {\n            key: \"handleMouseUp\",\n            value: function(t) {\n                var e, i = t.zoomtype, a = t.isResized, s = this.w, r = null === (e = this.gridRect) || void 0 === e ? void 0 : e.getBoundingClientRect();\n                r && (this.w.globals.mousedown || a) && (this.endX = this.clientX - r.left - s.globals.barPadForNumericAxis, this.endY = this.clientY - r.top, this.dragX = Math.abs(this.endX - this.startX), this.dragY = Math.abs(this.endY - this.startY), (s.globals.zoomEnabled || s.globals.selectionEnabled) && this.selectionDrawn({\n                    context: this,\n                    zoomtype: i\n                })), s.globals.zoomEnabled && this.hideSelectionRect(this.selectionRect), this.dragged = !1, this.w.globals.mousedown = !1;\n            }\n        },\n        {\n            key: \"mouseWheelEvent\",\n            value: function(t) {\n                var e = this, i = this.w;\n                t.preventDefault();\n                var a = Date.now();\n                a - i.globals.lastWheelExecution > this.wheelDelay && (this.executeMouseWheelZoom(t), i.globals.lastWheelExecution = a), this.debounceTimer && clearTimeout(this.debounceTimer), this.debounceTimer = setTimeout(function() {\n                    a - i.globals.lastWheelExecution > e.wheelDelay && (e.executeMouseWheelZoom(t), i.globals.lastWheelExecution = a);\n                }, this.debounceDelay);\n            }\n        },\n        {\n            key: \"executeMouseWheelZoom\",\n            value: function(t) {\n                var e, i = this.w;\n                this.minX = i.globals.isRangeBar ? i.globals.minY : i.globals.minX, this.maxX = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n                var a = null === (e = this.gridRect) || void 0 === e ? void 0 : e.getBoundingClientRect();\n                if (a) {\n                    var s, r, n, o = (t.clientX - a.left) / a.width, l = this.minX, h = this.maxX, c = h - l;\n                    if (t.deltaY < 0) {\n                        var d = l + o * c;\n                        r = d - (s = .5 * c) / 2, n = d + s / 2;\n                    } else r = l - (s = 1.5 * c) / 2, n = h + s / 2;\n                    if (!i.globals.isRangeBar) {\n                        r = Math.max(r, i.globals.initialMinX), n = Math.min(n, i.globals.initialMaxX);\n                        var u = .01 * (i.globals.initialMaxX - i.globals.initialMinX);\n                        if (n - r < u) {\n                            var g = (r + n) / 2;\n                            r = g - u / 2, n = g + u / 2;\n                        }\n                    }\n                    var p = this._getNewMinXMaxX(r, n);\n                    isNaN(p.minX) || isNaN(p.maxX) || this.zoomUpdateOptions(p.minX, p.maxX);\n                }\n            }\n        },\n        {\n            key: \"makeSelectionRectDraggable\",\n            value: function() {\n                var t = this, e = this.w;\n                if (this.selectionRect) {\n                    var i = this.selectionRect.node.getBoundingClientRect();\n                    i.width > 0 && i.height > 0 && (this.selectionRect.select(!1).resize(!1), this.selectionRect.select({\n                        createRot: function() {},\n                        updateRot: function() {},\n                        createHandle: function(t, e, i, a, s) {\n                            return \"l\" === s || \"r\" === s ? t.circle(8).css({\n                                \"stroke-width\": 1,\n                                stroke: \"#333\",\n                                fill: \"#fff\"\n                            }) : t.circle(0);\n                        },\n                        updateHandle: function(t, e) {\n                            return t.center(e[0], e[1]);\n                        }\n                    }).resize().on(\"resize\", function() {\n                        var i = e.globals.zoomEnabled ? e.config.chart.zoom.type : e.config.chart.selection.type;\n                        t.handleMouseUp({\n                            zoomtype: i,\n                            isResized: !0\n                        });\n                    }));\n                }\n            }\n        },\n        {\n            key: \"preselectedSelection\",\n            value: function() {\n                var t = this.w, e = this.xyRatios;\n                if (!t.globals.zoomEnabled) {\n                    if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(u(u({}, t.globals.selection), {}, {\n                        translateX: t.globals.translateX,\n                        translateY: t.globals.translateY\n                    }));\n                    else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {\n                        var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio, a = t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i;\n                        t.globals.isRangeBar && (i = (t.config.chart.selection.xaxis.min - t.globals.yAxisScale[0].niceMin) / e.invertedYRatio, a = (t.config.chart.selection.xaxis.max - t.config.chart.selection.xaxis.min) / e.invertedYRatio);\n                        var s = {\n                            x: i,\n                            y: 0,\n                            width: a,\n                            height: t.globals.gridHeight,\n                            translateX: t.globals.translateX,\n                            translateY: t.globals.translateY,\n                            selectionEnabled: !0\n                        };\n                        this.drawSelectionRect(s), this.makeSelectionRectDraggable(), \"function\" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {\n                            xaxis: {\n                                min: t.config.chart.selection.xaxis.min,\n                                max: t.config.chart.selection.xaxis.max\n                            },\n                            yaxis: {}\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"drawSelectionRect\",\n            value: function(t) {\n                var e = t.x, i = t.y, a = t.width, s = t.height, r = t.translateX, n = void 0 === r ? 0 : r, o = t.translateY, l = void 0 === o ? 0 : o, h = this.w, c = this.zoomRect, d = this.selectionRect;\n                if (this.dragged || null !== h.globals.selection) {\n                    var u = {\n                        transform: \"translate(\" + n + \", \" + l + \")\"\n                    };\n                    h.globals.zoomEnabled && this.dragged && (a < 0 && (a = 1), c.attr({\n                        x: e,\n                        y: i,\n                        width: a,\n                        height: s,\n                        fill: h.config.chart.zoom.zoomedArea.fill.color,\n                        \"fill-opacity\": h.config.chart.zoom.zoomedArea.fill.opacity,\n                        stroke: h.config.chart.zoom.zoomedArea.stroke.color,\n                        \"stroke-width\": h.config.chart.zoom.zoomedArea.stroke.width,\n                        \"stroke-opacity\": h.config.chart.zoom.zoomedArea.stroke.opacity\n                    }), Mi.setAttrs(c.node, u)), h.globals.selectionEnabled && (d.attr({\n                        x: e,\n                        y: i,\n                        width: a > 0 ? a : 0,\n                        height: s > 0 ? s : 0,\n                        fill: h.config.chart.selection.fill.color,\n                        \"fill-opacity\": h.config.chart.selection.fill.opacity,\n                        stroke: h.config.chart.selection.stroke.color,\n                        \"stroke-width\": h.config.chart.selection.stroke.width,\n                        \"stroke-dasharray\": h.config.chart.selection.stroke.dashArray,\n                        \"stroke-opacity\": h.config.chart.selection.stroke.opacity\n                    }), Mi.setAttrs(d.node, u));\n                }\n            }\n        },\n        {\n            key: \"hideSelectionRect\",\n            value: function(t) {\n                t && t.attr({\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                });\n            }\n        },\n        {\n            key: \"selectionDrawing\",\n            value: function(t) {\n                var e = t.context, i = t.zoomtype, a = this.w, s = e, r = this.gridRect.getBoundingClientRect(), n = s.startX - 1, o = s.startY, l = !1, h = !1, c = s.clientX - r.left - a.globals.barPadForNumericAxis, d = s.clientY - r.top, g = c - n, p = d - o, f = {\n                    translateX: a.globals.translateX,\n                    translateY: a.globals.translateY\n                };\n                return Math.abs(g + n) > a.globals.gridWidth ? g = a.globals.gridWidth - n : c < 0 && (g = n), n > c && (l = !0, g = Math.abs(g)), o > d && (h = !0, p = Math.abs(p)), f = u(u({}, f = \"x\" === i ? {\n                    x: l ? n - g : n,\n                    y: 0,\n                    width: g,\n                    height: a.globals.gridHeight\n                } : \"y\" === i ? {\n                    x: 0,\n                    y: h ? o - p : o,\n                    width: a.globals.gridWidth,\n                    height: p\n                } : {\n                    x: l ? n - g : n,\n                    y: h ? o - p : o,\n                    width: g,\n                    height: p\n                }), {}, {\n                    translateX: a.globals.translateX,\n                    translateY: a.globals.translateY\n                }), s.drawSelectionRect(f), s.selectionDragging(\"resizing\"), f;\n            }\n        },\n        {\n            key: \"selectionDragging\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                if (e) {\n                    e.preventDefault();\n                    var s = e.detail, r = s.handler, n = s.box, o = n.x, l = n.y;\n                    o < this.constraints.x && (o = this.constraints.x), l < this.constraints.y && (l = this.constraints.y), n.x2 > this.constraints.x2 && (o = this.constraints.x2 - n.w), n.y2 > this.constraints.y2 && (l = this.constraints.y2 - n.h), r.move(o, l);\n                    var h = this.xyRatios, c = this.selectionRect, d = 0;\n                    \"resizing\" === t && (d = 30);\n                    var u = function(t) {\n                        return parseFloat(c.node.getAttribute(t));\n                    }, g = {\n                        x: u(\"x\"),\n                        y: u(\"y\"),\n                        width: u(\"width\"),\n                        height: u(\"height\")\n                    };\n                    a.globals.selection = g, \"function\" == typeof a.config.chart.events.selection && a.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {\n                        var t, e, s, r, n = i.gridRect.getBoundingClientRect(), o = c.node.getBoundingClientRect();\n                        a.globals.isRangeBar ? (t = a.globals.yAxisScale[0].niceMin + (o.left - n.left) * h.invertedYRatio, e = a.globals.yAxisScale[0].niceMin + (o.right - n.left) * h.invertedYRatio, s = 0, r = 1) : (t = a.globals.xAxisScale.niceMin + (o.left - n.left) * h.xRatio, e = a.globals.xAxisScale.niceMin + (o.right - n.left) * h.xRatio, s = a.globals.yAxisScale[0].niceMin + (n.bottom - o.bottom) * h.yRatio[0], r = a.globals.yAxisScale[0].niceMax - (o.top - n.top) * h.yRatio[0]);\n                        var l = {\n                            xaxis: {\n                                min: t,\n                                max: e\n                            },\n                            yaxis: {\n                                min: s,\n                                max: r\n                            }\n                        };\n                        a.config.chart.events.selection(i.ctx, l), a.config.chart.brush.enabled && void 0 !== a.config.chart.events.brushScrolled && a.config.chart.events.brushScrolled(i.ctx, l);\n                    }, d));\n                }\n            }\n        },\n        {\n            key: \"selectionDrawn\",\n            value: function(t) {\n                var e, i, a = t.context, s = t.zoomtype, r = this.w, n = a, o = this.xyRatios, l = this.ctx.toolbar, h = r.globals.zoomEnabled ? n.zoomRect.node.getBoundingClientRect() : n.selectionRect.node.getBoundingClientRect(), c = n.gridRect.getBoundingClientRect(), d = h.left - c.left - r.globals.barPadForNumericAxis, u = h.right - c.left - r.globals.barPadForNumericAxis, g = h.top - c.top, p = h.bottom - c.top;\n                r.globals.isRangeBar ? (e = r.globals.yAxisScale[0].niceMin + d * o.invertedYRatio, i = r.globals.yAxisScale[0].niceMin + u * o.invertedYRatio) : (e = r.globals.xAxisScale.niceMin + d * o.xRatio, i = r.globals.xAxisScale.niceMin + u * o.xRatio);\n                var f = [], x = [];\n                if (r.config.yaxis.forEach(function(t, e) {\n                    var i = r.globals.seriesYAxisMap[e][0], a = r.globals.yAxisScale[e].niceMax - o.yRatio[i] * g, s = r.globals.yAxisScale[e].niceMax - o.yRatio[i] * p;\n                    f.push(a), x.push(s);\n                }), n.dragged && (n.dragX > 10 || n.dragY > 10) && e !== i) {\n                    if (r.globals.zoomEnabled) {\n                        var b = v.clone(r.globals.initialConfig.yaxis), m = v.clone(r.globals.initialConfig.xaxis);\n                        if (r.globals.zoomed = !0, r.config.xaxis.convertedCatToNumeric && (e = Math.floor(e), i = Math.floor(i), e < 1 && (e = 1, i = r.globals.dataPoints), i - e < 2 && (i = e + 1)), \"xy\" !== s && \"x\" !== s || (m = {\n                            min: e,\n                            max: i\n                        }), \"xy\" !== s && \"y\" !== s || b.forEach(function(t, e) {\n                            b[e].min = x[e], b[e].max = f[e];\n                        }), l) {\n                            var y = l.getBeforeZoomRange(m, b);\n                            y && (m = y.xaxis ? y.xaxis : m, b = y.yaxis ? y.yaxis : b);\n                        }\n                        var w = {\n                            xaxis: m\n                        };\n                        r.config.chart.group || (w.yaxis = b), n.ctx.updateHelpers._updateOptions(w, !1, n.w.config.chart.animations.dynamicAnimation.enabled), \"function\" == typeof r.config.chart.events.zoomed && l.zoomCallback(m, b);\n                    } else if (r.globals.selectionEnabled) {\n                        var k, A = null;\n                        k = {\n                            min: e,\n                            max: i\n                        }, \"xy\" !== s && \"y\" !== s || (A = v.clone(r.config.yaxis)).forEach(function(t, e) {\n                            A[e].min = x[e], A[e].max = f[e];\n                        }), r.globals.selection = n.selection, \"function\" == typeof r.config.chart.events.selection && r.config.chart.events.selection(n.ctx, {\n                            xaxis: k,\n                            yaxis: A\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"panDragging\",\n            value: function(t) {\n                var e = t.context, i = this.w, a = e;\n                if (void 0 !== i.globals.lastClientPosition.x) {\n                    var s = i.globals.lastClientPosition.x - a.clientX, r = i.globals.lastClientPosition.y - a.clientY;\n                    Math.abs(s) > Math.abs(r) && s > 0 ? this.moveDirection = \"left\" : Math.abs(s) > Math.abs(r) && s < 0 ? this.moveDirection = \"right\" : Math.abs(r) > Math.abs(s) && r > 0 ? this.moveDirection = \"up\" : Math.abs(r) > Math.abs(s) && r < 0 && (this.moveDirection = \"down\");\n                }\n                i.globals.lastClientPosition = {\n                    x: a.clientX,\n                    y: a.clientY\n                };\n                var n = i.globals.isRangeBar ? i.globals.minY : i.globals.minX, o = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n                a.panScrolled(n, o);\n            }\n        },\n        {\n            key: \"panScrolled\",\n            value: function(t, e) {\n                var i = this.w, a = this.xyRatios, s = v.clone(i.globals.initialConfig.yaxis), r = a.xRatio, n = i.globals.minX, o = i.globals.maxX;\n                i.globals.isRangeBar && (r = a.invertedYRatio, n = i.globals.minY, o = i.globals.maxY), \"left\" === this.moveDirection ? (t = n + i.globals.gridWidth / 15 * r, e = o + i.globals.gridWidth / 15 * r) : \"right\" === this.moveDirection && (t = n - i.globals.gridWidth / 15 * r, e = o - i.globals.gridWidth / 15 * r), i.globals.isRangeBar || (t < i.globals.initialMinX || e > i.globals.initialMaxX) && (t = n, e = o);\n                var l = {\n                    xaxis: {\n                        min: t,\n                        max: e\n                    }\n                };\n                i.config.chart.group || (l.yaxis = s), this.updateScrolledChart(l, t, e);\n            }\n        },\n        {\n            key: \"updateScrolledChart\",\n            value: function(t, e, i) {\n                var a = this.w;\n                if (this.ctx.updateHelpers._updateOptions(t, !1, !1), \"function\" == typeof a.config.chart.events.scrolled) {\n                    var s = {\n                        xaxis: {\n                            min: e,\n                            max: i\n                        }\n                    };\n                    a.config.chart.events.scrolled(this.ctx, s), this.ctx.events.fireEvent(\"scrolled\", s);\n                }\n            }\n        }\n    ]), a;\n}(), va = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx;\n    }\n    return s(t, [\n        {\n            key: \"getNearestValues\",\n            value: function(t) {\n                var e = t.hoverArea, i = t.elGrid, a = t.clientX, s = t.clientY, r = this.w, n = i.getBoundingClientRect(), o = n.width, l = n.height, h = o / (r.globals.dataPoints - 1), c = l / r.globals.dataPoints, d = this.hasBars();\n                !r.globals.comboCharts && !d || r.config.xaxis.convertedCatToNumeric || (h = o / r.globals.dataPoints);\n                var u = a - n.left - r.globals.barPadForNumericAxis, g = s - n.top;\n                u < 0 || g < 0 || u > o || g > l ? (e.classList.remove(\"hovering-zoom\"), e.classList.remove(\"hovering-pan\")) : r.globals.zoomEnabled ? (e.classList.remove(\"hovering-pan\"), e.classList.add(\"hovering-zoom\")) : r.globals.panEnabled && (e.classList.remove(\"hovering-zoom\"), e.classList.add(\"hovering-pan\"));\n                var p = Math.round(u / h), f = Math.floor(g / c);\n                d && !r.config.xaxis.convertedCatToNumeric && (p = Math.ceil(u / h), p -= 1);\n                var x = null, b = null, m = r.globals.seriesXvalues.map(function(t) {\n                    return t.filter(function(t) {\n                        return v.isNumber(t);\n                    });\n                }), y = r.globals.seriesYvalues.map(function(t) {\n                    return t.filter(function(t) {\n                        return v.isNumber(t);\n                    });\n                });\n                if (r.globals.isXNumeric) {\n                    var w = this.ttCtx.getElGrid().getBoundingClientRect(), k = u * (w.width / o), A = g * (w.height / l);\n                    x = (b = this.closestInMultiArray(k, A, m, y)).index, p = b.j, null !== x && r.globals.hasNullValues && (m = r.globals.seriesXvalues[x], p = (b = this.closestInArray(k, m)).j);\n                }\n                return r.globals.capturedSeriesIndex = null === x ? -1 : x, (!p || p < 1) && (p = 0), r.globals.isBarHorizontal ? r.globals.capturedDataPointIndex = f : r.globals.capturedDataPointIndex = p, {\n                    capturedSeries: x,\n                    j: r.globals.isBarHorizontal ? f : p,\n                    hoverX: u,\n                    hoverY: g\n                };\n            }\n        },\n        {\n            key: \"getFirstActiveXArray\",\n            value: function(t) {\n                for(var e = this.w, i = 0, a = t.map(function(t, e) {\n                    return t.length > 0 ? e : -1;\n                }), s = 0; s < a.length; s++)if (-1 !== a[s] && -1 === e.globals.collapsedSeriesIndices.indexOf(s) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) {\n                    i = a[s];\n                    break;\n                }\n                return i;\n            }\n        },\n        {\n            key: \"closestInMultiArray\",\n            value: function(t, e, i, a) {\n                for(var s, r = this.w, n = 1 / 0, o = null, l = null, h = 0; h < i.length; h++)if (s = h, -1 === r.globals.collapsedSeriesIndices.indexOf(s) && -1 === r.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) for(var c = i[h], d = a[h], u = Math.min(c.length, d.length), g = 0; g < u; g++){\n                    var p = t - c[g], f = Math.sqrt(p * p);\n                    if (!r.globals.allSeriesHasEqualX) {\n                        var x = e - d[g];\n                        f = Math.sqrt(p * p + x * x);\n                    }\n                    f < n && (n = f, o = h, l = g);\n                }\n                return {\n                    index: o,\n                    j: l\n                };\n            }\n        },\n        {\n            key: \"closestInArray\",\n            value: function(t, e) {\n                for(var i = e[0], a = null, s = Math.abs(t - i), r = 0; r < e.length; r++){\n                    var n = Math.abs(t - e[r]);\n                    n < s && (s = n, a = r);\n                }\n                return {\n                    j: a\n                };\n            }\n        },\n        {\n            key: \"isXoverlap\",\n            value: function(t) {\n                var e = [], i = this.w.globals.seriesX.filter(function(t) {\n                    return void 0 !== t[0];\n                });\n                if (i.length > 0) for(var a = 0; a < i.length - 1; a++)void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push(\"unEqual\");\n                return 0 === e.length;\n            }\n        },\n        {\n            key: \"isInitialSeriesSameLen\",\n            value: function() {\n                for(var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++)if (e[i].data.length !== e[i + 1].data.length) {\n                    t = !1;\n                    break;\n                }\n                return t;\n            }\n        },\n        {\n            key: \"getBarsHeight\",\n            value: function(t) {\n                return f(t).reduce(function(t, e) {\n                    return t + e.getBBox().height;\n                }, 0);\n            }\n        },\n        {\n            key: \"getElMarkers\",\n            value: function(t) {\n                return \"number\" == typeof t ? this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-series-markers-wrap > *\")) : this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap > *\");\n            }\n        },\n        {\n            key: \"getAllMarkers\",\n            value: function() {\n                var t = this, e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap\");\n                i = f(i), e && (i = i.filter(function(e) {\n                    var i = Number(e.getAttribute(\"data:realIndex\"));\n                    return -1 === t.w.globals.collapsedSeriesIndices.indexOf(i);\n                })), i.sort(function(t, e) {\n                    var i = Number(t.getAttribute(\"data:realIndex\")), a = Number(e.getAttribute(\"data:realIndex\"));\n                    return a < i ? 1 : a > i ? -1 : 0;\n                });\n                var a = [];\n                return i.forEach(function(t) {\n                    a.push(t.querySelector(\".apexcharts-marker\"));\n                }), a;\n            }\n        },\n        {\n            key: \"hasMarkers\",\n            value: function(t) {\n                return this.getElMarkers(t).length > 0;\n            }\n        },\n        {\n            key: \"getPathFromPoint\",\n            value: function(t, e) {\n                var i = Number(t.getAttribute(\"cx\")), a = Number(t.getAttribute(\"cy\")), s = t.getAttribute(\"shape\");\n                return new Mi(this.ctx).getMarkerPath(i, a, s, e);\n            }\n        },\n        {\n            key: \"getElBars\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series\");\n            }\n        },\n        {\n            key: \"hasBars\",\n            value: function() {\n                return this.getElBars().length > 0;\n            }\n        },\n        {\n            key: \"getHoverMarkerSize\",\n            value: function(t) {\n                var e = this.w, i = e.config.markers.hover.size;\n                return void 0 === i && (i = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), i;\n            }\n        },\n        {\n            key: \"toggleAllTooltipSeriesGroups\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-tooltip-series-group\"));\n                for(var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++)\"enable\" === t ? (a[s].classList.add(\"apexcharts-active\"), a[s].style.display = e.config.tooltip.items.display) : (a[s].classList.remove(\"apexcharts-active\"), a[s].style.display = \"none\");\n            }\n        }\n    ]), t;\n}(), ya = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.ctx = e.ctx, this.ttCtx = e, this.tooltipUtil = new va(e);\n    }\n    return s(t, [\n        {\n            key: \"drawSeriesTexts\",\n            value: function(t) {\n                var e = t.shared, i = void 0 === e || e, a = t.ttItems, s = t.i, r = void 0 === s ? 0 : s, n = t.j, o = void 0 === n ? null : n, l = t.y1, h = t.y2, c = t.e, d = this.w;\n                void 0 !== d.config.tooltip.custom ? this.handleCustomTooltip({\n                    i: r,\n                    j: o,\n                    y1: l,\n                    y2: h,\n                    w: d\n                }) : this.toggleActiveInactiveSeries(i, r);\n                var u = this.getValuesToPrint({\n                    i: r,\n                    j: o\n                });\n                this.printLabels({\n                    i: r,\n                    j: o,\n                    values: u,\n                    ttItems: a,\n                    shared: i,\n                    e: c\n                });\n                var g = this.ttCtx.getElTooltip();\n                this.ttCtx.tooltipRect.ttWidth = g.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = g.getBoundingClientRect().height;\n            }\n        },\n        {\n            key: \"printLabels\",\n            value: function(t) {\n                var e, i = this, a = t.i, s = t.j, r = t.values, n = t.ttItems, o = t.shared, l = t.e, h = this.w, c = [], d = function(t) {\n                    return h.globals.seriesGoals[t] && h.globals.seriesGoals[t][s] && Array.isArray(h.globals.seriesGoals[t][s]);\n                }, g = r.xVal, p = r.zVal, f = r.xAxisTTVal, x = \"\", b = h.globals.colors[a];\n                null !== s && h.config.plotOptions.bar.distributed && (b = h.globals.colors[s]);\n                for(var m = function(t, r) {\n                    var m = i.getFormatters(a);\n                    x = i.getSeriesName({\n                        fn: m.yLbTitleFormatter,\n                        index: a,\n                        seriesIndex: a,\n                        j: s\n                    }), \"treemap\" === h.config.chart.type && (x = m.yLbTitleFormatter(String(h.config.series[a].data[s].x), {\n                        series: h.globals.series,\n                        seriesIndex: a,\n                        dataPointIndex: s,\n                        w: h\n                    }));\n                    var v = h.config.tooltip.inverseOrder ? r : t;\n                    if (h.globals.axisCharts) {\n                        var y = function(t) {\n                            var e, i, a, r;\n                            return h.globals.isRangeData ? m.yLbFormatter(null === (e = h.globals.seriesRangeStart) || void 0 === e || null === (i = e[t]) || void 0 === i ? void 0 : i[s], {\n                                series: h.globals.seriesRangeStart,\n                                seriesIndex: t,\n                                dataPointIndex: s,\n                                w: h\n                            }) + \" - \" + m.yLbFormatter(null === (a = h.globals.seriesRangeEnd) || void 0 === a || null === (r = a[t]) || void 0 === r ? void 0 : r[s], {\n                                series: h.globals.seriesRangeEnd,\n                                seriesIndex: t,\n                                dataPointIndex: s,\n                                w: h\n                            }) : m.yLbFormatter(h.globals.series[t][s], {\n                                series: h.globals.series,\n                                seriesIndex: t,\n                                dataPointIndex: s,\n                                w: h\n                            });\n                        };\n                        if (o) m = i.getFormatters(v), x = i.getSeriesName({\n                            fn: m.yLbTitleFormatter,\n                            index: v,\n                            seriesIndex: a,\n                            j: s\n                        }), b = h.globals.colors[v], e = y(v), d(v) && (c = h.globals.seriesGoals[v][s].map(function(t) {\n                            return {\n                                attrs: t,\n                                val: m.yLbFormatter(t.value, {\n                                    seriesIndex: v,\n                                    dataPointIndex: s,\n                                    w: h\n                                })\n                            };\n                        }));\n                        else {\n                            var w, k = null == l || null === (w = l.target) || void 0 === w ? void 0 : w.getAttribute(\"fill\");\n                            k && (-1 !== k.indexOf(\"url\") ? -1 !== k.indexOf(\"Pattern\") && (b = h.globals.dom.baseEl.querySelector(k.substr(4).slice(0, -1)).childNodes[0].getAttribute(\"stroke\")) : b = k), e = y(a), d(a) && Array.isArray(h.globals.seriesGoals[a][s]) && (c = h.globals.seriesGoals[a][s].map(function(t) {\n                                return {\n                                    attrs: t,\n                                    val: m.yLbFormatter(t.value, {\n                                        seriesIndex: a,\n                                        dataPointIndex: s,\n                                        w: h\n                                    })\n                                };\n                            }));\n                        }\n                    }\n                    null === s && (e = m.yLbFormatter(h.globals.series[a], u(u({}, h), {}, {\n                        seriesIndex: a,\n                        dataPointIndex: a\n                    }))), i.DOMHandling({\n                        i: a,\n                        t: v,\n                        j: s,\n                        ttItems: n,\n                        values: {\n                            val: e,\n                            goalVals: c,\n                            xVal: g,\n                            xAxisTTVal: f,\n                            zVal: p\n                        },\n                        seriesName: x,\n                        shared: o,\n                        pColor: b\n                    });\n                }, v = 0, y = h.globals.series.length - 1; v < h.globals.series.length; v++, y--)m(v, y);\n            }\n        },\n        {\n            key: \"getFormatters\",\n            value: function(t) {\n                var e, i = this.w, a = i.globals.yLabelFormatters[t];\n                return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (a = i.globals.ttVal.formatter, \"function\" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, \"function\" != typeof a && (a = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function(t) {\n                    return t;\n                }), \"function\" != typeof e && (e = function(t) {\n                    return t ? t + \": \" : \"\";\n                }), {\n                    yLbFormatter: a,\n                    yLbTitleFormatter: e\n                };\n            }\n        },\n        {\n            key: \"getSeriesName\",\n            value: function(t) {\n                var e = t.fn, i = t.index, a = t.seriesIndex, s = t.j, r = this.w;\n                return e(String(r.globals.seriesNames[i]), {\n                    series: r.globals.series,\n                    seriesIndex: a,\n                    dataPointIndex: s,\n                    w: r\n                });\n            }\n        },\n        {\n            key: \"DOMHandling\",\n            value: function(t) {\n                t.i;\n                var e = t.t, i = t.j, a = t.ttItems, s = t.values, r = t.seriesName, n = t.shared, o = t.pColor, l = this.w, h = this.ttCtx, c = s.val, d = s.goalVals, u = s.xVal, g = s.xAxisTTVal, p = s.zVal, f = null;\n                f = a[e].children, l.config.tooltip.fillSeriesColor && (a[e].style.backgroundColor = o, f[0].style.display = \"none\"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = l.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-title\")), h.tooltipTitle.innerHTML = u), h.isXAxisTooltipEnabled && (h.xaxisTooltipText.innerHTML = \"\" !== g ? g : u);\n                var x = a[e].querySelector(\".apexcharts-tooltip-text-y-label\");\n                x && (x.innerHTML = r || \"\");\n                var b = a[e].querySelector(\".apexcharts-tooltip-text-y-value\");\n                b && (b.innerHTML = void 0 !== c ? c : \"\"), f[0] && f[0].classList.contains(\"apexcharts-tooltip-marker\") && (l.config.tooltip.marker.fillColors && Array.isArray(l.config.tooltip.marker.fillColors) && (o = l.config.tooltip.marker.fillColors[e]), l.config.tooltip.fillSeriesColor ? f[0].style.backgroundColor = o : f[0].style.color = o), l.config.tooltip.marker.show || (f[0].style.display = \"none\");\n                var m = a[e].querySelector(\".apexcharts-tooltip-text-goals-label\"), v = a[e].querySelector(\".apexcharts-tooltip-text-goals-value\");\n                if (d.length && l.globals.seriesGoals[e]) {\n                    var y = function() {\n                        var t = \"<div>\", e = \"<div>\";\n                        d.forEach(function(i, a) {\n                            t += ' <div style=\"display: flex\"><span class=\"apexcharts-tooltip-marker\" style=\"background-color: '.concat(i.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;\"></span> ').concat(i.attrs.name, \"</div>\"), e += \"<div>\".concat(i.val, \"</div>\");\n                        }), m.innerHTML = t + \"</div>\", v.innerHTML = e + \"</div>\";\n                    };\n                    n ? l.globals.seriesGoals[e][i] && Array.isArray(l.globals.seriesGoals[e][i]) ? y() : (m.innerHTML = \"\", v.innerHTML = \"\") : y();\n                } else m.innerHTML = \"\", v.innerHTML = \"\";\n                null !== p && (a[e].querySelector(\".apexcharts-tooltip-text-z-label\").innerHTML = l.config.tooltip.z.title, a[e].querySelector(\".apexcharts-tooltip-text-z-value\").innerHTML = void 0 !== p ? p : \"\");\n                if (n && f[0]) {\n                    if (l.config.tooltip.hideEmptySeries) {\n                        var w = a[e].querySelector(\".apexcharts-tooltip-marker\"), k = a[e].querySelector(\".apexcharts-tooltip-text\");\n                        0 == parseFloat(c) ? (w.style.display = \"none\", k.style.display = \"none\") : (w.style.display = \"block\", k.style.display = \"block\");\n                    }\n                    null == c || l.globals.ancillaryCollapsedSeriesIndices.indexOf(e) > -1 || l.globals.collapsedSeriesIndices.indexOf(e) > -1 || Array.isArray(h.tConfig.enabledOnSeries) && -1 === h.tConfig.enabledOnSeries.indexOf(e) ? f[0].parentNode.style.display = \"none\" : f[0].parentNode.style.display = l.config.tooltip.items.display;\n                } else Array.isArray(h.tConfig.enabledOnSeries) && -1 === h.tConfig.enabledOnSeries.indexOf(e) && (f[0].parentNode.style.display = \"none\");\n            }\n        },\n        {\n            key: \"toggleActiveInactiveSeries\",\n            value: function(t, e) {\n                var i = this.w;\n                if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups(\"enable\");\n                else {\n                    this.tooltipUtil.toggleAllTooltipSeriesGroups(\"disable\");\n                    var a = i.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-series-group-\".concat(e));\n                    a && (a.classList.add(\"apexcharts-active\"), a.style.display = i.config.tooltip.items.display);\n                }\n            }\n        },\n        {\n            key: \"getValuesToPrint\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = this.w, s = this.ctx.series.filteredSeriesX(), r = \"\", n = \"\", o = null, l = null, h = {\n                    series: a.globals.series,\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    w: a\n                }, c = a.globals.ttZFormatter;\n                null === i ? l = a.globals.series[e] : a.globals.isXNumeric && \"treemap\" !== a.config.chart.type ? (r = s[e][i], 0 === s[e].length && (r = s[this.tooltipUtil.getFirstActiveXArray(s)][i])) : r = new $i(this.ctx).isFormatXY() ? void 0 !== a.config.series[e].data[i] ? a.config.series[e].data[i].x : \"\" : void 0 !== a.globals.labels[i] ? a.globals.labels[i] : \"\";\n                var d = r;\n                a.globals.isXNumeric && \"datetime\" === a.config.xaxis.type ? r = new Xi(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, d, d, {\n                    i: void 0,\n                    dateFormatter: new zi(this.ctx).formatDate,\n                    w: this.w\n                }) : r = a.globals.isBarHorizontal ? a.globals.yLabelFormatters[0](d, h) : a.globals.xLabelFormatter(d, h);\n                return void 0 !== a.config.tooltip.x.formatter && (r = a.globals.ttKeyFormatter(d, h)), a.globals.seriesZ.length > 0 && a.globals.seriesZ[e].length > 0 && (o = c(a.globals.seriesZ[e][i], a)), n = \"function\" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(d, h) : r, {\n                    val: Array.isArray(l) ? l.join(\" \") : l,\n                    xVal: Array.isArray(r) ? r.join(\" \") : r,\n                    xAxisTTVal: Array.isArray(n) ? n.join(\" \") : n,\n                    zVal: o\n                };\n            }\n        },\n        {\n            key: \"handleCustomTooltip\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = t.y1, s = t.y2, r = t.w, n = this.ttCtx.getElTooltip(), o = r.config.tooltip.custom;\n                Array.isArray(o) && o[e] && (o = o[e]);\n                var l = o({\n                    ctx: this.ctx,\n                    series: r.globals.series,\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    y1: a,\n                    y2: s,\n                    w: r\n                });\n                \"string\" == typeof l || \"number\" == typeof l ? n.innerHTML = l : (l instanceof Element || \"string\" == typeof l.nodeName) && (n.innerHTML = \"\", n.appendChild(l.cloneNode(!0)));\n            }\n        }\n    ]), t;\n}(), wa = function() {\n    function t(e) {\n        i(this, t), this.ttCtx = e, this.ctx = e.ctx, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"moveXCrosshairs\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = this.ttCtx, a = this.w, s = i.getElXCrosshairs(), r = t - i.xcrosshairsWidth / 2, n = a.globals.labels.slice().length;\n                if (null !== e && (r = a.globals.gridWidth / n * e), null === s || a.globals.isBarHorizontal || (s.setAttribute(\"x\", r), s.setAttribute(\"x1\", r), s.setAttribute(\"x2\", r), s.setAttribute(\"y2\", a.globals.gridHeight), s.classList.add(\"apexcharts-active\")), r < 0 && (r = 0), r > a.globals.gridWidth && (r = a.globals.gridWidth), i.isXAxisTooltipEnabled) {\n                    var o = r;\n                    \"tickWidth\" !== a.config.xaxis.crosshairs.width && \"barWidth\" !== a.config.xaxis.crosshairs.width || (o = r + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(o);\n                }\n            }\n        },\n        {\n            key: \"moveYCrosshairs\",\n            value: function(t) {\n                var e = this.ttCtx;\n                null !== e.ycrosshairs && Mi.setAttrs(e.ycrosshairs, {\n                    y1: t,\n                    y2: t\n                }), null !== e.ycrosshairsHidden && Mi.setAttrs(e.ycrosshairsHidden, {\n                    y1: t,\n                    y2: t\n                });\n            }\n        },\n        {\n            key: \"moveXAxisTooltip\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {\n                    i.xaxisTooltip.classList.add(\"apexcharts-active\");\n                    var a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;\n                    if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {\n                        t += e.globals.translateX;\n                        var s;\n                        s = new Mi(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = s.width + \"px\", i.xaxisTooltip.style.left = t + \"px\", i.xaxisTooltip.style.top = a + \"px\";\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveYAxisTooltip\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n                var a = parseInt(i.ycrosshairsHidden.getAttribute(\"y1\"), 10), s = e.globals.translateY + a, r = i.yaxisTTEls[t].getBoundingClientRect(), n = r.height, o = e.globals.translateYAxisX[t] - 2;\n                e.config.yaxis[t].opposite && (o -= r.width), s -= n / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) && s > 0 && s < e.globals.gridHeight ? (i.yaxisTTEls[t].classList.add(\"apexcharts-active\"), i.yaxisTTEls[t].style.top = s + \"px\", i.yaxisTTEls[t].style.left = o + e.config.yaxis[t].tooltip.offsetX + \"px\") : i.yaxisTTEls[t].classList.remove(\"apexcharts-active\");\n            }\n        },\n        {\n            key: \"moveTooltip\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = this.w, s = this.ttCtx, r = s.getElTooltip(), n = s.tooltipRect, o = null !== i ? parseFloat(i) : 1, l = parseFloat(t) + o + 5, h = parseFloat(e) + o / 2;\n                if (l > a.globals.gridWidth / 2 && (l = l - n.ttWidth - o - 10), l > a.globals.gridWidth - n.ttWidth - 10 && (l = a.globals.gridWidth - n.ttWidth), l < -20 && (l = -20), a.config.tooltip.followCursor) {\n                    var c = s.getElGrid().getBoundingClientRect();\n                    (l = s.e.clientX - c.left) > a.globals.gridWidth / 2 && (l -= s.tooltipRect.ttWidth), (h = s.e.clientY + a.globals.translateY - c.top) > a.globals.gridHeight / 2 && (h -= s.tooltipRect.ttHeight);\n                } else a.globals.isBarHorizontal || n.ttHeight / 2 + h > a.globals.gridHeight && (h = a.globals.gridHeight - n.ttHeight + a.globals.translateY);\n                isNaN(l) || (l += a.globals.translateX, r.style.left = l + \"px\", r.style.top = h + \"px\");\n            }\n        },\n        {\n            key: \"moveMarkers\",\n            value: function(t, e) {\n                var i = this.w, a = this.ttCtx;\n                if (i.globals.markers.size[t] > 0) for(var s = i.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-marker\")), r = 0; r < s.length; r++)parseInt(s[r].getAttribute(\"rel\"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[r]));\n                else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);\n            }\n        },\n        {\n            key: \"moveDynamicPointOnHover\",\n            value: function(t, e) {\n                var i, a, s, r, n = this.w, o = this.ttCtx, l = new Mi(this.ctx), h = n.globals.pointsArray, c = o.tooltipUtil.getHoverMarkerSize(e), d = n.config.series[e].type;\n                if (!d || \"column\" !== d && \"candlestick\" !== d && \"boxPlot\" !== d) {\n                    s = null === (i = h[e][t]) || void 0 === i ? void 0 : i[0], r = (null === (a = h[e][t]) || void 0 === a ? void 0 : a[1]) || 0;\n                    var u = n.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] .apexcharts-series-markers path\"));\n                    if (u && r < n.globals.gridHeight && r > 0) {\n                        var g = u.getAttribute(\"shape\"), p = l.getMarkerPath(s, r, g, 1.5 * c);\n                        u.setAttribute(\"d\", p);\n                    }\n                    this.moveXCrosshairs(s), o.fixedTooltip || this.moveTooltip(s, r, c);\n                }\n            }\n        },\n        {\n            key: \"moveDynamicPointsOnHover\",\n            value: function(t) {\n                var e, i = this.ttCtx, a = i.w, s = 0, r = 0, n = a.globals.pointsArray, o = new Zi(this.ctx), l = new Mi(this.ctx);\n                e = o.getActiveConfigSeriesIndex(\"asc\", [\n                    \"line\",\n                    \"area\",\n                    \"scatter\",\n                    \"bubble\"\n                ]);\n                var h = i.tooltipUtil.getHoverMarkerSize(e);\n                if (n[e] && (s = n[e][t][0], r = n[e][t][1]), !isNaN(s)) {\n                    var c = i.tooltipUtil.getAllMarkers();\n                    if (c.length) for(var d = 0; d < a.globals.series.length; d++){\n                        var u = n[d];\n                        if (a.globals.comboCharts && void 0 === u && c.splice(d, 0, null), u && u.length) {\n                            var g = n[d][t][1], p = void 0;\n                            c[d].setAttribute(\"cx\", s);\n                            var f = c[d].getAttribute(\"shape\");\n                            if (\"rangeArea\" === a.config.chart.type && !a.globals.comboCharts) {\n                                var x = t + a.globals.series[d].length;\n                                p = n[d][x][1], g -= Math.abs(g - p) / 2;\n                            }\n                            if (null !== g && !isNaN(g) && g < a.globals.gridHeight + h && g + h > 0) {\n                                var b = l.getMarkerPath(s, g, f, h);\n                                c[d].setAttribute(\"d\", b);\n                            } else c[d].setAttribute(\"d\", \"\");\n                        }\n                    }\n                    this.moveXCrosshairs(s), i.fixedTooltip || this.moveTooltip(s, r || a.globals.gridHeight, h);\n                }\n            }\n        },\n        {\n            key: \"moveStickyTooltipOverBars\",\n            value: function(t, e) {\n                var i = this.w, a = this.ttCtx, s = i.globals.columnSeries ? i.globals.columnSeries.length : i.globals.series.length;\n                i.config.chart.stacked && (s = i.globals.barGroups.length);\n                var r = s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1;\n                i.globals.isBarHorizontal && (r = new Zi(this.ctx).getActiveConfigSeriesIndex(\"desc\") + 1);\n                var n = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='\".concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-boxPlot-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"']\"));\n                n || \"number\" != typeof e || (n = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-candlestick-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-boxPlot-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-rangebar-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"']\")));\n                var o = n ? parseFloat(n.getAttribute(\"cx\")) : 0, l = n ? parseFloat(n.getAttribute(\"cy\")) : 0, h = n ? parseFloat(n.getAttribute(\"barWidth\")) : 0, c = a.getElGrid().getBoundingClientRect(), d = n && (n.classList.contains(\"apexcharts-candlestick-area\") || n.classList.contains(\"apexcharts-boxPlot-area\"));\n                i.globals.isXNumeric ? (n && !d && (o -= s % 2 != 0 ? h / 2 : 0), n && d && (o -= h / 2)) : i.globals.isBarHorizontal || (o = a.xAxisTicksPositions[t - 1] + a.dataPointsDividedWidth / 2, isNaN(o) && (o = a.xAxisTicksPositions[t] - a.dataPointsDividedWidth / 2)), i.globals.isBarHorizontal ? l -= a.tooltipRect.ttHeight : i.config.tooltip.followCursor ? l = a.e.clientY - c.top - a.tooltipRect.ttHeight / 2 : l + a.tooltipRect.ttHeight + 15 > i.globals.gridHeight && (l = i.globals.gridHeight), i.globals.isBarHorizontal || this.moveXCrosshairs(o), a.fixedTooltip || this.moveTooltip(o, l || i.globals.gridHeight);\n            }\n        }\n    ]), t;\n}(), ka = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx, this.tooltipPosition = new wa(e);\n    }\n    return s(t, [\n        {\n            key: \"drawDynamicPoints\",\n            value: function() {\n                var t = this.w, e = new Mi(this.ctx), i = new Vi(this.ctx), a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n                a = f(a), t.config.chart.stacked && a.sort(function(t, e) {\n                    return parseFloat(t.getAttribute(\"data:realIndex\")) - parseFloat(e.getAttribute(\"data:realIndex\"));\n                });\n                for(var s = 0; s < a.length; s++){\n                    var r = a[s].querySelector(\".apexcharts-series-markers-wrap\");\n                    if (null !== r) {\n                        var n = void 0, o = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n                        \"line\" !== t.config.chart.type && \"area\" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (o += \" no-pointer-events\");\n                        var l = i.getMarkerConfig({\n                            cssClass: o,\n                            seriesIndex: Number(r.getAttribute(\"data:realIndex\"))\n                        });\n                        (n = e.drawMarker(0, 0, l)).node.setAttribute(\"default-marker-size\", 0);\n                        var h = document.createElementNS(t.globals.SVGNS, \"g\");\n                        h.classList.add(\"apexcharts-series-markers\"), h.appendChild(n.node), r.appendChild(h);\n                    }\n                }\n            }\n        },\n        {\n            key: \"enlargeCurrentPoint\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s = this.w;\n                \"bubble\" !== s.config.chart.type && this.newPointSize(t, e);\n                var r = e.getAttribute(\"cx\"), n = e.getAttribute(\"cy\");\n                if (null !== i && null !== a && (r = i, n = a), this.tooltipPosition.moveXCrosshairs(r), !this.fixedTooltip) {\n                    if (\"radar\" === s.config.chart.type) {\n                        var o = this.ttCtx.getElGrid().getBoundingClientRect();\n                        r = this.ttCtx.e.clientX - o.left;\n                    }\n                    this.tooltipPosition.moveTooltip(r, n, s.config.markers.hover.size);\n                }\n            }\n        },\n        {\n            key: \"enlargePoints\",\n            value: function(t) {\n                for(var e = this.w, i = this, a = this.ttCtx, s = t, r = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), n = e.config.markers.hover.size, o = 0; o < r.length; o++){\n                    var l = r[o].getAttribute(\"rel\"), h = r[o].getAttribute(\"index\");\n                    if (void 0 === n && (n = e.globals.markers.size[h] + e.config.markers.hover.sizeOffset), s === parseInt(l, 10)) {\n                        i.newPointSize(s, r[o]);\n                        var c = r[o].getAttribute(\"cx\"), d = r[o].getAttribute(\"cy\");\n                        i.tooltipPosition.moveXCrosshairs(c), a.fixedTooltip || i.tooltipPosition.moveTooltip(c, d, n);\n                    } else i.oldPointSize(r[o]);\n                }\n            }\n        },\n        {\n            key: \"newPointSize\",\n            value: function(t, e) {\n                var i = this.w, a = i.config.markers.hover.size, s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;\n                if (\"0\" !== s.getAttribute(\"default-marker-size\")) {\n                    var r = parseInt(s.getAttribute(\"index\"), 10);\n                    void 0 === a && (a = i.globals.markers.size[r] + i.config.markers.hover.sizeOffset), a < 0 && (a = 0);\n                    var n = this.ttCtx.tooltipUtil.getPathFromPoint(e, a);\n                    e.setAttribute(\"d\", n);\n                }\n            }\n        },\n        {\n            key: \"oldPointSize\",\n            value: function(t) {\n                var e = parseFloat(t.getAttribute(\"default-marker-size\")), i = this.ttCtx.tooltipUtil.getPathFromPoint(t, e);\n                t.setAttribute(\"d\", i);\n            }\n        },\n        {\n            key: \"resetPointsSize\",\n            value: function() {\n                for(var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), e = 0; e < t.length; e++){\n                    var i = parseFloat(t[e].getAttribute(\"default-marker-size\"));\n                    if (v.isNumber(i) && i > 0) {\n                        var a = this.ttCtx.tooltipUtil.getPathFromPoint(t[e], i);\n                        t[e].setAttribute(\"d\", a);\n                    } else t[e].setAttribute(\"d\", \"M0,0\");\n                }\n            }\n        }\n    ]), t;\n}(), Aa = function() {\n    function t(e) {\n        i(this, t), this.w = e.w;\n        var a = this.w;\n        this.ttCtx = e, this.isVerticalGroupedRangeBar = !a.globals.isBarHorizontal && \"rangeBar\" === a.config.chart.type && a.config.plotOptions.bar.rangeBarGroupRows;\n    }\n    return s(t, [\n        {\n            key: \"getAttr\",\n            value: function(t, e) {\n                return parseFloat(t.target.getAttribute(e));\n            }\n        },\n        {\n            key: \"handleHeatTreeTooltip\",\n            value: function(t) {\n                var e = t.e, i = t.opt, a = t.x, s = t.y, r = t.type, n = this.ttCtx, o = this.w;\n                if (e.target.classList.contains(\"apexcharts-\".concat(r, \"-rect\"))) {\n                    var l = this.getAttr(e, \"i\"), h = this.getAttr(e, \"j\"), c = this.getAttr(e, \"cx\"), d = this.getAttr(e, \"cy\"), u = this.getAttr(e, \"width\"), g = this.getAttr(e, \"height\");\n                    if (n.tooltipLabels.drawSeriesTexts({\n                        ttItems: i.ttItems,\n                        i: l,\n                        j: h,\n                        shared: !1,\n                        e: e\n                    }), o.globals.capturedSeriesIndex = l, o.globals.capturedDataPointIndex = h, a = c + n.tooltipRect.ttWidth / 2 + u, s = d + n.tooltipRect.ttHeight / 2 - g / 2, n.tooltipPosition.moveXCrosshairs(c + u / 2), a > o.globals.gridWidth / 2 && (a = c - n.tooltipRect.ttWidth / 2 + u), n.w.config.tooltip.followCursor) {\n                        var p = o.globals.dom.elWrap.getBoundingClientRect();\n                        a = o.globals.clientX - p.left - (a > o.globals.gridWidth / 2 ? n.tooltipRect.ttWidth : 0), s = o.globals.clientY - p.top - (s > o.globals.gridHeight / 2 ? n.tooltipRect.ttHeight : 0);\n                    }\n                }\n                return {\n                    x: a,\n                    y: s\n                };\n            }\n        },\n        {\n            key: \"handleMarkerTooltip\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = t.x, n = t.y, o = this.w, l = this.ttCtx;\n                if (a.target.classList.contains(\"apexcharts-marker\")) {\n                    var h = parseInt(s.paths.getAttribute(\"cx\"), 10), c = parseInt(s.paths.getAttribute(\"cy\"), 10), d = parseFloat(s.paths.getAttribute(\"val\"));\n                    if (i = parseInt(s.paths.getAttribute(\"rel\"), 10), e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute(\"rel\"), 10) - 1, l.intersect) {\n                        var u = v.findAncestor(s.paths, \"apexcharts-series\");\n                        u && (e = parseInt(u.getAttribute(\"data:realIndex\"), 10));\n                    }\n                    if (l.tooltipLabels.drawSeriesTexts({\n                        ttItems: s.ttItems,\n                        i: e,\n                        j: i,\n                        shared: !l.showOnIntersect && o.config.tooltip.shared,\n                        e: a\n                    }), \"mouseup\" === a.type && l.markerClick(a, e, i), o.globals.capturedSeriesIndex = e, o.globals.capturedDataPointIndex = i, r = h, n = c + o.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {\n                        var g = l.getElGrid().getBoundingClientRect();\n                        n = l.e.clientY + o.globals.translateY - g.top;\n                    }\n                    d < 0 && (n = c), l.marker.enlargeCurrentPoint(i, s.paths, r, n);\n                }\n                return {\n                    x: r,\n                    y: n\n                };\n            }\n        },\n        {\n            key: \"handleBarTooltip\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = this.w, n = this.ttCtx, o = n.getElTooltip(), l = 0, h = 0, c = 0, d = this.getBarTooltipXY({\n                    e: a,\n                    opt: s\n                });\n                if (null !== d.j || 0 !== d.barHeight || 0 !== d.barWidth) {\n                    e = d.i;\n                    var u = d.j;\n                    if (r.globals.capturedSeriesIndex = e, r.globals.capturedDataPointIndex = u, r.globals.isBarHorizontal && n.tooltipUtil.hasBars() || !r.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(r.config.stroke.width) ? r.config.stroke.width[e] : r.config.stroke.width, l = h) : r.globals.comboCharts || r.config.tooltip.shared || (l /= 2), isNaN(c) && (c = r.globals.svgHeight - n.tooltipRect.ttHeight), parseInt(s.paths.parentNode.getAttribute(\"data:realIndex\"), 10), h + n.tooltipRect.ttWidth > r.globals.gridWidth ? h -= n.tooltipRect.ttWidth : h < 0 && (h = 0), n.w.config.tooltip.followCursor) {\n                        var g = n.getElGrid().getBoundingClientRect();\n                        c = n.e.clientY - g.top;\n                    }\n                    null === n.tooltip && (n.tooltip = r.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\")), r.config.tooltip.shared || (r.globals.comboBarCount > 0 ? n.tooltipPosition.moveXCrosshairs(l + i / 2) : n.tooltipPosition.moveXCrosshairs(l)), !n.fixedTooltip && (!r.config.tooltip.shared || r.globals.isBarHorizontal && n.tooltipUtil.hasBars()) && (c = c + r.globals.translateY - n.tooltipRect.ttHeight / 2, o.style.left = h + r.globals.translateX + \"px\", o.style.top = c + \"px\");\n                }\n            }\n        },\n        {\n            key: \"getBarTooltipXY\",\n            value: function(t) {\n                var e = this, i = t.e, a = t.opt, s = this.w, r = null, n = this.ttCtx, o = 0, l = 0, h = 0, c = 0, d = 0, u = i.target.classList;\n                if (u.contains(\"apexcharts-bar-area\") || u.contains(\"apexcharts-candlestick-area\") || u.contains(\"apexcharts-boxPlot-area\") || u.contains(\"apexcharts-rangebar-area\")) {\n                    var g = i.target, p = g.getBoundingClientRect(), f = a.elGrid.getBoundingClientRect(), x = p.height;\n                    d = p.height;\n                    var b = p.width, m = parseInt(g.getAttribute(\"cx\"), 10), v = parseInt(g.getAttribute(\"cy\"), 10);\n                    c = parseFloat(g.getAttribute(\"barWidth\"));\n                    var y = \"touchmove\" === i.type ? i.touches[0].clientX : i.clientX;\n                    r = parseInt(g.getAttribute(\"j\"), 10), o = parseInt(g.parentNode.getAttribute(\"rel\"), 10) - 1;\n                    var w = g.getAttribute(\"data-range-y1\"), k = g.getAttribute(\"data-range-y2\");\n                    s.globals.comboCharts && (o = parseInt(g.parentNode.getAttribute(\"data:realIndex\"), 10));\n                    var A = function(t) {\n                        return s.globals.isXNumeric ? m - b / 2 : e.isVerticalGroupedRangeBar ? m + b / 2 : m - n.dataPointsDividedWidth + b / 2;\n                    }, C = function() {\n                        return v - n.dataPointsDividedHeight + x / 2 - n.tooltipRect.ttHeight / 2;\n                    };\n                    n.tooltipLabels.drawSeriesTexts({\n                        ttItems: a.ttItems,\n                        i: o,\n                        j: r,\n                        y1: w ? parseInt(w, 10) : null,\n                        y2: k ? parseInt(k, 10) : null,\n                        shared: !n.showOnIntersect && s.config.tooltip.shared,\n                        e: i\n                    }), s.config.tooltip.followCursor ? s.globals.isBarHorizontal ? (l = y - f.left + 15, h = C()) : (l = A(), h = i.clientY - f.top - n.tooltipRect.ttHeight / 2 - 15) : s.globals.isBarHorizontal ? ((l = m) < n.xyRatios.baseLineInvertedY && (l = m - n.tooltipRect.ttWidth), h = C()) : (l = A(), h = v);\n                }\n                return {\n                    x: l,\n                    y: h,\n                    barHeight: d,\n                    barWidth: c,\n                    i: o,\n                    j: r\n                };\n            }\n        }\n    ]), t;\n}(), Ca = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.ttCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"drawXaxisTooltip\",\n            value: function() {\n                var t = this.w, e = this.ttCtx, i = \"bottom\" === t.config.xaxis.position;\n                e.xaxisOffY = i ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;\n                var a = i ? \"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom\" : \"apexcharts-xaxistooltip apexcharts-xaxistooltip-top\", s = t.globals.dom.elWrap;\n                e.isXAxisTooltipEnabled && null === t.globals.dom.baseEl.querySelector(\".apexcharts-xaxistooltip\") && (e.xaxisTooltip = document.createElement(\"div\"), e.xaxisTooltip.setAttribute(\"class\", a + \" apexcharts-theme-\" + t.config.tooltip.theme), s.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement(\"div\"), e.xaxisTooltipText.classList.add(\"apexcharts-xaxistooltip-text\"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));\n            }\n        },\n        {\n            key: \"drawYaxisTooltip\",\n            value: function() {\n                for(var t = this.w, e = this.ttCtx, i = 0; i < t.config.yaxis.length; i++){\n                    var a = t.config.yaxis[i].opposite || t.config.yaxis[i].crosshairs.opposite;\n                    e.yaxisOffX = a ? t.globals.gridWidth + 1 : 1;\n                    var s = \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, a ? \" apexcharts-yaxistooltip-right\" : \" apexcharts-yaxistooltip-left\"), r = t.globals.dom.elWrap;\n                    null === t.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i)) && (e.yaxisTooltip = document.createElement(\"div\"), e.yaxisTooltip.setAttribute(\"class\", s + \" apexcharts-theme-\" + t.config.tooltip.theme), r.appendChild(e.yaxisTooltip), 0 === i && (e.yaxisTooltipText = []), e.yaxisTooltipText[i] = document.createElement(\"div\"), e.yaxisTooltipText[i].classList.add(\"apexcharts-yaxistooltip-text\"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));\n                }\n            }\n        },\n        {\n            key: \"setXCrosshairWidth\",\n            value: function() {\n                var t = this.w, e = this.ttCtx, i = e.getElXCrosshairs();\n                if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {\n                    var a = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n                    if (null !== a && \"barWidth\" === t.config.xaxis.crosshairs.width) {\n                        var s = parseFloat(a.getAttribute(\"barWidth\"));\n                        e.xcrosshairsWidth = s;\n                    } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n                        var r = t.globals.labels.length;\n                        e.xcrosshairsWidth = t.globals.gridWidth / r;\n                    }\n                } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n                    var n = t.globals.labels.length;\n                    e.xcrosshairsWidth = t.globals.gridWidth / n;\n                } else if (\"barWidth\" === t.config.xaxis.crosshairs.width) {\n                    var o = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n                    if (null !== o) {\n                        var l = parseFloat(o.getAttribute(\"barWidth\"));\n                        e.xcrosshairsWidth = l;\n                    } else e.xcrosshairsWidth = 1;\n                }\n                t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute(\"width\", e.xcrosshairsWidth);\n            }\n        },\n        {\n            key: \"handleYCrosshair\",\n            value: function() {\n                var t = this.w, e = this.ttCtx;\n                e.ycrosshairs = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs-hidden\");\n            }\n        },\n        {\n            key: \"drawYaxisTooltipText\",\n            value: function(t, e, i) {\n                var a = this.ttCtx, s = this.w, r = s.globals, n = r.seriesYAxisMap[t];\n                if (a.yaxisTooltips[t] && n.length > 0) {\n                    var o = r.yLabelFormatters[t], l = a.getElGrid().getBoundingClientRect(), h = n[0], c = 0;\n                    i.yRatio.length > 1 && (c = h);\n                    var d = (e - l.top) * i.yRatio[c], u = r.maxYArr[h] - r.minYArr[h], g = r.minYArr[h] + (u - d);\n                    s.config.yaxis[t].reversed && (g = r.maxYArr[h] - (u - d)), a.tooltipPosition.moveYCrosshairs(e - l.top), a.yaxisTooltipText[t].innerHTML = o(g), a.tooltipPosition.moveYAxisTooltip(t);\n                }\n            }\n        }\n    ]), t;\n}(), Sa = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n        var a = this.w;\n        this.tConfig = a.config.tooltip, this.tooltipUtil = new va(this), this.tooltipLabels = new ya(this), this.tooltipPosition = new wa(this), this.marker = new ka(this), this.intersect = new Aa(this), this.axesTooltip = new Ca(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();\n    }\n    return s(t, [\n        {\n            key: \"getElTooltip\",\n            value: function(t) {\n                return t || (t = this), t.w.globals.dom.baseEl ? t.w.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\") : null;\n            }\n        },\n        {\n            key: \"getElXCrosshairs\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\");\n            }\n        },\n        {\n            key: \"getElGrid\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-grid\");\n            }\n        },\n        {\n            key: \"drawTooltip\",\n            value: function(t) {\n                var e = this.w;\n                this.xyRatios = t, this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.yaxisTooltips = e.config.yaxis.map(function(t, i) {\n                    return !!(t.show && t.tooltip.enabled && e.globals.axisCharts);\n                }), this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);\n                var i = document.createElement(\"div\");\n                if (i.classList.add(\"apexcharts-tooltip\"), e.config.tooltip.cssClass && i.classList.add(e.config.tooltip.cssClass), i.classList.add(\"apexcharts-theme-\".concat(this.tConfig.theme || \"light\")), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {\n                    this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();\n                    var a = new Qi(this.ctx);\n                    this.xAxisTicksPositions = a.getXAxisTicksPositions();\n                }\n                if (!e.globals.comboCharts && !this.tConfig.intersect && \"rangeBar\" !== e.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {\n                    this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement(\"div\"), this.tooltipTitle.classList.add(\"apexcharts-tooltip-title\"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));\n                    var s = e.globals.series.length;\n                    (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-legend-text\"), this.ttItems = this.createTTElements(s), this.addSVGEvents();\n                }\n            }\n        },\n        {\n            key: \"createTTElements\",\n            value: function(t) {\n                for(var e = this, i = this.w, a = [], s = this.getElTooltip(), r = function(r) {\n                    var n = document.createElement(\"div\");\n                    n.classList.add(\"apexcharts-tooltip-series-group\", \"apexcharts-tooltip-series-group-\".concat(r)), n.style.order = i.config.tooltip.inverseOrder ? t - r : r + 1;\n                    var o = document.createElement(\"span\");\n                    o.classList.add(\"apexcharts-tooltip-marker\"), i.config.tooltip.fillSeriesColor ? o.style.backgroundColor = i.globals.colors[r] : o.style.color = i.globals.colors[r];\n                    var l = i.config.markers.shape, h = l;\n                    Array.isArray(l) && (h = l[r]), o.setAttribute(\"shape\", h), n.appendChild(o);\n                    var c = document.createElement(\"div\");\n                    c.classList.add(\"apexcharts-tooltip-text\"), c.style.fontFamily = e.tConfig.style.fontFamily || i.config.chart.fontFamily, c.style.fontSize = e.tConfig.style.fontSize, [\n                        \"y\",\n                        \"goals\",\n                        \"z\"\n                    ].forEach(function(t) {\n                        var e = document.createElement(\"div\");\n                        e.classList.add(\"apexcharts-tooltip-\".concat(t, \"-group\"));\n                        var i = document.createElement(\"span\");\n                        i.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-label\")), e.appendChild(i);\n                        var a = document.createElement(\"span\");\n                        a.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-value\")), e.appendChild(a), c.appendChild(e);\n                    }), n.appendChild(c), s.appendChild(n), a.push(n);\n                }, n = 0; n < t; n++)r(n);\n                return a;\n            }\n        },\n        {\n            key: \"addSVGEvents\",\n            value: function() {\n                var t = this.w, e = t.config.chart.type, i = this.getElTooltip(), a = !(\"bar\" !== e && \"candlestick\" !== e && \"boxPlot\" !== e && \"rangeBar\" !== e), s = \"area\" === e || \"line\" === e || \"scatter\" === e || \"bubble\" === e || \"radar\" === e, r = t.globals.dom.Paper.node, n = this.getElGrid();\n                n && (this.seriesBound = n.getBoundingClientRect());\n                var o, l = [], h = [], c = {\n                    hoverArea: r,\n                    elGrid: n,\n                    tooltipEl: i,\n                    tooltipY: l,\n                    tooltipX: h,\n                    ttItems: this.ttItems\n                };\n                if (t.globals.axisCharts && (s ? o = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\") : a ? o = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area\") : \"heatmap\" !== e && \"treemap\" !== e || (o = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap\")), o && o.length)) for(var d = 0; d < o.length; d++)l.push(o[d].getAttribute(\"cy\")), h.push(o[d].getAttribute(\"cx\"));\n                if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || a && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([\n                    r\n                ], c);\n                else if (a && !t.globals.comboCharts || s && this.showOnIntersect) this.addDatapointEventsListeners(c);\n                else if (!t.globals.axisCharts || \"heatmap\" === e || \"treemap\" === e) {\n                    var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n                    this.addPathsEventListeners(u, c);\n                }\n                if (this.showOnIntersect) {\n                    var g = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker\");\n                    g.length > 0 && this.addPathsEventListeners(g, c), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c);\n                }\n            }\n        },\n        {\n            key: \"drawFixedTooltipRect\",\n            value: function() {\n                var t = this.w, e = this.getElTooltip(), i = e.getBoundingClientRect(), a = i.width + 10, s = i.height + 10, r = this.tConfig.fixed.offsetX, n = this.tConfig.fixed.offsetY, o = this.tConfig.fixed.position.toLowerCase();\n                return o.indexOf(\"right\") > -1 && (r = r + t.globals.svgWidth - a + 10), o.indexOf(\"bottom\") > -1 && (n = n + t.globals.svgHeight - s - 10), e.style.left = r + \"px\", e.style.top = n + \"px\", {\n                    x: r,\n                    y: n,\n                    ttWidth: a,\n                    ttHeight: s\n                };\n            }\n        },\n        {\n            key: \"addDatapointEventsListeners\",\n            value: function(t) {\n                var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area\");\n                this.addPathsEventListeners(e, t);\n            }\n        },\n        {\n            key: \"addPathsEventListeners\",\n            value: function(t, e) {\n                for(var i = this, a = function(a) {\n                    var s = {\n                        paths: t[a],\n                        tooltipEl: e.tooltipEl,\n                        tooltipY: e.tooltipY,\n                        tooltipX: e.tooltipX,\n                        elGrid: e.elGrid,\n                        hoverArea: e.hoverArea,\n                        ttItems: e.ttItems\n                    };\n                    [\n                        \"mousemove\",\n                        \"mouseup\",\n                        \"touchmove\",\n                        \"mouseout\",\n                        \"touchend\"\n                    ].map(function(e) {\n                        return t[a].addEventListener(e, i.onSeriesHover.bind(i, s), {\n                            capture: !1,\n                            passive: !0\n                        });\n                    });\n                }, s = 0; s < t.length; s++)a(s);\n            }\n        },\n        {\n            key: \"onSeriesHover\",\n            value: function(t, e) {\n                var i = this, a = Date.now() - this.lastHoverTime;\n                a >= 20 ? this.seriesHover(t, e) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {\n                    i.seriesHover(t, e);\n                }, 20 - a));\n            }\n        },\n        {\n            key: \"seriesHover\",\n            value: function(t, e) {\n                var i = this;\n                this.lastHoverTime = Date.now();\n                var a = [], s = this.w;\n                s.config.chart.group && (a = this.ctx.getGroupedCharts()), s.globals.axisCharts && (s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0 || 0 === s.globals.dataPoints) || (a.length ? a.forEach(function(a) {\n                    var s = i.getElTooltip(a), r = {\n                        paths: t.paths,\n                        tooltipEl: s,\n                        tooltipY: t.tooltipY,\n                        tooltipX: t.tooltipX,\n                        elGrid: t.elGrid,\n                        hoverArea: t.hoverArea,\n                        ttItems: a.w.globals.tooltip.ttItems\n                    };\n                    a.w.globals.minX === i.w.globals.minX && a.w.globals.maxX === i.w.globals.maxX && a.w.globals.tooltip.seriesHoverByContext({\n                        chartCtx: a,\n                        ttCtx: a.w.globals.tooltip,\n                        opt: r,\n                        e: e\n                    });\n                }) : this.seriesHoverByContext({\n                    chartCtx: this.ctx,\n                    ttCtx: this.w.globals.tooltip,\n                    opt: t,\n                    e: e\n                }));\n            }\n        },\n        {\n            key: \"seriesHoverByContext\",\n            value: function(t) {\n                var e = t.chartCtx, i = t.ttCtx, a = t.opt, s = t.e, r = e.w, n = this.getElTooltip(e);\n                if (n) {\n                    if (i.tooltipRect = {\n                        x: 0,\n                        y: 0,\n                        ttWidth: n.getBoundingClientRect().width,\n                        ttHeight: n.getBoundingClientRect().height\n                    }, i.e = s, i.tooltipUtil.hasBars() && !r.globals.comboCharts && !i.isBarShared) {\n                        if (this.tConfig.onDatasetHover.highlightDataSeries) new Zi(e).toggleSeriesOnHover(s, s.target.parentNode);\n                    }\n                    r.globals.axisCharts ? i.axisChartsTooltips({\n                        e: s,\n                        opt: a,\n                        tooltipRect: i.tooltipRect\n                    }) : i.nonAxisChartsTooltips({\n                        e: s,\n                        opt: a,\n                        tooltipRect: i.tooltipRect\n                    }), i.fixedTooltip && i.drawFixedTooltipRect();\n                }\n            }\n        },\n        {\n            key: \"axisChartsTooltips\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = this.w, n = s.elGrid.getBoundingClientRect(), o = \"touchmove\" === a.type ? a.touches[0].clientX : a.clientX, l = \"touchmove\" === a.type ? a.touches[0].clientY : a.clientY;\n                if (this.clientY = l, this.clientX = o, r.globals.capturedSeriesIndex = -1, r.globals.capturedDataPointIndex = -1, l < n.top || l > n.top + n.height) this.handleMouseOut(s);\n                else {\n                    if (Array.isArray(this.tConfig.enabledOnSeries) && !r.config.tooltip.shared) {\n                        var h = parseInt(s.paths.getAttribute(\"index\"), 10);\n                        if (this.tConfig.enabledOnSeries.indexOf(h) < 0) return void this.handleMouseOut(s);\n                    }\n                    var c = this.getElTooltip(), d = this.getElXCrosshairs(), u = [];\n                    r.config.chart.group && (u = this.ctx.getSyncedCharts());\n                    var g = r.globals.xyCharts || \"bar\" === r.config.chart.type && !r.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.tooltipUtil.hasBars();\n                    if (\"mousemove\" === a.type || \"touchmove\" === a.type || \"mouseup\" === a.type) {\n                        if (r.globals.collapsedSeries.length + r.globals.ancillaryCollapsedSeries.length === r.globals.series.length) return;\n                        null !== d && d.classList.add(\"apexcharts-active\");\n                        var p = this.yaxisTooltips.filter(function(t) {\n                            return !0 === t;\n                        });\n                        if (null !== this.ycrosshairs && p.length && this.ycrosshairs.classList.add(\"apexcharts-active\"), g && !this.showOnIntersect || u.length > 1) this.handleStickyTooltip(a, o, l, s);\n                        else if (\"heatmap\" === r.config.chart.type || \"treemap\" === r.config.chart.type) {\n                            var f = this.intersect.handleHeatTreeTooltip({\n                                e: a,\n                                opt: s,\n                                x: e,\n                                y: i,\n                                type: r.config.chart.type\n                            });\n                            e = f.x, i = f.y, c.style.left = e + \"px\", c.style.top = i + \"px\";\n                        } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({\n                            e: a,\n                            opt: s\n                        }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({\n                            e: a,\n                            opt: s,\n                            x: e,\n                            y: i\n                        });\n                        if (this.yaxisTooltips.length) for(var x = 0; x < r.config.yaxis.length; x++)this.axesTooltip.drawYaxisTooltipText(x, l, this.xyRatios);\n                        r.globals.dom.baseEl.classList.add(\"apexcharts-tooltip-active\"), s.tooltipEl.classList.add(\"apexcharts-active\");\n                    } else \"mouseout\" !== a.type && \"touchend\" !== a.type || this.handleMouseOut(s);\n                }\n            }\n        },\n        {\n            key: \"nonAxisChartsTooltips\",\n            value: function(t) {\n                var e = t.e, i = t.opt, a = t.tooltipRect, s = this.w, r = i.paths.getAttribute(\"rel\"), n = this.getElTooltip(), o = s.globals.dom.elWrap.getBoundingClientRect();\n                if (\"mousemove\" === e.type || \"touchmove\" === e.type) {\n                    s.globals.dom.baseEl.classList.add(\"apexcharts-tooltip-active\"), n.classList.add(\"apexcharts-active\"), this.tooltipLabels.drawSeriesTexts({\n                        ttItems: i.ttItems,\n                        i: parseInt(r, 10) - 1,\n                        shared: !1\n                    });\n                    var l = s.globals.clientX - o.left - a.ttWidth / 2, h = s.globals.clientY - o.top - a.ttHeight - 10;\n                    if (n.style.left = l + \"px\", n.style.top = h + \"px\", s.config.legend.tooltipHoverFormatter) {\n                        var c = r - 1, d = (0, s.config.legend.tooltipHoverFormatter)(this.legendLabels[c].getAttribute(\"data:default-text\"), {\n                            seriesIndex: c,\n                            dataPointIndex: c,\n                            w: s\n                        });\n                        this.legendLabels[c].innerHTML = d;\n                    }\n                } else \"mouseout\" !== e.type && \"touchend\" !== e.type || (n.classList.remove(\"apexcharts-active\"), s.globals.dom.baseEl.classList.remove(\"apexcharts-tooltip-active\"), s.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t) {\n                    var e = t.getAttribute(\"data:default-text\");\n                    t.innerHTML = decodeURIComponent(e);\n                }));\n            }\n        },\n        {\n            key: \"handleStickyTooltip\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = this.tooltipUtil.getNearestValues({\n                    context: this,\n                    hoverArea: a.hoverArea,\n                    elGrid: a.elGrid,\n                    clientX: e,\n                    clientY: i\n                }), n = r.j, o = r.capturedSeries;\n                s.globals.collapsedSeriesIndices.includes(o) && (o = null);\n                var l = a.elGrid.getBoundingClientRect();\n                if (r.hoverX < 0 || r.hoverX > l.width) this.handleMouseOut(a);\n                else if (null !== o) this.handleStickyCapturedSeries(t, o, a, n);\n                else if (this.tooltipUtil.isXoverlap(n) || s.globals.isBarHorizontal) {\n                    var h = s.globals.series.findIndex(function(t, e) {\n                        return !s.globals.collapsedSeriesIndices.includes(e);\n                    });\n                    this.create(t, this, h, n, a.ttItems);\n                }\n            }\n        },\n        {\n            key: \"handleStickyCapturedSeries\",\n            value: function(t, e, i, a) {\n                var s = this.w;\n                if (!this.tConfig.shared && null === s.globals.series[e][a]) return void this.handleMouseOut(i);\n                if (void 0 !== s.globals.series[e][a]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, a, i.ttItems) : this.create(t, this, e, a, i.ttItems, !1);\n                else if (this.tooltipUtil.isXoverlap(a)) {\n                    var r = s.globals.series.findIndex(function(t, e) {\n                        return !s.globals.collapsedSeriesIndices.includes(e);\n                    });\n                    this.create(t, this, r, a, i.ttItems);\n                }\n            }\n        },\n        {\n            key: \"deactivateHoverFilter\",\n            value: function() {\n                for(var t = this.w, e = new Mi(this.ctx), i = t.globals.dom.Paper.find(\".apexcharts-bar-area\"), a = 0; a < i.length; a++)e.pathMouseLeave(i[a]);\n            }\n        },\n        {\n            key: \"handleMouseOut\",\n            value: function(t) {\n                var e = this.w, i = this.getElXCrosshairs();\n                if (e.globals.dom.baseEl.classList.remove(\"apexcharts-tooltip-active\"), t.tooltipEl.classList.remove(\"apexcharts-active\"), this.deactivateHoverFilter(), \"bubble\" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove(\"apexcharts-active\"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove(\"apexcharts-active\"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove(\"apexcharts-active\"), this.yaxisTooltips.length) {\n                    null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n                    for(var a = 0; a < this.yaxisTTEls.length; a++)this.yaxisTTEls[a].classList.remove(\"apexcharts-active\");\n                }\n                e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t) {\n                    var e = t.getAttribute(\"data:default-text\");\n                    t.innerHTML = decodeURIComponent(e);\n                });\n            }\n        },\n        {\n            key: \"markerClick\",\n            value: function(t, e, i) {\n                var a = this.w;\n                \"function\" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, {\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    w: a\n                }), this.ctx.events.fireEvent(\"markerClick\", [\n                    t,\n                    this.ctx,\n                    {\n                        seriesIndex: e,\n                        dataPointIndex: i,\n                        w: a\n                    }\n                ]);\n            }\n        },\n        {\n            key: \"create\",\n            value: function(t, e, i, a, s) {\n                var r, n, o, l, h, c, d, g, p, f, x, b, m, v, y, w, k = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, A = this.w, C = e;\n                \"mouseup\" === t.type && this.markerClick(t, i, a), null === k && (k = this.tConfig.shared);\n                var S = this.tooltipUtil.hasMarkers(i), L = this.tooltipUtil.getElBars(), M = function() {\n                    A.globals.markers.largestSize > 0 ? C.marker.enlargePoints(a) : C.tooltipPosition.moveDynamicPointsOnHover(a);\n                };\n                if (A.config.legend.tooltipHoverFormatter) {\n                    var P = A.config.legend.tooltipHoverFormatter, I = Array.from(this.legendLabels);\n                    I.forEach(function(t) {\n                        var e = t.getAttribute(\"data:default-text\");\n                        t.innerHTML = decodeURIComponent(e);\n                    });\n                    for(var T = 0; T < I.length; T++){\n                        var z = I[T], X = parseInt(z.getAttribute(\"i\"), 10), R = decodeURIComponent(z.getAttribute(\"data:default-text\")), E = P(R, {\n                            seriesIndex: k ? X : i,\n                            dataPointIndex: a,\n                            w: A\n                        });\n                        if (k) z.innerHTML = A.globals.collapsedSeriesIndices.indexOf(X) < 0 ? E : R;\n                        else if (z.innerHTML = X === i ? E : R, i === X) break;\n                    }\n                }\n                var Y = u(u({\n                    ttItems: s,\n                    i: i,\n                    j: a\n                }, void 0 !== (null === (r = A.globals.seriesRange) || void 0 === r || null === (n = r[i]) || void 0 === n || null === (o = n[a]) || void 0 === o || null === (l = o.y[0]) || void 0 === l ? void 0 : l.y1) && {\n                    y1: null === (h = A.globals.seriesRange) || void 0 === h || null === (c = h[i]) || void 0 === c || null === (d = c[a]) || void 0 === d || null === (g = d.y[0]) || void 0 === g ? void 0 : g.y1\n                }), void 0 !== (null === (p = A.globals.seriesRange) || void 0 === p || null === (f = p[i]) || void 0 === f || null === (x = f[a]) || void 0 === x || null === (b = x.y[0]) || void 0 === b ? void 0 : b.y2) && {\n                    y2: null === (m = A.globals.seriesRange) || void 0 === m || null === (v = m[i]) || void 0 === v || null === (y = v[a]) || void 0 === y || null === (w = y.y[0]) || void 0 === w ? void 0 : w.y2\n                });\n                if (k) {\n                    if (C.tooltipLabels.drawSeriesTexts(u(u({}, Y), {}, {\n                        shared: !this.showOnIntersect && this.tConfig.shared\n                    })), S) M();\n                    else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(L), this.barSeriesHeight > 0)) {\n                        var H = new Mi(this.ctx), O = A.globals.dom.Paper.find(\".apexcharts-bar-area[j='\".concat(a, \"']\"));\n                        this.deactivateHoverFilter(), C.tooltipUtil.getAllMarkers(!0).length && !this.barSeriesHeight && M(), C.tooltipPosition.moveStickyTooltipOverBars(a, i);\n                        for(var F = 0; F < O.length; F++)H.pathMouseEnter(O[F]);\n                    }\n                } else C.tooltipLabels.drawSeriesTexts(u({\n                    shared: !1\n                }, Y)), this.tooltipUtil.hasBars() && C.tooltipPosition.moveStickyTooltipOverBars(a, i), S && C.tooltipPosition.moveMarkers(i, a);\n            }\n        }\n    ]), t;\n}(), La = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.barCtx = e, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);\n    }\n    return s(t, [\n        {\n            key: \"handleBarDataLabels\",\n            value: function(t) {\n                var e, i, a = t.x, s = t.y, r = t.y1, n = t.y2, o = t.i, l = t.j, h = t.realIndex, c = t.columnGroupIndex, d = t.series, g = t.barHeight, p = t.barWidth, f = t.barXPosition, x = t.barYPosition, b = t.visibleSeries, m = this.w, v = new Mi(this.barCtx.ctx), y = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h] : this.barCtx.strokeWidth;\n                m.globals.isXNumeric && !m.globals.isBarHorizontal ? (e = a + parseFloat(p * (b + 1)), i = s + parseFloat(g * (b + 1)) - y) : (e = a + parseFloat(p * b), i = s + parseFloat(g * b));\n                var w, k = null, A = a, C = s, S = {}, L = m.config.dataLabels, M = this.barCtx.barOptions.dataLabels, P = this.barCtx.barOptions.dataLabels.total;\n                void 0 !== x && this.barCtx.isRangeBar && (i = x, C = x), void 0 !== f && this.barCtx.isVerticalGroupedRangeBar && (e = f, A = f);\n                var I = L.offsetX, T = L.offsetY, z = {\n                    width: 0,\n                    height: 0\n                };\n                if (m.config.dataLabels.enabled) {\n                    var X = m.globals.series[o][l];\n                    z = v.getTextRects(m.config.dataLabels.formatter ? m.config.dataLabels.formatter(X, u(u({}, m), {}, {\n                        seriesIndex: o,\n                        dataPointIndex: l,\n                        w: m\n                    })) : m.globals.yLabelFormatters[0](X), parseFloat(L.style.fontSize));\n                }\n                var R = {\n                    x: a,\n                    y: s,\n                    i: o,\n                    j: l,\n                    realIndex: h,\n                    columnGroupIndex: c,\n                    bcx: e,\n                    bcy: i,\n                    barHeight: g,\n                    barWidth: p,\n                    textRects: z,\n                    strokeWidth: y,\n                    dataLabelsX: A,\n                    dataLabelsY: C,\n                    dataLabelsConfig: L,\n                    barDataLabelsConfig: M,\n                    barTotalDataLabelsConfig: P,\n                    offX: I,\n                    offY: T\n                };\n                return S = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(R) : this.calculateColumnsDataLabelsPosition(R), w = this.drawCalculatedDataLabels({\n                    x: S.dataLabelsX,\n                    y: S.dataLabelsY,\n                    val: this.barCtx.isRangeBar ? [\n                        r,\n                        n\n                    ] : \"100%\" === m.config.chart.stackType ? d[h][l] : m.globals.series[h][l],\n                    i: h,\n                    j: l,\n                    barWidth: p,\n                    barHeight: g,\n                    textRects: z,\n                    dataLabelsConfig: L\n                }), m.config.chart.stacked && P.enabled && (k = this.drawTotalDataLabels({\n                    x: S.totalDataLabelsX,\n                    y: S.totalDataLabelsY,\n                    barWidth: p,\n                    barHeight: g,\n                    realIndex: h,\n                    textAnchor: S.totalDataLabelsAnchor,\n                    val: this.getStackedTotalDataLabel({\n                        realIndex: h,\n                        j: l\n                    }),\n                    dataLabelsConfig: L,\n                    barTotalDataLabelsConfig: P\n                })), {\n                    dataLabelsPos: S,\n                    dataLabels: w,\n                    totalDataLabels: k\n                };\n            }\n        },\n        {\n            key: \"getStackedTotalDataLabel\",\n            value: function(t) {\n                var e = t.realIndex, i = t.j, a = this.w, s = this.barCtx.stackedSeriesTotals[i];\n                return this.totalFormatter && (s = this.totalFormatter(s, u(u({}, a), {}, {\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    w: a\n                }))), s;\n            }\n        },\n        {\n            key: \"calculateColumnsDataLabelsPosition\",\n            value: function(t) {\n                var e = this, i = this.w, a = t.i, s = t.j, r = t.realIndex;\n                t.columnGroupIndex;\n                var n, o, l = t.y, h = t.bcx, c = t.barWidth, d = t.barHeight, u = t.textRects, g = t.dataLabelsX, p = t.dataLabelsY, f = t.dataLabelsConfig, x = t.barDataLabelsConfig, b = t.barTotalDataLabelsConfig, m = t.strokeWidth, v = t.offX, y = t.offY, w = h;\n                d = Math.abs(d);\n                var k = \"vertical\" === i.config.plotOptions.bar.dataLabels.orientation, A = this.barCtx.barHelpers.getZeroValueEncounters({\n                    i: a,\n                    j: s\n                }).zeroEncounters;\n                h -= m / 2;\n                var C = i.globals.gridWidth / i.globals.dataPoints;\n                if (this.barCtx.isVerticalGroupedRangeBar ? g += c / 2 : (g = i.globals.isXNumeric ? h - c / 2 + v : h - C + c / 2 + v, !i.config.chart.stacked && A > 0 && i.config.plotOptions.bar.hideZeroBarsWhenGrouped && (g -= c * A)), k) {\n                    g = g + u.height / 2 - m / 2 - 2;\n                }\n                var S = i.globals.series[a][s] < 0, L = l;\n                switch(this.barCtx.isReversed && (L = l + (S ? d : -d)), x.position){\n                    case \"center\":\n                        p = k ? S ? L - d / 2 + y : L + d / 2 - y : S ? L - d / 2 + u.height / 2 + y : L + d / 2 + u.height / 2 - y;\n                        break;\n                    case \"bottom\":\n                        p = k ? S ? L - d + y : L + d - y : S ? L - d + u.height + m + y : L + d - u.height / 2 + m - y;\n                        break;\n                    case \"top\":\n                        p = k ? S ? L + y : L - y : S ? L - u.height / 2 - y : L + u.height + y;\n                }\n                var M = L;\n                if (i.globals.seriesGroups.forEach(function(t) {\n                    var i;\n                    null === (i = e.barCtx[t.join(\",\")]) || void 0 === i || i.prevY.forEach(function(t) {\n                        M = S ? Math.max(t[s], M) : Math.min(t[s], M);\n                    });\n                }), this.barCtx.lastActiveBarSerieIndex === r && b.enabled) {\n                    var P = new Mi(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n                        realIndex: r,\n                        j: s\n                    }), f.fontSize);\n                    n = S ? M - P.height / 2 - y - b.offsetY + 18 : M + P.height + y + b.offsetY - 18;\n                    var I = C;\n                    o = w + (i.globals.isXNumeric ? -c * i.globals.barGroups.length / 2 : i.globals.barGroups.length * c / 2 - (i.globals.barGroups.length - 1) * c - I) + b.offsetX;\n                }\n                return i.config.chart.stacked || (p < 0 ? p = 0 + m : p + u.height / 3 > i.globals.gridHeight && (p = i.globals.gridHeight - m)), {\n                    bcx: h,\n                    bcy: l,\n                    dataLabelsX: g,\n                    dataLabelsY: p,\n                    totalDataLabelsX: o,\n                    totalDataLabelsY: n,\n                    totalDataLabelsAnchor: \"middle\"\n                };\n            }\n        },\n        {\n            key: \"calculateBarsDataLabelsPosition\",\n            value: function(t) {\n                var e = this, i = this.w, a = t.x, s = t.i, r = t.j, n = t.realIndex, o = t.bcy, l = t.barHeight, h = t.barWidth, c = t.textRects, d = t.dataLabelsX, u = t.strokeWidth, g = t.dataLabelsConfig, p = t.barDataLabelsConfig, f = t.barTotalDataLabelsConfig, x = t.offX, b = t.offY, m = i.globals.gridHeight / i.globals.dataPoints, v = this.barCtx.barHelpers.getZeroValueEncounters({\n                    i: s,\n                    j: r\n                }).zeroEncounters;\n                h = Math.abs(h);\n                var y, w, k = o - (this.barCtx.isRangeBar ? 0 : m) + l / 2 + c.height / 2 + b - 3;\n                !i.config.chart.stacked && v > 0 && i.config.plotOptions.bar.hideZeroBarsWhenGrouped && (k -= l * v);\n                var A = \"start\", C = i.globals.series[s][r] < 0, S = a;\n                switch(this.barCtx.isReversed && (S = a + (C ? -h : h), A = C ? \"start\" : \"end\"), p.position){\n                    case \"center\":\n                        d = C ? S + h / 2 - x : Math.max(c.width / 2, S - h / 2) + x;\n                        break;\n                    case \"bottom\":\n                        d = C ? S + h - u - x : S - h + u + x;\n                        break;\n                    case \"top\":\n                        d = C ? S - u - x : S - u + x;\n                }\n                var L = S;\n                if (i.globals.seriesGroups.forEach(function(t) {\n                    var i;\n                    null === (i = e.barCtx[t.join(\",\")]) || void 0 === i || i.prevX.forEach(function(t) {\n                        L = C ? Math.min(t[r], L) : Math.max(t[r], L);\n                    });\n                }), this.barCtx.lastActiveBarSerieIndex === n && f.enabled) {\n                    var M = new Mi(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n                        realIndex: n,\n                        j: r\n                    }), g.fontSize);\n                    C ? (y = L - u - x - f.offsetX, A = \"end\") : y = L + x + f.offsetX + (this.barCtx.isReversed ? -(h + u) : u), w = k - c.height / 2 + M.height / 2 + f.offsetY + u, i.globals.barGroups.length > 1 && (w -= i.globals.barGroups.length / 2 * (l / 2));\n                }\n                return i.config.chart.stacked || (\"start\" === g.textAnchor ? d - c.width < 0 ? d = C ? c.width + u : u : d + c.width > i.globals.gridWidth && (d = C ? i.globals.gridWidth - u : i.globals.gridWidth - c.width - u) : \"middle\" === g.textAnchor ? d - c.width / 2 < 0 ? d = c.width / 2 + u : d + c.width / 2 > i.globals.gridWidth && (d = i.globals.gridWidth - c.width / 2 - u) : \"end\" === g.textAnchor && (d < 1 ? d = c.width + u : d + 1 > i.globals.gridWidth && (d = i.globals.gridWidth - c.width - u))), {\n                    bcx: a,\n                    bcy: o,\n                    dataLabelsX: d,\n                    dataLabelsY: k,\n                    totalDataLabelsX: y,\n                    totalDataLabelsY: w,\n                    totalDataLabelsAnchor: A\n                };\n            }\n        },\n        {\n            key: \"drawCalculatedDataLabels\",\n            value: function(t) {\n                var e = t.x, i = t.y, a = t.val, s = t.i, r = t.j, n = t.textRects, o = t.barHeight, l = t.barWidth, h = t.dataLabelsConfig, c = this.w, d = \"rotate(0)\";\n                \"vertical\" === c.config.plotOptions.bar.dataLabels.orientation && (d = \"rotate(-90, \".concat(e, \", \").concat(i, \")\"));\n                var g = new qi(this.barCtx.ctx), p = new Mi(this.barCtx.ctx), f = h.formatter, x = null, b = c.globals.collapsedSeriesIndices.indexOf(s) > -1;\n                if (h.enabled && !b) {\n                    x = p.group({\n                        class: \"apexcharts-data-labels\",\n                        transform: d\n                    });\n                    var m = \"\";\n                    void 0 !== a && (m = f(a, u(u({}, c), {}, {\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: c\n                    }))), !a && c.config.plotOptions.bar.hideZeroBarsWhenGrouped && (m = \"\");\n                    var v = c.globals.series[s][r] < 0, y = c.config.plotOptions.bar.dataLabels.position;\n                    if (\"vertical\" === c.config.plotOptions.bar.dataLabels.orientation && (\"top\" === y && (h.textAnchor = v ? \"end\" : \"start\"), \"center\" === y && (h.textAnchor = \"middle\"), \"bottom\" === y && (h.textAnchor = v ? \"end\" : \"start\")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) l < p.getTextRects(m, parseFloat(h.style.fontSize)).width && (m = \"\");\n                    c.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n.width / 1.6 > Math.abs(l) && (m = \"\") : n.height / 1.6 > Math.abs(o) && (m = \"\"));\n                    var w = u({}, h);\n                    this.barCtx.isHorizontal && a < 0 && (\"start\" === h.textAnchor ? w.textAnchor = \"end\" : \"end\" === h.textAnchor && (w.textAnchor = \"start\")), g.plotDataLabelsText({\n                        x: e,\n                        y: i,\n                        text: m,\n                        i: s,\n                        j: r,\n                        parent: x,\n                        dataLabelsConfig: w,\n                        alwaysDrawDataLabel: !0,\n                        offsetCorrection: !0\n                    });\n                }\n                return x;\n            }\n        },\n        {\n            key: \"drawTotalDataLabels\",\n            value: function(t) {\n                var e = t.x, i = t.y, a = t.val, s = t.realIndex, r = t.textAnchor, n = t.barTotalDataLabelsConfig;\n                this.w;\n                var o, l = new Mi(this.barCtx.ctx);\n                return n.enabled && void 0 !== e && void 0 !== i && this.barCtx.lastActiveBarSerieIndex === s && (o = l.drawText({\n                    x: e,\n                    y: i,\n                    foreColor: n.style.color,\n                    text: a,\n                    textAnchor: r,\n                    fontFamily: n.style.fontFamily,\n                    fontSize: n.style.fontSize,\n                    fontWeight: n.style.fontWeight\n                })), o;\n            }\n        }\n    ]), t;\n}(), Ma = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.barCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"initVariables\",\n            value: function(t) {\n                var e = this.w;\n                this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;\n                for(var i = 0; i < t.length; i++)if (t[i].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[i].length), e.globals.isXNumeric) for(var a = 0; a < t[i].length; a++)e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;\n                else this.barCtx.visibleItems = e.globals.dataPoints;\n                this.arrBorderRadius = this.createBorderRadiusArr(e.globals.series), v.isSafari() && (this.arrBorderRadius = this.arrBorderRadius.map(function(t) {\n                    return t.map(function(t) {\n                        return \"none\";\n                    });\n                })), 0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e.globals.comboCharts || this.checkZeroSeries({\n                    series: t\n                });\n            }\n        },\n        {\n            key: \"initialPositions\",\n            value: function(t) {\n                var e, i, a, s, r, n, o, l, h = this.w, c = h.globals.dataPoints;\n                this.barCtx.isRangeBar && (c = h.globals.labels.length);\n                var d = this.barCtx.seriesLen;\n                if (h.config.plotOptions.bar.rangeBarGroupRows && (d = 1), this.barCtx.isHorizontal) r = (a = h.globals.gridHeight / c) / d, h.globals.isXNumeric && (r = (a = h.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), r = r * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf(\"%\") && (r = parseInt(this.barCtx.barOptions.barHeight, 10)), l = this.barCtx.baseLineInvertedY + h.globals.padHorizontal + (this.barCtx.isReversed ? h.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (l = h.globals.gridWidth / 2), i = (a - r * this.barCtx.seriesLen) / 2;\n                else {\n                    if (s = h.globals.gridWidth / this.barCtx.visibleItems, h.config.xaxis.convertedCatToNumeric && (s = h.globals.gridWidth / h.globals.dataPoints), n = s / d * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, h.globals.isXNumeric) {\n                        var u = this.barCtx.xRatio;\n                        h.globals.minXDiff && .5 !== h.globals.minXDiff && h.globals.minXDiff / u > 0 && (s = h.globals.minXDiff / u), (n = s / d * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (n = 1);\n                    }\n                    if (-1 === String(this.barCtx.barOptions.columnWidth).indexOf(\"%\") && (n = parseInt(this.barCtx.barOptions.columnWidth, 10)), o = h.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? h.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), h.globals.isXNumeric) e = this.barCtx.getBarXForNumericXAxis({\n                        x: e,\n                        j: 0,\n                        realIndex: t,\n                        barWidth: n\n                    }).x;\n                    else e = h.globals.padHorizontal + v.noExponents(s - n * this.barCtx.seriesLen) / 2;\n                }\n                return h.globals.barHeight = r, h.globals.barWidth = n, {\n                    x: e,\n                    y: i,\n                    yDivision: a,\n                    xDivision: s,\n                    barHeight: r,\n                    barWidth: n,\n                    zeroH: o,\n                    zeroW: l\n                };\n            }\n        },\n        {\n            key: \"initializeStackedPrevVars\",\n            value: function(t) {\n                t.w.globals.seriesGroups.forEach(function(e) {\n                    t[e] || (t[e] = {}), t[e].prevY = [], t[e].prevX = [], t[e].prevYF = [], t[e].prevXF = [], t[e].prevYVal = [], t[e].prevXVal = [];\n                });\n            }\n        },\n        {\n            key: \"initializeStackedXYVars\",\n            value: function(t) {\n                t.w.globals.seriesGroups.forEach(function(e) {\n                    t[e] || (t[e] = {}), t[e].xArrj = [], t[e].xArrjF = [], t[e].xArrjVal = [], t[e].yArrj = [], t[e].yArrjF = [], t[e].yArrjVal = [];\n                });\n            }\n        },\n        {\n            key: \"getPathFillColor\",\n            value: function(t, e, i, a) {\n                var s, r, n, o, l = this.w, h = this.barCtx.ctx.fill, c = null, d = this.barCtx.barOptions.distributed ? i : e, u = !1;\n                this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a) {\n                    t[e][i] >= a.from && t[e][i] <= a.to && (c = a.color, u = !0);\n                });\n                return {\n                    color: h.fillPath({\n                        seriesNumber: this.barCtx.barOptions.distributed ? d : a,\n                        dataPointIndex: i,\n                        color: c,\n                        value: t[e][i],\n                        fillConfig: null === (s = l.config.series[e].data[i]) || void 0 === s ? void 0 : s.fill,\n                        fillType: null !== (r = l.config.series[e].data[i]) && void 0 !== r && null !== (n = r.fill) && void 0 !== n && n.type ? null === (o = l.config.series[e].data[i]) || void 0 === o ? void 0 : o.fill.type : Array.isArray(l.config.fill.type) ? l.config.fill.type[a] : l.config.fill.type\n                    }),\n                    useRangeColor: u\n                };\n            }\n        },\n        {\n            key: \"getStrokeWidth\",\n            value: function(t, e, i) {\n                var a = 0, s = this.w;\n                return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a;\n            }\n        },\n        {\n            key: \"createBorderRadiusArr\",\n            value: function(t) {\n                var e, i = this.w, a = !this.w.config.chart.stacked || i.config.plotOptions.bar.borderRadius <= 0, s = t.length, n = 0 | (null === (e = t[0]) || void 0 === e ? void 0 : e.length), o = Array.from({\n                    length: s\n                }, function() {\n                    return Array(n).fill(a ? \"top\" : \"none\");\n                });\n                if (a) return o;\n                for(var l = 0; l < n; l++){\n                    for(var h = [], c = [], d = 0, u = 0; u < s; u++){\n                        var g = t[u][l];\n                        g > 0 ? (h.push(u), d++) : g < 0 && (c.push(u), d++);\n                    }\n                    if (h.length > 0 && 0 === c.length) if (1 === h.length) o[h[0]][l] = \"both\";\n                    else {\n                        var p, f = h[0], x = h[h.length - 1], b = r(h);\n                        try {\n                            for(b.s(); !(p = b.n()).done;){\n                                var m = p.value;\n                                o[m][l] = m === f ? \"bottom\" : m === x ? \"top\" : \"none\";\n                            }\n                        } catch (t) {\n                            b.e(t);\n                        } finally{\n                            b.f();\n                        }\n                    }\n                    else if (c.length > 0 && 0 === h.length) if (1 === c.length) o[c[0]][l] = \"both\";\n                    else {\n                        var v, y = Math.max.apply(Math, c), w = Math.min.apply(Math, c), k = r(c);\n                        try {\n                            for(k.s(); !(v = k.n()).done;){\n                                var A = v.value;\n                                o[A][l] = A === y ? \"bottom\" : A === w ? \"top\" : \"none\";\n                            }\n                        } catch (t) {\n                            k.e(t);\n                        } finally{\n                            k.f();\n                        }\n                    }\n                    else if (h.length > 0 && c.length > 0) {\n                        var C, S = h[h.length - 1], L = r(h);\n                        try {\n                            for(L.s(); !(C = L.n()).done;){\n                                var M = C.value;\n                                o[M][l] = M === S ? \"top\" : \"none\";\n                            }\n                        } catch (t) {\n                            L.e(t);\n                        } finally{\n                            L.f();\n                        }\n                        var P, I = Math.max.apply(Math, c), T = r(c);\n                        try {\n                            for(T.s(); !(P = T.n()).done;){\n                                var z = P.value;\n                                o[z][l] = z === I ? \"bottom\" : \"none\";\n                            }\n                        } catch (t) {\n                            T.e(t);\n                        } finally{\n                            T.f();\n                        }\n                    } else if (1 === d) {\n                        o[h[0] || c[0]][l] = \"both\";\n                    }\n                }\n                return o;\n            }\n        },\n        {\n            key: \"barBackground\",\n            value: function(t) {\n                var e = t.j, i = t.i, a = t.x1, s = t.x2, r = t.y1, n = t.y2, o = t.elSeries, l = this.w, h = new Mi(this.barCtx.ctx), c = new Zi(this.barCtx.ctx).getActiveConfigSeriesIndex();\n                if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c === i) {\n                    e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e %= this.barCtx.barOptions.colors.backgroundBarColors.length);\n                    var d = this.barCtx.barOptions.colors.backgroundBarColors[e], u = h.drawRect(void 0 !== a ? a : 0, void 0 !== r ? r : 0, void 0 !== s ? s : l.globals.gridWidth, void 0 !== n ? n : l.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d, this.barCtx.barOptions.colors.backgroundBarOpacity);\n                    o.add(u), u.node.classList.add(\"apexcharts-backgroundBar\");\n                }\n            }\n        },\n        {\n            key: \"getColumnPaths\",\n            value: function(t) {\n                var e, i = t.barWidth, a = t.barXPosition, s = t.y1, r = t.y2, n = t.strokeWidth, o = t.isReversed, l = t.series, h = t.seriesGroup, c = t.realIndex, d = t.i, u = t.j, g = t.w, p = new Mi(this.barCtx.ctx);\n                (n = Array.isArray(n) ? n[c] : n) || (n = 0);\n                var f = i, x = a;\n                null !== (e = g.config.series[c].data[u]) && void 0 !== e && e.columnWidthOffset && (x = a - g.config.series[c].data[u].columnWidthOffset / 2, f = i + g.config.series[c].data[u].columnWidthOffset);\n                var b = n / 2, m = x + b, v = x + f - b, y = (l[d][u] >= 0 ? 1 : -1) * (o ? -1 : 1);\n                s += .001 - b * y, r += .001 + b * y;\n                var w = p.move(m, s), k = p.move(m, s), A = p.line(v, s);\n                if (g.globals.previousPaths.length > 0 && (k = this.barCtx.getPreviousPath(c, u, !1)), w = w + p.line(m, r) + p.line(v, r) + A + (\"around\" === g.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][u] ? \" Z\" : \" z\"), k = k + p.line(m, s) + A + A + A + A + A + p.line(m, s) + (\"around\" === g.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][u] ? \" Z\" : \" z\"), \"none\" !== this.arrBorderRadius[c][u] && (w = p.roundPathCorners(w, g.config.plotOptions.bar.borderRadius)), g.config.chart.stacked) {\n                    var C = this.barCtx;\n                    (C = this.barCtx[h]).yArrj.push(r - b * y), C.yArrjF.push(Math.abs(s - r + n * y)), C.yArrjVal.push(this.barCtx.series[d][u]);\n                }\n                return {\n                    pathTo: w,\n                    pathFrom: k\n                };\n            }\n        },\n        {\n            key: \"getBarpaths\",\n            value: function(t) {\n                var e, i = t.barYPosition, a = t.barHeight, s = t.x1, r = t.x2, n = t.strokeWidth, o = t.isReversed, l = t.series, h = t.seriesGroup, c = t.realIndex, d = t.i, u = t.j, g = t.w, p = new Mi(this.barCtx.ctx);\n                (n = Array.isArray(n) ? n[c] : n) || (n = 0);\n                var f = i, x = a;\n                null !== (e = g.config.series[c].data[u]) && void 0 !== e && e.barHeightOffset && (f = i - g.config.series[c].data[u].barHeightOffset / 2, x = a + g.config.series[c].data[u].barHeightOffset);\n                var b = n / 2, m = f + b, v = f + x - b, y = (l[d][u] >= 0 ? 1 : -1) * (o ? -1 : 1);\n                s += .001 + b * y, r += .001 - b * y;\n                var w = p.move(s, m), k = p.move(s, m);\n                g.globals.previousPaths.length > 0 && (k = this.barCtx.getPreviousPath(c, u, !1));\n                var A = p.line(s, v);\n                if (w = w + p.line(r, m) + p.line(r, v) + A + (\"around\" === g.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][u] ? \" Z\" : \" z\"), k = k + p.line(s, m) + A + A + A + A + A + p.line(s, m) + (\"around\" === g.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][u] ? \" Z\" : \" z\"), \"none\" !== this.arrBorderRadius[c][u] && (w = p.roundPathCorners(w, g.config.plotOptions.bar.borderRadius)), g.config.chart.stacked) {\n                    var C = this.barCtx;\n                    (C = this.barCtx[h]).xArrj.push(r + b * y), C.xArrjF.push(Math.abs(s - r - n * y)), C.xArrjVal.push(this.barCtx.series[d][u]);\n                }\n                return {\n                    pathTo: w,\n                    pathFrom: k\n                };\n            }\n        },\n        {\n            key: \"checkZeroSeries\",\n            value: function(t) {\n                for(var e = t.series, i = this.w, a = 0; a < e.length; a++){\n                    for(var s = 0, r = 0; r < e[i.globals.maxValsInArrayIndex].length; r++)s += e[a][r];\n                    0 === s && this.barCtx.zeroSerieses.push(a);\n                }\n            }\n        },\n        {\n            key: \"getXForValue\",\n            value: function(t, e) {\n                var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e : null;\n                return null != t && (i = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), i;\n            }\n        },\n        {\n            key: \"getYForValue\",\n            value: function(t, e, i) {\n                var a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e : null;\n                return null != t && (a = e - t / this.barCtx.yRatio[i] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[i] : 0)), a;\n            }\n        },\n        {\n            key: \"getGoalValues\",\n            value: function(t, e, i, a, s, r) {\n                var n = this, l = this.w, h = [], c = function(a, s) {\n                    var l;\n                    h.push((o(l = {}, t, \"x\" === t ? n.getXForValue(a, e, !1) : n.getYForValue(a, i, r, !1)), o(l, \"attrs\", s), l));\n                };\n                if (l.globals.seriesGoals[a] && l.globals.seriesGoals[a][s] && Array.isArray(l.globals.seriesGoals[a][s]) && l.globals.seriesGoals[a][s].forEach(function(t) {\n                    c(t.value, t);\n                }), this.barCtx.barOptions.isDumbbell && l.globals.seriesRange.length) {\n                    var d = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l.globals.colors, g = {\n                        strokeHeight: \"x\" === t ? 0 : l.globals.markers.size[a],\n                        strokeWidth: \"x\" === t ? l.globals.markers.size[a] : 0,\n                        strokeDashArray: 0,\n                        strokeLineCap: \"round\",\n                        strokeColor: Array.isArray(d[a]) ? d[a][0] : d[a]\n                    };\n                    c(l.globals.seriesRangeStart[a][s], g), c(l.globals.seriesRangeEnd[a][s], u(u({}, g), {}, {\n                        strokeColor: Array.isArray(d[a]) ? d[a][1] : d[a]\n                    }));\n                }\n                return h;\n            }\n        },\n        {\n            key: \"drawGoalLine\",\n            value: function(t) {\n                var e = t.barXPosition, i = t.barYPosition, a = t.goalX, s = t.goalY, r = t.barWidth, n = t.barHeight, o = new Mi(this.barCtx.ctx), l = o.group({\n                    className: \"apexcharts-bar-goals-groups\"\n                });\n                l.node.classList.add(\"apexcharts-element-hidden\"), this.barCtx.w.globals.delayedElements.push({\n                    el: l.node\n                }), l.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(this.barCtx.w.globals.cuid, \")\"));\n                var h = null;\n                return this.barCtx.isHorizontal ? Array.isArray(a) && a.forEach(function(t) {\n                    if (t.x >= -1 && t.x <= o.w.globals.gridWidth + 1) {\n                        var e = void 0 !== t.attrs.strokeHeight ? t.attrs.strokeHeight : n / 2, a = i + e + n / 2;\n                        h = o.drawLine(t.x, a - 2 * e, t.x, a, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeWidth ? t.attrs.strokeWidth : 2, t.attrs.strokeLineCap), l.add(h);\n                    }\n                }) : Array.isArray(s) && s.forEach(function(t) {\n                    if (t.y >= -1 && t.y <= o.w.globals.gridHeight + 1) {\n                        var i = void 0 !== t.attrs.strokeWidth ? t.attrs.strokeWidth : r / 2, a = e + i + r / 2;\n                        h = o.drawLine(a - 2 * i, t.y, a, t.y, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeHeight ? t.attrs.strokeHeight : 2, t.attrs.strokeLineCap), l.add(h);\n                    }\n                }), l;\n            }\n        },\n        {\n            key: \"drawBarShadow\",\n            value: function(t) {\n                var e = t.prevPaths, i = t.currPaths, a = t.color, s = this.w, r = e.x, n = e.x1, o = e.barYPosition, l = i.x, h = i.x1, c = i.barYPosition, d = o + i.barHeight, u = new Mi(this.barCtx.ctx), g = new v, p = u.move(n, d) + u.line(r, d) + u.line(l, c) + u.line(h, c) + u.line(n, d) + (\"around\" === s.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[realIndex][j] ? \" Z\" : \" z\");\n                return u.drawPath({\n                    d: p,\n                    fill: g.shadeColor(.5, v.rgb2hex(a)),\n                    stroke: \"none\",\n                    strokeWidth: 0,\n                    fillOpacity: 1,\n                    classes: \"apexcharts-bar-shadow apexcharts-decoration-element\"\n                });\n            }\n        },\n        {\n            key: \"getZeroValueEncounters\",\n            value: function(t) {\n                var e, i = t.i, a = t.j, s = this.w, r = 0, n = 0;\n                return (s.config.plotOptions.bar.horizontal ? s.globals.series.map(function(t, e) {\n                    return e;\n                }) : (null === (e = s.globals.columnSeries) || void 0 === e ? void 0 : e.i.map(function(t) {\n                    return t;\n                })) || []).forEach(function(t) {\n                    var e = s.globals.seriesPercent[t][a];\n                    e && r++, t < i && 0 === e && n++;\n                }), {\n                    nonZeroColumns: r,\n                    zeroEncounters: n\n                };\n            }\n        },\n        {\n            key: \"getGroupIndex\",\n            value: function(t) {\n                var e = this.w, i = e.globals.seriesGroups.findIndex(function(i) {\n                    return i.indexOf(e.globals.seriesNames[t]) > -1;\n                }), a = this.barCtx.columnGroupIndices, s = a.indexOf(i);\n                return s < 0 && (a.push(i), s = a.length - 1), {\n                    groupIndex: i,\n                    columnGroupIndex: s\n                };\n            }\n        }\n    ]), t;\n}(), Pa = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.w = e.w;\n        var s = this.w;\n        this.barOptions = s.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s.globals.isBarHorizontal && s.globals.seriesRange.length && s.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = a, null !== this.xyRatios && (this.xRatio = a.xRatio, this.yRatio = a.yRatio, this.invertedXRatio = a.invertedXRatio, this.invertedYRatio = a.invertedYRatio, this.baseLineY = a.baseLineY, this.baseLineInvertedY = a.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];\n        var r = new Zi(this.ctx);\n        this.lastActiveBarSerieIndex = r.getActiveConfigSeriesIndex(\"desc\", [\n            \"bar\",\n            \"column\"\n        ]), this.columnGroupIndices = [];\n        var n = r.getBarSeriesIndices(), o = new Pi(this.ctx);\n        this.stackedSeriesTotals = o.getStackedSeriesTotals(this.w.config.series.map(function(t, e) {\n            return -1 === n.indexOf(e) ? e : -1;\n        }).filter(function(t) {\n            return -1 !== t;\n        })), this.barHelpers = new Ma(this);\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t, e) {\n                var i = this.w, a = new Mi(this.ctx), s = new Pi(this.ctx, i);\n                t = s.getLogSeries(t), this.series = t, this.yRatio = s.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n                var r = a.group({\n                    class: \"apexcharts-bar-series apexcharts-plot-series\"\n                });\n                i.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn(\"WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts\");\n                for(var n = 0, o = 0; n < t.length; n++, o++){\n                    var l, h, c, d, g = void 0, p = void 0, f = [], x = [], b = i.globals.comboCharts ? e[n] : n, m = this.barHelpers.getGroupIndex(b).columnGroupIndex, y = a.group({\n                        class: \"apexcharts-series\",\n                        rel: n + 1,\n                        seriesName: v.escapeString(i.globals.seriesNames[b]),\n                        \"data:realIndex\": b\n                    });\n                    this.ctx.series.addCollapsedClassToSeries(y, b), t[n].length > 0 && (this.visibleI = this.visibleI + 1);\n                    var w = 0, k = 0;\n                    this.yRatio.length > 1 && (this.yaxisIndex = i.globals.seriesYAxisReverseMap[b], this.translationsIndex = b);\n                    var A = this.translationsIndex;\n                    this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;\n                    var C = this.barHelpers.initialPositions(b);\n                    p = C.y, w = C.barHeight, h = C.yDivision, d = C.zeroW, g = C.x, k = C.barWidth, l = C.xDivision, c = C.zeroH, this.isHorizontal || x.push(g + k / 2);\n                    var S = a.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": b\n                    });\n                    i.globals.delayedElements.push({\n                        el: S.node\n                    }), S.node.classList.add(\"apexcharts-element-hidden\");\n                    var L = a.group({\n                        class: \"apexcharts-bar-goals-markers\"\n                    }), M = a.group({\n                        class: \"apexcharts-bar-shadows\"\n                    });\n                    i.globals.delayedElements.push({\n                        el: M.node\n                    }), M.node.classList.add(\"apexcharts-element-hidden\");\n                    for(var P = 0; P < t[n].length; P++){\n                        var I = this.barHelpers.getStrokeWidth(n, P, b), T = null, z = {\n                            indexes: {\n                                i: n,\n                                j: P,\n                                realIndex: b,\n                                translationsIndex: A,\n                                bc: o\n                            },\n                            x: g,\n                            y: p,\n                            strokeWidth: I,\n                            elSeries: y\n                        };\n                        this.isHorizontal ? (T = this.drawBarPaths(u(u({}, z), {}, {\n                            barHeight: w,\n                            zeroW: d,\n                            yDivision: h\n                        })), k = this.series[n][P] / this.invertedYRatio) : (T = this.drawColumnPaths(u(u({}, z), {}, {\n                            xDivision: l,\n                            barWidth: k,\n                            zeroH: c\n                        })), w = this.series[n][P] / this.yRatio[A]);\n                        var X = this.barHelpers.getPathFillColor(t, n, P, b);\n                        if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && P > 0) {\n                            var R, E = this.barHelpers.drawBarShadow({\n                                color: \"string\" == typeof X.color && -1 === (null === (R = X.color) || void 0 === R ? void 0 : R.indexOf(\"url\")) ? X.color : v.hexToRgba(i.globals.colors[n]),\n                                prevPaths: this.pathArr[this.pathArr.length - 1],\n                                currPaths: T\n                            });\n                            if (M.add(E), i.config.chart.dropShadow.enabled) new Li(this.ctx).dropShadow(E, i.config.chart.dropShadow, b);\n                        }\n                        this.pathArr.push(T);\n                        var Y = this.barHelpers.drawGoalLine({\n                            barXPosition: T.barXPosition,\n                            barYPosition: T.barYPosition,\n                            goalX: T.goalX,\n                            goalY: T.goalY,\n                            barHeight: w,\n                            barWidth: k\n                        });\n                        Y && L.add(Y), p = T.y, g = T.x, P > 0 && x.push(g + k / 2), f.push(p), this.renderSeries(u(u({\n                            realIndex: b,\n                            pathFill: X.color\n                        }, X.useRangeColor ? {\n                            lineFill: X.color\n                        } : {}), {}, {\n                            j: P,\n                            i: n,\n                            columnGroupIndex: m,\n                            pathFrom: T.pathFrom,\n                            pathTo: T.pathTo,\n                            strokeWidth: I,\n                            elSeries: y,\n                            x: g,\n                            y: p,\n                            series: t,\n                            barHeight: Math.abs(T.barHeight ? T.barHeight : w),\n                            barWidth: Math.abs(T.barWidth ? T.barWidth : k),\n                            elDataLabelsWrap: S,\n                            elGoalsMarkers: L,\n                            elBarShadows: M,\n                            visibleSeries: this.visibleI,\n                            type: \"bar\"\n                        }));\n                    }\n                    i.globals.seriesXvalues[b] = x, i.globals.seriesYvalues[b] = f, r.add(y);\n                }\n                return r;\n            }\n        },\n        {\n            key: \"renderSeries\",\n            value: function(t) {\n                var e = t.realIndex, i = t.pathFill, a = t.lineFill, s = t.j, r = t.i, n = t.columnGroupIndex, o = t.pathFrom, l = t.pathTo, h = t.strokeWidth, c = t.elSeries, d = t.x, u = t.y, g = t.y1, p = t.y2, f = t.series, x = t.barHeight, b = t.barWidth, m = t.barXPosition, v = t.barYPosition, y = t.elDataLabelsWrap, w = t.elGoalsMarkers, k = t.elBarShadows, A = t.visibleSeries, C = t.type, S = t.classes, L = this.w, M = new Mi(this.ctx), P = !1;\n                if (!a) {\n                    var I = \"function\" == typeof L.globals.stroke.colors[e] ? function(t) {\n                        var e, i = L.config.stroke.colors;\n                        return Array.isArray(i) && i.length > 0 && ((e = i[t]) || (e = \"\"), \"function\" == typeof e) ? e({\n                            value: L.globals.series[t][s],\n                            dataPointIndex: s,\n                            w: L\n                        }) : e;\n                    }(e) : L.globals.stroke.colors[e];\n                    a = this.barOptions.distributed ? L.globals.stroke.colors[s] : I;\n                }\n                var T = new La(this).handleBarDataLabels({\n                    x: d,\n                    y: u,\n                    y1: g,\n                    y2: p,\n                    i: r,\n                    j: s,\n                    series: f,\n                    realIndex: e,\n                    columnGroupIndex: n,\n                    barHeight: x,\n                    barWidth: b,\n                    barXPosition: m,\n                    barYPosition: v,\n                    visibleSeries: A\n                });\n                L.globals.isBarHorizontal || (T.dataLabelsPos.dataLabelsX + b < 0 || T.dataLabelsPos.dataLabelsX - b > L.globals.gridWidth) && (P = !0), L.config.series[r].data[s] && L.config.series[r].data[s].strokeColor && (a = L.config.series[r].data[s].strokeColor), this.isNullValue && (i = \"none\");\n                var z = s / L.config.chart.animations.animateGradually.delay * (L.config.chart.animations.speed / L.globals.dataPoints) / 2.4;\n                if (!P) {\n                    var X = M.renderPaths({\n                        i: r,\n                        j: s,\n                        realIndex: e,\n                        pathFrom: o,\n                        pathTo: l,\n                        stroke: a,\n                        strokeWidth: h,\n                        strokeLineCap: L.config.stroke.lineCap,\n                        fill: i,\n                        animationDelay: z,\n                        initialSpeed: L.config.chart.animations.speed,\n                        dataChangeSpeed: L.config.chart.animations.dynamicAnimation.speed,\n                        className: \"apexcharts-\".concat(C, \"-area \").concat(S),\n                        chartType: C\n                    });\n                    X.attr(\"clip-path\", \"url(#gridRectBarMask\".concat(L.globals.cuid, \")\"));\n                    var R = L.config.forecastDataPoints;\n                    R.count > 0 && s >= L.globals.dataPoints - R.count && (X.node.setAttribute(\"stroke-dasharray\", R.dashArray), X.node.setAttribute(\"stroke-width\", R.strokeWidth), X.node.setAttribute(\"fill-opacity\", R.fillOpacity)), void 0 !== g && void 0 !== p && (X.attr(\"data-range-y1\", g), X.attr(\"data-range-y2\", p)), new Li(this.ctx).setSelectionFilter(X, e, s), c.add(X), X.attr({\n                        cy: T.dataLabelsPos.bcy,\n                        cx: T.dataLabelsPos.bcx,\n                        j: s,\n                        val: L.globals.series[r][s],\n                        barHeight: x,\n                        barWidth: b\n                    }), null !== T.dataLabels && y.add(T.dataLabels), T.totalDataLabels && y.add(T.totalDataLabels), c.add(y), w && c.add(w), k && c.add(k);\n                }\n                return c;\n            }\n        },\n        {\n            key: \"drawBarPaths\",\n            value: function(t) {\n                var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, n = t.x, o = t.y, l = t.yDivision, h = t.elSeries, c = this.w, d = i.i, u = i.j;\n                if (c.globals.isXNumeric) e = (o = (c.globals.seriesX[d][u] - c.globals.minX) / this.invertedXRatio - a) + a * this.visibleI;\n                else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n                    var g = this.barHelpers.getZeroValueEncounters({\n                        i: d,\n                        j: u\n                    }), p = g.nonZeroColumns, f = g.zeroEncounters;\n                    p > 0 && (a = this.seriesLen * a / p), e = o + a * this.visibleI, e -= a * f;\n                } else e = o + a * this.visibleI;\n                this.isFunnel && (r -= (this.barHelpers.getXForValue(this.series[d][u], r) - r) / 2), n = this.barHelpers.getXForValue(this.series[d][u], r);\n                var x = this.barHelpers.getBarpaths({\n                    barYPosition: e,\n                    barHeight: a,\n                    x1: r,\n                    x2: n,\n                    strokeWidth: s,\n                    isReversed: this.isReversed,\n                    series: this.series,\n                    realIndex: i.realIndex,\n                    i: d,\n                    j: u,\n                    w: c\n                });\n                return c.globals.isXNumeric || (o += l), this.barHelpers.barBackground({\n                    j: u,\n                    i: d,\n                    y1: e - a * this.visibleI,\n                    y2: a * this.seriesLen,\n                    elSeries: h\n                }), {\n                    pathTo: x.pathTo,\n                    pathFrom: x.pathFrom,\n                    x1: r,\n                    x: n,\n                    y: o,\n                    goalX: this.barHelpers.getGoalValues(\"x\", r, null, d, u),\n                    barYPosition: e,\n                    barHeight: a\n                };\n            }\n        },\n        {\n            key: \"drawColumnPaths\",\n            value: function(t) {\n                var e, i = t.indexes, a = t.x, s = t.y, r = t.xDivision, n = t.barWidth, o = t.zeroH, l = t.strokeWidth, h = t.elSeries, c = this.w, d = i.realIndex, u = i.translationsIndex, g = i.i, p = i.j, f = i.bc;\n                if (c.globals.isXNumeric) {\n                    var x = this.getBarXForNumericXAxis({\n                        x: a,\n                        j: p,\n                        realIndex: d,\n                        barWidth: n\n                    });\n                    a = x.x, e = x.barXPosition;\n                } else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n                    var b = this.barHelpers.getZeroValueEncounters({\n                        i: g,\n                        j: p\n                    }), m = b.nonZeroColumns, v = b.zeroEncounters;\n                    m > 0 && (n = this.seriesLen * n / m), e = a + n * this.visibleI, e -= n * v;\n                } else e = a + n * this.visibleI;\n                s = this.barHelpers.getYForValue(this.series[g][p], o, u);\n                var y = this.barHelpers.getColumnPaths({\n                    barXPosition: e,\n                    barWidth: n,\n                    y1: o,\n                    y2: s,\n                    strokeWidth: l,\n                    isReversed: this.isReversed,\n                    series: this.series,\n                    realIndex: d,\n                    i: g,\n                    j: p,\n                    w: c\n                });\n                return c.globals.isXNumeric || (a += r), this.barHelpers.barBackground({\n                    bc: f,\n                    j: p,\n                    i: g,\n                    x1: e - l / 2 - n * this.visibleI,\n                    x2: n * this.seriesLen + l / 2,\n                    elSeries: h\n                }), {\n                    pathTo: y.pathTo,\n                    pathFrom: y.pathFrom,\n                    x: a,\n                    y: s,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, o, g, p, u),\n                    barXPosition: e,\n                    barWidth: n\n                };\n            }\n        },\n        {\n            key: \"getBarXForNumericXAxis\",\n            value: function(t) {\n                var e = t.x, i = t.barWidth, a = t.realIndex, s = t.j, r = this.w, n = a;\n                return r.globals.seriesX[a].length || (n = r.globals.maxValsInArrayIndex), v.isNumber(r.globals.seriesX[n][s]) && (e = (r.globals.seriesX[n][s] - r.globals.minX) / this.xRatio - i * this.seriesLen / 2), {\n                    barXPosition: e + i * this.visibleI,\n                    x: e\n                };\n            }\n        },\n        {\n            key: \"getPreviousPath\",\n            value: function(t, e) {\n                for(var i = this.w, a = \"M 0 0\", s = 0; s < i.globals.previousPaths.length; s++){\n                    var r = i.globals.previousPaths[s];\n                    r.paths && r.paths.length > 0 && parseInt(r.realIndex, 10) === parseInt(t, 10) && void 0 !== i.globals.previousPaths[s].paths[e] && (a = i.globals.previousPaths[s].paths[e].d);\n                }\n                return a;\n            }\n        }\n    ]), t;\n}(), Ia = function(t) {\n    h(a, Pa);\n    var e = n(a);\n    function a() {\n        return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [\n        {\n            key: \"draw\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                this.graphics = new Mi(this.ctx), this.bar = new Pa(this.ctx, this.xyRatios);\n                var s = new Pi(this.ctx, a);\n                t = s.getLogSeries(t), this.yRatio = s.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), \"100%\" === a.config.chart.stackType && (t = a.globals.comboCharts ? e.map(function(t) {\n                    return a.globals.seriesPercent[t];\n                }) : a.globals.seriesPercent.slice()), this.series = t, this.barHelpers.initializeStackedPrevVars(this);\n                for(var r = this.graphics.group({\n                    class: \"apexcharts-bar-series apexcharts-plot-series\"\n                }), n = 0, o = 0, l = function(s, l) {\n                    var h = void 0, c = void 0, d = void 0, g = void 0, p = a.globals.comboCharts ? e[s] : s, f = i.barHelpers.getGroupIndex(p), x = f.groupIndex, b = f.columnGroupIndex;\n                    i.groupCtx = i[a.globals.seriesGroups[x]];\n                    var m = [], y = [], w = 0;\n                    i.yRatio.length > 1 && (i.yaxisIndex = a.globals.seriesYAxisReverseMap[p][0], w = p), i.isReversed = a.config.yaxis[i.yaxisIndex] && a.config.yaxis[i.yaxisIndex].reversed;\n                    var k = i.graphics.group({\n                        class: \"apexcharts-series\",\n                        seriesName: v.escapeString(a.globals.seriesNames[p]),\n                        rel: s + 1,\n                        \"data:realIndex\": p\n                    });\n                    i.ctx.series.addCollapsedClassToSeries(k, p);\n                    var A = i.graphics.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": p\n                    }), C = i.graphics.group({\n                        class: \"apexcharts-bar-goals-markers\"\n                    }), S = 0, L = 0, M = i.initialPositions(n, o, h, c, d, g, w);\n                    o = M.y, S = M.barHeight, c = M.yDivision, g = M.zeroW, n = M.x, L = M.barWidth, h = M.xDivision, d = M.zeroH, a.globals.barHeight = S, a.globals.barWidth = L, i.barHelpers.initializeStackedXYVars(i), 1 === i.groupCtx.prevY.length && i.groupCtx.prevY[0].every(function(t) {\n                        return isNaN(t);\n                    }) && (i.groupCtx.prevY[0] = i.groupCtx.prevY[0].map(function() {\n                        return d;\n                    }), i.groupCtx.prevYF[0] = i.groupCtx.prevYF[0].map(function() {\n                        return 0;\n                    }));\n                    for(var P = 0; P < a.globals.dataPoints; P++){\n                        var I = i.barHelpers.getStrokeWidth(s, P, p), T = {\n                            indexes: {\n                                i: s,\n                                j: P,\n                                realIndex: p,\n                                translationsIndex: w,\n                                bc: l\n                            },\n                            strokeWidth: I,\n                            x: n,\n                            y: o,\n                            elSeries: k,\n                            columnGroupIndex: b,\n                            seriesGroup: a.globals.seriesGroups[x]\n                        }, z = null;\n                        i.isHorizontal ? (z = i.drawStackedBarPaths(u(u({}, T), {}, {\n                            zeroW: g,\n                            barHeight: S,\n                            yDivision: c\n                        })), L = i.series[s][P] / i.invertedYRatio) : (z = i.drawStackedColumnPaths(u(u({}, T), {}, {\n                            xDivision: h,\n                            barWidth: L,\n                            zeroH: d\n                        })), S = i.series[s][P] / i.yRatio[w]);\n                        var X = i.barHelpers.drawGoalLine({\n                            barXPosition: z.barXPosition,\n                            barYPosition: z.barYPosition,\n                            goalX: z.goalX,\n                            goalY: z.goalY,\n                            barHeight: S,\n                            barWidth: L\n                        });\n                        X && C.add(X), o = z.y, n = z.x, m.push(n), y.push(o);\n                        var R = i.barHelpers.getPathFillColor(t, s, P, p), E = \"\", Y = a.globals.isBarHorizontal ? \"apexcharts-flip-x\" : \"apexcharts-flip-y\";\n                        (\"bottom\" === i.barHelpers.arrBorderRadius[p][P] && a.globals.series[p][P] > 0 || \"top\" === i.barHelpers.arrBorderRadius[p][P] && a.globals.series[p][P] < 0) && (E = Y), k = i.renderSeries(u(u({\n                            realIndex: p,\n                            pathFill: R.color\n                        }, R.useRangeColor ? {\n                            lineFill: R.color\n                        } : {}), {}, {\n                            j: P,\n                            i: s,\n                            columnGroupIndex: b,\n                            pathFrom: z.pathFrom,\n                            pathTo: z.pathTo,\n                            strokeWidth: I,\n                            elSeries: k,\n                            x: n,\n                            y: o,\n                            series: t,\n                            barHeight: S,\n                            barWidth: L,\n                            elDataLabelsWrap: A,\n                            elGoalsMarkers: C,\n                            type: \"bar\",\n                            visibleSeries: b,\n                            classes: E\n                        }));\n                    }\n                    a.globals.seriesXvalues[p] = m, a.globals.seriesYvalues[p] = y, i.groupCtx.prevY.push(i.groupCtx.yArrj), i.groupCtx.prevYF.push(i.groupCtx.yArrjF), i.groupCtx.prevYVal.push(i.groupCtx.yArrjVal), i.groupCtx.prevX.push(i.groupCtx.xArrj), i.groupCtx.prevXF.push(i.groupCtx.xArrjF), i.groupCtx.prevXVal.push(i.groupCtx.xArrjVal), r.add(k);\n                }, h = 0, c = 0; h < t.length; h++, c++)l(h, c);\n                return r;\n            }\n        },\n        {\n            key: \"initialPositions\",\n            value: function(t, e, i, a, s, r, n) {\n                var o, l, h = this.w;\n                if (this.isHorizontal) {\n                    a = h.globals.gridHeight / h.globals.dataPoints;\n                    var c = h.config.plotOptions.bar.barHeight;\n                    o = -1 === String(c).indexOf(\"%\") ? parseInt(c, 10) : a * parseInt(c, 10) / 100, r = h.globals.padHorizontal + (this.isReversed ? h.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e = (a - o) / 2;\n                } else {\n                    l = i = h.globals.gridWidth / h.globals.dataPoints;\n                    var d = h.config.plotOptions.bar.columnWidth;\n                    h.globals.isXNumeric && h.globals.dataPoints > 1 ? l = (i = h.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d).indexOf(\"%\") ? l = parseInt(d, 10) : l *= parseInt(d, 10) / 100, s = this.isReversed ? this.baseLineY[n] : h.globals.gridHeight - this.baseLineY[n], t = h.globals.padHorizontal + (i - l) / 2;\n                }\n                var u = h.globals.barGroups.length || 1;\n                return {\n                    x: t,\n                    y: e,\n                    yDivision: a,\n                    xDivision: i,\n                    barHeight: o / u,\n                    barWidth: l / u,\n                    zeroH: s,\n                    zeroW: r\n                };\n            }\n        },\n        {\n            key: \"drawStackedBarPaths\",\n            value: function(t) {\n                for(var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, n = t.x, o = t.y, l = t.columnGroupIndex, h = t.seriesGroup, c = t.yDivision, d = t.elSeries, u = this.w, g = o + l * a, p = i.i, f = i.j, x = i.realIndex, b = i.translationsIndex, m = 0, v = 0; v < this.groupCtx.prevXF.length; v++)m += this.groupCtx.prevXF[v][f];\n                var y = p;\n                if (u.config.series[x].name && (y = h.indexOf(u.config.series[x].name)), y > 0) {\n                    var w = r;\n                    this.groupCtx.prevXVal[y - 1][f] < 0 ? w = this.series[p][f] >= 0 ? this.groupCtx.prevX[y - 1][f] + m - 2 * (this.isReversed ? m : 0) : this.groupCtx.prevX[y - 1][f] : this.groupCtx.prevXVal[y - 1][f] >= 0 && (w = this.series[p][f] >= 0 ? this.groupCtx.prevX[y - 1][f] : this.groupCtx.prevX[y - 1][f] - m + 2 * (this.isReversed ? m : 0)), e = w;\n                } else e = r;\n                n = null === this.series[p][f] ? e : e + this.series[p][f] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p][f] / this.invertedYRatio : 0);\n                var k = this.barHelpers.getBarpaths({\n                    barYPosition: g,\n                    barHeight: a,\n                    x1: e,\n                    x2: n,\n                    strokeWidth: s,\n                    isReversed: this.isReversed,\n                    series: this.series,\n                    realIndex: i.realIndex,\n                    seriesGroup: h,\n                    i: p,\n                    j: f,\n                    w: u\n                });\n                return this.barHelpers.barBackground({\n                    j: f,\n                    i: p,\n                    y1: g,\n                    y2: a,\n                    elSeries: d\n                }), o += c, {\n                    pathTo: k.pathTo,\n                    pathFrom: k.pathFrom,\n                    goalX: this.barHelpers.getGoalValues(\"x\", r, null, p, f, b),\n                    barXPosition: e,\n                    barYPosition: g,\n                    x: n,\n                    y: o\n                };\n            }\n        },\n        {\n            key: \"drawStackedColumnPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x, a = t.y, s = t.xDivision, r = t.barWidth, n = t.zeroH, o = t.columnGroupIndex, l = t.seriesGroup, h = t.elSeries, c = this.w, d = e.i, u = e.j, g = e.bc, p = e.realIndex, f = e.translationsIndex;\n                if (c.globals.isXNumeric) {\n                    var x = c.globals.seriesX[p][u];\n                    x || (x = 0), i = (x - c.globals.minX) / this.xRatio - r / 2 * c.globals.barGroups.length;\n                }\n                for(var b, m = i + o * r, v = 0, y = 0; y < this.groupCtx.prevYF.length; y++)v += isNaN(this.groupCtx.prevYF[y][u]) ? 0 : this.groupCtx.prevYF[y][u];\n                var w = d;\n                if (l && (w = l.indexOf(c.globals.seriesNames[p])), w > 0 && !c.globals.isXNumeric || w > 0 && c.globals.isXNumeric && c.globals.seriesX[p - 1][u] === c.globals.seriesX[p][u]) {\n                    var k, A, C, S = Math.min(this.yRatio.length + 1, p + 1);\n                    if (void 0 !== this.groupCtx.prevY[w - 1] && this.groupCtx.prevY[w - 1].length) for(var L = 1; L < S; L++){\n                        var M;\n                        if (!isNaN(null === (M = this.groupCtx.prevY[w - L]) || void 0 === M ? void 0 : M[u])) {\n                            C = this.groupCtx.prevY[w - L][u];\n                            break;\n                        }\n                    }\n                    for(var P = 1; P < S; P++){\n                        var I, T;\n                        if ((null === (I = this.groupCtx.prevYVal[w - P]) || void 0 === I ? void 0 : I[u]) < 0) {\n                            A = this.series[d][u] >= 0 ? C - v + 2 * (this.isReversed ? v : 0) : C;\n                            break;\n                        }\n                        if ((null === (T = this.groupCtx.prevYVal[w - P]) || void 0 === T ? void 0 : T[u]) >= 0) {\n                            A = this.series[d][u] >= 0 ? C : C + v - 2 * (this.isReversed ? v : 0);\n                            break;\n                        }\n                    }\n                    void 0 === A && (A = c.globals.gridHeight), b = null !== (k = this.groupCtx.prevYF[0]) && void 0 !== k && k.every(function(t) {\n                        return 0 === t;\n                    }) && this.groupCtx.prevYF.slice(1, w).every(function(t) {\n                        return t.every(function(t) {\n                            return isNaN(t);\n                        });\n                    }) ? n : A;\n                } else b = n;\n                a = this.series[d][u] ? b - this.series[d][u] / this.yRatio[f] + 2 * (this.isReversed ? this.series[d][u] / this.yRatio[f] : 0) : b;\n                var z = this.barHelpers.getColumnPaths({\n                    barXPosition: m,\n                    barWidth: r,\n                    y1: b,\n                    y2: a,\n                    yRatio: this.yRatio[f],\n                    strokeWidth: this.strokeWidth,\n                    isReversed: this.isReversed,\n                    series: this.series,\n                    seriesGroup: l,\n                    realIndex: e.realIndex,\n                    i: d,\n                    j: u,\n                    w: c\n                });\n                return this.barHelpers.barBackground({\n                    bc: g,\n                    j: u,\n                    i: d,\n                    x1: m,\n                    x2: r,\n                    elSeries: h\n                }), {\n                    pathTo: z.pathTo,\n                    pathFrom: z.pathFrom,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, n, d, u),\n                    barXPosition: m,\n                    x: c.globals.isXNumeric ? i : i + s,\n                    y: a\n                };\n            }\n        }\n    ]), a;\n}(), Ta = function(t) {\n    h(a, Pa);\n    var e = n(a);\n    function a() {\n        return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [\n        {\n            key: \"draw\",\n            value: function(t, e, i) {\n                var a = this, s = this.w, r = new Mi(this.ctx), n = s.globals.comboCharts ? e : s.config.chart.type, o = new ji(this.ctx);\n                this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s.config.plotOptions.bar.horizontal, this.isOHLC = this.candlestickOptions && \"ohlc\" === this.candlestickOptions.type;\n                var l = new Pi(this.ctx, s);\n                t = l.getLogSeries(t), this.series = t, this.yRatio = l.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n                for(var h = r.group({\n                    class: \"apexcharts-\".concat(n, \"-series apexcharts-plot-series\")\n                }), c = function(e) {\n                    a.isBoxPlot = \"boxPlot\" === s.config.chart.type || \"boxPlot\" === s.config.series[e].type;\n                    var n, l, c, d, g = void 0, p = void 0, f = [], x = [], b = s.globals.comboCharts ? i[e] : e, m = a.barHelpers.getGroupIndex(b).columnGroupIndex, y = r.group({\n                        class: \"apexcharts-series\",\n                        seriesName: v.escapeString(s.globals.seriesNames[b]),\n                        rel: e + 1,\n                        \"data:realIndex\": b\n                    });\n                    a.ctx.series.addCollapsedClassToSeries(y, b), t[e].length > 0 && (a.visibleI = a.visibleI + 1);\n                    var w, k, A = 0;\n                    a.yRatio.length > 1 && (a.yaxisIndex = s.globals.seriesYAxisReverseMap[b][0], A = b);\n                    var C = a.barHelpers.initialPositions(b);\n                    p = C.y, w = C.barHeight, l = C.yDivision, d = C.zeroW, g = C.x, k = C.barWidth, n = C.xDivision, c = C.zeroH, x.push(g + k / 2);\n                    for(var S = r.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": b\n                    }), L = r.group({\n                        class: \"apexcharts-bar-goals-markers\"\n                    }), M = function(i) {\n                        var r = a.barHelpers.getStrokeWidth(e, i, b), h = null, v = {\n                            indexes: {\n                                i: e,\n                                j: i,\n                                realIndex: b,\n                                translationsIndex: A\n                            },\n                            x: g,\n                            y: p,\n                            strokeWidth: r,\n                            elSeries: y\n                        };\n                        h = a.isHorizontal ? a.drawHorizontalBoxPaths(u(u({}, v), {}, {\n                            yDivision: l,\n                            barHeight: w,\n                            zeroW: d\n                        })) : a.drawVerticalBoxPaths(u(u({}, v), {}, {\n                            xDivision: n,\n                            barWidth: k,\n                            zeroH: c\n                        })), p = h.y, g = h.x;\n                        var C = a.barHelpers.drawGoalLine({\n                            barXPosition: h.barXPosition,\n                            barYPosition: h.barYPosition,\n                            goalX: h.goalX,\n                            goalY: h.goalY,\n                            barHeight: w,\n                            barWidth: k\n                        });\n                        C && L.add(C), i > 0 && x.push(g + k / 2), f.push(p), h.pathTo.forEach(function(n, l) {\n                            var c = !a.isBoxPlot && a.candlestickOptions.wick.useFillColor ? h.color[l] : s.globals.stroke.colors[e], d = o.fillPath({\n                                seriesNumber: b,\n                                dataPointIndex: i,\n                                color: h.color[l],\n                                value: t[e][i]\n                            });\n                            a.renderSeries({\n                                realIndex: b,\n                                pathFill: d,\n                                lineFill: c,\n                                j: i,\n                                i: e,\n                                pathFrom: h.pathFrom,\n                                pathTo: n,\n                                strokeWidth: r,\n                                elSeries: y,\n                                x: g,\n                                y: p,\n                                series: t,\n                                columnGroupIndex: m,\n                                barHeight: w,\n                                barWidth: k,\n                                elDataLabelsWrap: S,\n                                elGoalsMarkers: L,\n                                visibleSeries: a.visibleI,\n                                type: s.config.chart.type\n                            });\n                        });\n                    }, P = 0; P < s.globals.dataPoints; P++)M(P);\n                    s.globals.seriesXvalues[b] = x, s.globals.seriesYvalues[b] = f, h.add(y);\n                }, d = 0; d < t.length; d++)c(d);\n                return h;\n            }\n        },\n        {\n            key: \"drawVerticalBoxPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x;\n                t.y;\n                var a = t.xDivision, s = t.barWidth, r = t.zeroH, n = t.strokeWidth, o = this.w, l = new Mi(this.ctx), h = e.i, c = e.j, d = o.config.plotOptions.candlestick.colors, u = this.boxOptions.colors, g = e.realIndex, p = function(t) {\n                    return Array.isArray(t) ? t[g] : t;\n                }, f = p(d.upward), x = p(d.downward), b = this.yRatio[e.translationsIndex], m = this.getOHLCValue(g, c), v = r, y = r, w = m.o < m.c ? [\n                    f\n                ] : [\n                    x\n                ];\n                this.isBoxPlot && (w = [\n                    p(u.lower),\n                    p(u.upper)\n                ]);\n                var k = Math.min(m.o, m.c), A = Math.max(m.o, m.c), C = m.m;\n                o.globals.isXNumeric && (i = (o.globals.seriesX[g][c] - o.globals.minX) / this.xRatio - s / 2);\n                var S = i + s * this.visibleI;\n                void 0 === this.series[h][c] || null === this.series[h][c] ? (k = r, A = r) : (k = r - k / b, A = r - A / b, v = r - m.h / b, y = r - m.l / b, C = r - m.m / b);\n                var L = l.move(S, r), M = l.move(S + s / 2, k);\n                if (o.globals.previousPaths.length > 0 && (M = this.getPreviousPath(g, c, !0)), this.isOHLC) {\n                    var P = S + s / 2, I = r - m.o / b, T = r - m.c / b;\n                    L = [\n                        l.move(P, v) + l.line(P, y) + l.move(P, I) + l.line(S, I) + l.move(P, T) + l.line(S + s, T)\n                    ];\n                } else L = this.isBoxPlot ? [\n                    l.move(S, k) + l.line(S + s / 2, k) + l.line(S + s / 2, v) + l.line(S + s / 4, v) + l.line(S + s - s / 4, v) + l.line(S + s / 2, v) + l.line(S + s / 2, k) + l.line(S + s, k) + l.line(S + s, C) + l.line(S, C) + l.line(S, k + n / 2),\n                    l.move(S, C) + l.line(S + s, C) + l.line(S + s, A) + l.line(S + s / 2, A) + l.line(S + s / 2, y) + l.line(S + s - s / 4, y) + l.line(S + s / 4, y) + l.line(S + s / 2, y) + l.line(S + s / 2, A) + l.line(S, A) + l.line(S, C) + \"z\"\n                ] : [\n                    l.move(S, A) + l.line(S + s / 2, A) + l.line(S + s / 2, v) + l.line(S + s / 2, A) + l.line(S + s, A) + l.line(S + s, k) + l.line(S + s / 2, k) + l.line(S + s / 2, y) + l.line(S + s / 2, k) + l.line(S, k) + l.line(S, A - n / 2)\n                ];\n                return M += l.move(S, k), o.globals.isXNumeric || (i += a), {\n                    pathTo: L,\n                    pathFrom: M,\n                    x: i,\n                    y: A,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, r, h, c, e.translationsIndex),\n                    barXPosition: S,\n                    color: w\n                };\n            }\n        },\n        {\n            key: \"drawHorizontalBoxPaths\",\n            value: function(t) {\n                var e = t.indexes;\n                t.x;\n                var i = t.y, a = t.yDivision, s = t.barHeight, r = t.zeroW, n = t.strokeWidth, o = this.w, l = new Mi(this.ctx), h = e.i, c = e.j, d = this.boxOptions.colors.lower;\n                this.isBoxPlot && (d = [\n                    this.boxOptions.colors.lower,\n                    this.boxOptions.colors.upper\n                ]);\n                var u = this.invertedYRatio, g = e.realIndex, p = this.getOHLCValue(g, c), f = r, x = r, b = Math.min(p.o, p.c), m = Math.max(p.o, p.c), v = p.m;\n                o.globals.isXNumeric && (i = (o.globals.seriesX[g][c] - o.globals.minX) / this.invertedXRatio - s / 2);\n                var y = i + s * this.visibleI;\n                void 0 === this.series[h][c] || null === this.series[h][c] ? (b = r, m = r) : (b = r + b / u, m = r + m / u, f = r + p.h / u, x = r + p.l / u, v = r + p.m / u);\n                var w = l.move(r, y), k = l.move(b, y + s / 2);\n                return o.globals.previousPaths.length > 0 && (k = this.getPreviousPath(g, c, !0)), w = [\n                    l.move(b, y) + l.line(b, y + s / 2) + l.line(f, y + s / 2) + l.line(f, y + s / 2 - s / 4) + l.line(f, y + s / 2 + s / 4) + l.line(f, y + s / 2) + l.line(b, y + s / 2) + l.line(b, y + s) + l.line(v, y + s) + l.line(v, y) + l.line(b + n / 2, y),\n                    l.move(v, y) + l.line(v, y + s) + l.line(m, y + s) + l.line(m, y + s / 2) + l.line(x, y + s / 2) + l.line(x, y + s - s / 4) + l.line(x, y + s / 4) + l.line(x, y + s / 2) + l.line(m, y + s / 2) + l.line(m, y) + l.line(v, y) + \"z\"\n                ], k += l.move(b, y), o.globals.isXNumeric || (i += a), {\n                    pathTo: w,\n                    pathFrom: k,\n                    x: m,\n                    y: i,\n                    goalX: this.barHelpers.getGoalValues(\"x\", r, null, h, c),\n                    barYPosition: y,\n                    color: d\n                };\n            }\n        },\n        {\n            key: \"getOHLCValue\",\n            value: function(t, e) {\n                var i = this.w, a = new Pi(this.ctx, i), s = a.getLogValAtSeriesIndex(i.globals.seriesCandleH[t][e], t), r = a.getLogValAtSeriesIndex(i.globals.seriesCandleO[t][e], t), n = a.getLogValAtSeriesIndex(i.globals.seriesCandleM[t][e], t), o = a.getLogValAtSeriesIndex(i.globals.seriesCandleC[t][e], t), l = a.getLogValAtSeriesIndex(i.globals.seriesCandleL[t][e], t);\n                return {\n                    o: this.isBoxPlot ? s : r,\n                    h: this.isBoxPlot ? r : s,\n                    m: n,\n                    l: this.isBoxPlot ? o : l,\n                    c: this.isBoxPlot ? l : o\n                };\n            }\n        }\n    ]), a;\n}(), za = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"checkColorRange\",\n            value: function() {\n                var t = this.w, e = !1, i = t.config.plotOptions[t.config.chart.type];\n                return i.colorScale.ranges.length > 0 && i.colorScale.ranges.map(function(t, i) {\n                    t.from <= 0 && (e = !0);\n                }), e;\n            }\n        },\n        {\n            key: \"getShadeColor\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = 1, n = s.config.plotOptions[t].shadeIntensity, o = this.determineColor(t, e, i);\n                s.globals.hasNegs || a ? r = s.config.plotOptions[t].reverseNegativeShade ? o.percent < 0 ? o.percent / 100 * (1.25 * n) : (1 - o.percent / 100) * (1.25 * n) : o.percent <= 0 ? 1 - (1 + o.percent / 100) * n : (1 - o.percent / 100) * n : (r = 1 - o.percent / 100, \"treemap\" === t && (r = (1 - o.percent / 100) * (1.25 * n)));\n                var l = o.color, h = new v;\n                if (s.config.plotOptions[t].enableShades) if (\"dark\" === this.w.config.theme.mode) {\n                    var c = h.shadeColor(-1 * r, o.color);\n                    l = v.hexToRgba(v.isColorHex(c) ? c : v.rgb2hex(c), s.config.fill.opacity);\n                } else {\n                    var d = h.shadeColor(r, o.color);\n                    l = v.hexToRgba(v.isColorHex(d) ? d : v.rgb2hex(d), s.config.fill.opacity);\n                }\n                return {\n                    color: l,\n                    colorProps: o\n                };\n            }\n        },\n        {\n            key: \"determineColor\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.globals.series[e][i], r = a.config.plotOptions[t], n = r.colorScale.inverse ? i : e;\n                r.distributed && \"treemap\" === a.config.chart.type && (n = i);\n                var o = a.globals.colors[n], l = null, h = Math.min.apply(Math, f(a.globals.series[e])), c = Math.max.apply(Math, f(a.globals.series[e]));\n                r.distributed || \"heatmap\" !== t || (h = a.globals.minY, c = a.globals.maxY), void 0 !== r.colorScale.min && (h = r.colorScale.min < a.globals.minY ? r.colorScale.min : a.globals.minY, c = r.colorScale.max > a.globals.maxY ? r.colorScale.max : a.globals.maxY);\n                var d = Math.abs(c) + Math.abs(h), u = 100 * s / (0 === d ? d - 1e-6 : d);\n                r.colorScale.ranges.length > 0 && r.colorScale.ranges.map(function(t, e) {\n                    if (s >= t.from && s <= t.to) {\n                        o = t.color, l = t.foreColor ? t.foreColor : null, h = t.from, c = t.to;\n                        var i = Math.abs(c) + Math.abs(h);\n                        u = 100 * s / (0 === i ? i - 1e-6 : i);\n                    }\n                });\n                return {\n                    color: o,\n                    foreColor: l,\n                    percent: u\n                };\n            }\n        },\n        {\n            key: \"calculateDataLabels\",\n            value: function(t) {\n                var e = t.text, i = t.x, a = t.y, s = t.i, r = t.j, n = t.colorProps, o = t.fontSize, l = this.w.config.dataLabels, h = new Mi(this.ctx), c = new qi(this.ctx), d = null;\n                if (l.enabled) {\n                    d = h.group({\n                        class: \"apexcharts-data-labels\"\n                    });\n                    var u = l.offsetX, g = l.offsetY, p = i + u, f = a + parseFloat(l.style.fontSize) / 3 + g;\n                    c.plotDataLabelsText({\n                        x: p,\n                        y: f,\n                        text: e,\n                        i: s,\n                        j: r,\n                        color: n.foreColor,\n                        parent: d,\n                        fontSize: o,\n                        dataLabelsConfig: l\n                    });\n                }\n                return d;\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function(t) {\n                var e = new Mi(this.ctx);\n                t.node.addEventListener(\"mouseenter\", e.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", e.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mousedown\", e.pathMouseDown.bind(this, t));\n            }\n        }\n    ]), t;\n}(), Xa = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.w = e.w, this.xRatio = a.xRatio, this.yRatio = a.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new za(e), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = i.group({\n                    class: \"apexcharts-heatmap\"\n                });\n                a.attr(\"clip-path\", \"url(#gridRectMask\".concat(e.globals.cuid, \")\"));\n                var s = e.globals.gridWidth / e.globals.dataPoints, r = e.globals.gridHeight / e.globals.series.length, n = 0, o = !1;\n                this.negRange = this.helpers.checkColorRange();\n                var l = t.slice();\n                e.config.yaxis[0].reversed && (o = !0, l.reverse());\n                for(var h = o ? 0 : l.length - 1; o ? h < l.length : h >= 0; o ? h++ : h--){\n                    var c = i.group({\n                        class: \"apexcharts-series apexcharts-heatmap-series\",\n                        seriesName: v.escapeString(e.globals.seriesNames[h]),\n                        rel: h + 1,\n                        \"data:realIndex\": h\n                    });\n                    if (this.ctx.series.addCollapsedClassToSeries(c, h), e.config.chart.dropShadow.enabled) {\n                        var d = e.config.chart.dropShadow;\n                        new Li(this.ctx).dropShadow(c, d, h);\n                    }\n                    for(var u = 0, g = e.config.plotOptions.heatmap.shadeIntensity, p = 0, f = 0; f < e.globals.dataPoints; f++)if (e.globals.seriesX.length && !e.globals.allSeriesHasEqualX && e.globals.minX + e.globals.minXDiff * f < e.globals.seriesX[h][p]) u += s;\n                    else {\n                        if (p >= l[h].length) break;\n                        var x = this.helpers.getShadeColor(e.config.chart.type, h, p, this.negRange), b = x.color, m = x.colorProps;\n                        if (\"image\" === e.config.fill.type) b = new ji(this.ctx).fillPath({\n                            seriesNumber: h,\n                            dataPointIndex: p,\n                            opacity: e.globals.hasNegs ? m.percent < 0 ? 1 - (1 + m.percent / 100) : g + m.percent / 100 : m.percent / 100,\n                            patternID: v.randomId(),\n                            width: e.config.fill.image.width ? e.config.fill.image.width : s,\n                            height: e.config.fill.image.height ? e.config.fill.image.height : r\n                        });\n                        var y = this.rectRadius, w = i.drawRect(u, n, s, r, y);\n                        if (w.attr({\n                            cx: u,\n                            cy: n\n                        }), w.node.classList.add(\"apexcharts-heatmap-rect\"), c.add(w), w.attr({\n                            fill: b,\n                            i: h,\n                            index: h,\n                            j: p,\n                            val: t[h][p],\n                            \"stroke-width\": this.strokeWidth,\n                            stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? b : e.globals.stroke.colors[0],\n                            color: b\n                        }), this.helpers.addListeners(w), e.config.chart.animations.enabled && !e.globals.dataChanged) {\n                            var k = 1;\n                            e.globals.resized || (k = e.config.chart.animations.speed), this.animateHeatMap(w, u, n, s, r, k);\n                        }\n                        if (e.globals.dataChanged) {\n                            var A = 1;\n                            if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {\n                                A = this.dynamicAnim.speed;\n                                var C = e.globals.previousPaths[h] && e.globals.previousPaths[h][p] && e.globals.previousPaths[h][p].color;\n                                C || (C = \"rgba(255, 255, 255, 0)\"), this.animateHeatColor(w, v.isColorHex(C) ? C : v.rgb2hex(C), v.isColorHex(b) ? b : v.rgb2hex(b), A);\n                            }\n                        }\n                        var S = (0, e.config.dataLabels.formatter)(e.globals.series[h][p], {\n                            value: e.globals.series[h][p],\n                            seriesIndex: h,\n                            dataPointIndex: p,\n                            w: e\n                        }), L = this.helpers.calculateDataLabels({\n                            text: S,\n                            x: u + s / 2,\n                            y: n + r / 2,\n                            i: h,\n                            j: p,\n                            colorProps: m,\n                            series: l\n                        });\n                        null !== L && c.add(L), u += s, p++;\n                    }\n                    n += r, a.add(c);\n                }\n                var M = e.globals.yAxisScale[0].result.slice();\n                return e.config.yaxis[0].reversed ? M.unshift(\"\") : M.push(\"\"), e.globals.yAxisScale[0].result = M, a;\n            }\n        },\n        {\n            key: \"animateHeatMap\",\n            value: function(t, e, i, a, s, r) {\n                var n = new y(this.ctx);\n                n.animateRect(t, {\n                    x: e + a / 2,\n                    y: i + s / 2,\n                    width: 0,\n                    height: 0\n                }, {\n                    x: e,\n                    y: i,\n                    width: a,\n                    height: s\n                }, r, function() {\n                    n.animationCompleted(t);\n                });\n            }\n        },\n        {\n            key: \"animateHeatColor\",\n            value: function(t, e, i, a) {\n                t.attr({\n                    fill: e\n                }).animate(a).attr({\n                    fill: i\n                });\n            }\n        }\n    ]), t;\n}(), Ra = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"drawYAxisTexts\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = s.config.yaxis[0], n = s.globals.yLabelFormatters[0];\n                return new Mi(this.ctx).drawText({\n                    x: t + r.labels.offsetX,\n                    y: e + r.labels.offsetY,\n                    text: n(a, i),\n                    textAnchor: \"middle\",\n                    fontSize: r.labels.style.fontSize,\n                    fontFamily: r.labels.style.fontFamily,\n                    foreColor: Array.isArray(r.labels.style.colors) ? r.labels.style.colors[i] : r.labels.style.colors\n                });\n            }\n        }\n    ]), t;\n}(), Ea = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n        var a = this.w;\n        this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [\n            0\n        ], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = Math.min(a.globals.gridWidth, a.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = a.globals.gridWidth / 2, \"radialBar\" === a.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(a.config.plotOptions.pie.endAngle - a.config.plotOptions.pie.startAngle), this.initialAngle = a.config.plotOptions.pie.startAngle % this.fullAngle, a.globals.radialSize = this.defaultSize / 2.05 - a.config.stroke.width - (a.config.chart.sparkline.enabled ? 0 : a.config.chart.dropShadow.blur), this.donutSize = a.globals.radialSize * parseInt(a.config.plotOptions.pie.donut.size, 10) / 100;\n        var s = a.config.plotOptions.pie.customScale, r = a.globals.gridWidth / 2, n = a.globals.gridHeight / 2;\n        this.translateX = r - r * s, this.translateY = n - n * s, this.dataLabelsGroup = new Mi(this.ctx).group({\n            class: \"apexcharts-datalabels-group\",\n            transform: \"translate(\".concat(this.translateX, \", \").concat(this.translateY, \") scale(\").concat(s, \")\")\n        }), this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this, i = this.w, a = new Mi(this.ctx), s = a.group({\n                    class: \"apexcharts-pie\"\n                });\n                if (i.globals.noData) return s;\n                for(var r = 0, n = 0; n < t.length; n++)r += v.negToZero(t[n]);\n                var o = [], l = a.group();\n                0 === r && (r = 1e-5), t.forEach(function(t) {\n                    e.maxY = Math.max(e.maxY, t);\n                }), i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max), \"back\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(s);\n                for(var h = 0; h < t.length; h++){\n                    var c = this.fullAngle * v.negToZero(t[h]) / r;\n                    o.push(c), \"polarArea\" === this.chartType ? (o[h] = this.fullAngle / t.length, this.sliceSizes.push(i.globals.radialSize * t[h] / this.maxY)) : this.sliceSizes.push(i.globals.radialSize);\n                }\n                if (i.globals.dataChanged) {\n                    for(var d, u = 0, g = 0; g < i.globals.previousPaths.length; g++)u += v.negToZero(i.globals.previousPaths[g]);\n                    for(var p = 0; p < i.globals.previousPaths.length; p++)d = this.fullAngle * v.negToZero(i.globals.previousPaths[p]) / u, this.prevSectorAngleArr.push(d);\n                }\n                if (this.donutSize < 0 && (this.donutSize = 0), \"donut\" === this.chartType) {\n                    var f = a.drawCircle(this.donutSize);\n                    f.attr({\n                        cx: this.centerX,\n                        cy: this.centerY,\n                        fill: i.config.plotOptions.pie.donut.background ? i.config.plotOptions.pie.donut.background : \"transparent\"\n                    }), l.add(f);\n                }\n                var x = this.drawArcs(o, t);\n                if (this.sliceLabels.forEach(function(t) {\n                    x.add(t);\n                }), l.attr({\n                    transform: \"translate(\".concat(this.translateX, \", \").concat(this.translateY, \") scale(\").concat(i.config.plotOptions.pie.customScale, \")\")\n                }), l.add(x), s.add(l), this.donutDataLabels.show) {\n                    var b = this.renderInnerDataLabels(this.dataLabelsGroup, this.donutDataLabels, {\n                        hollowSize: this.donutSize,\n                        centerX: this.centerX,\n                        centerY: this.centerY,\n                        opacity: this.donutDataLabels.show\n                    });\n                    s.add(b);\n                }\n                return \"front\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(s), s;\n            }\n        },\n        {\n            key: \"drawArcs\",\n            value: function(t, e) {\n                var i = this.w, a = new Li(this.ctx), s = new Mi(this.ctx), r = new ji(this.ctx), n = s.group({\n                    class: \"apexcharts-slices\"\n                }), o = this.initialAngle, l = this.initialAngle, h = this.initialAngle, c = this.initialAngle;\n                this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;\n                for(var d = 0; d < t.length; d++){\n                    var u = s.group({\n                        class: \"apexcharts-series apexcharts-pie-series\",\n                        seriesName: v.escapeString(i.globals.seriesNames[d]),\n                        rel: d + 1,\n                        \"data:realIndex\": d\n                    });\n                    n.add(u), l = c, h = (o = h) + t[d], c = l + this.prevSectorAngleArr[d];\n                    var g = h < o ? this.fullAngle + h - o : h - o, p = r.fillPath({\n                        seriesNumber: d,\n                        size: this.sliceSizes[d],\n                        value: e[d]\n                    }), f = this.getChangedPath(l, c), x = s.drawPath({\n                        d: f,\n                        stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d] : this.lineColorArr,\n                        strokeWidth: 0,\n                        fill: p,\n                        fillOpacity: i.config.fill.opacity,\n                        classes: \"apexcharts-pie-area apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(d)\n                    });\n                    if (x.attr({\n                        index: 0,\n                        j: d\n                    }), a.setSelectionFilter(x, 0, d), i.config.chart.dropShadow.enabled) {\n                        var b = i.config.chart.dropShadow;\n                        a.dropShadow(x, b, d);\n                    }\n                    this.addListeners(x, this.donutDataLabels), Mi.setAttrs(x.node, {\n                        \"data:angle\": g,\n                        \"data:startAngle\": o,\n                        \"data:strokeWidth\": this.strokeWidth,\n                        \"data:value\": e[d]\n                    });\n                    var m = {\n                        x: 0,\n                        y: 0\n                    };\n                    \"pie\" === this.chartType || \"polarArea\" === this.chartType ? m = v.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, (o + g / 2) % this.fullAngle) : \"donut\" === this.chartType && (m = v.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, (o + g / 2) % this.fullAngle)), u.add(x);\n                    var y = 0;\n                    if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (y = g / this.fullAngle * i.config.chart.animations.speed) && (y = 1), this.animDur = y + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(x, {\n                        size: this.sliceSizes[d],\n                        endAngle: h,\n                        startAngle: o,\n                        prevStartAngle: l,\n                        prevEndAngle: c,\n                        animateStartingPos: !0,\n                        i: d,\n                        animBeginArr: this.animBeginArr,\n                        shouldSetPrevPaths: !0,\n                        dur: i.config.chart.animations.dynamicAnimation.speed\n                    }) : this.animatePaths(x, {\n                        size: this.sliceSizes[d],\n                        endAngle: h,\n                        startAngle: o,\n                        i: d,\n                        totalItems: t.length - 1,\n                        animBeginArr: this.animBeginArr,\n                        dur: y\n                    }), i.config.plotOptions.pie.expandOnClick && \"polarArea\" !== this.chartType && x.node.addEventListener(\"mouseup\", this.pieClicked.bind(this, d)), void 0 !== i.globals.selectedDataPoints[0] && i.globals.selectedDataPoints[0].indexOf(d) > -1 && this.pieClicked(d), i.config.dataLabels.enabled) {\n                        var w = m.x, k = m.y, A = 100 * g / this.fullAngle + \"%\";\n                        if (0 !== g && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {\n                            var C = i.config.dataLabels.formatter;\n                            void 0 !== C && (A = C(i.globals.seriesPercent[d][0], {\n                                seriesIndex: d,\n                                w: i\n                            }));\n                            var S = i.globals.dataLabels.style.colors[d], L = s.group({\n                                class: \"apexcharts-datalabels\"\n                            }), M = s.drawText({\n                                x: w,\n                                y: k,\n                                text: A,\n                                textAnchor: \"middle\",\n                                fontSize: i.config.dataLabels.style.fontSize,\n                                fontFamily: i.config.dataLabels.style.fontFamily,\n                                fontWeight: i.config.dataLabels.style.fontWeight,\n                                foreColor: S\n                            });\n                            if (L.add(M), i.config.dataLabels.dropShadow.enabled) {\n                                var P = i.config.dataLabels.dropShadow;\n                                a.dropShadow(M, P);\n                            }\n                            M.node.classList.add(\"apexcharts-pie-label\"), i.config.chart.animations.animate && !1 === i.globals.resized && (M.node.classList.add(\"apexcharts-pie-label-delay\"), M.node.style.animationDelay = i.config.chart.animations.speed / 940 + \"s\"), this.sliceLabels.push(L);\n                        }\n                    }\n                }\n                return n;\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function(t, e) {\n                var i = new Mi(this.ctx);\n                t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mouseleave\", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener(\"mouseenter\", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", this.printDataLabelsInner.bind(this, t.node, e)));\n            }\n        },\n        {\n            key: \"animatePaths\",\n            value: function(t, e) {\n                var i = this.w, a = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle, s = a, r = e.startAngle, n = e.startAngle;\n                void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (r = e.prevEndAngle, s = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (a + n > this.fullAngle ? e.endAngle = e.endAngle - (a + n) : a + n < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + n)))), a === this.fullAngle && (a = this.fullAngle - .01), this.animateArc(t, r, n, a, s, e);\n            }\n        },\n        {\n            key: \"animateArc\",\n            value: function(t, e, i, a, s, r) {\n                var n, o = this, l = this.w, h = new y(this.ctx), c = r.size;\n                (isNaN(e) || isNaN(s)) && (e = i, s = a, r.dur = 0);\n                var d = a, u = i, g = e < i ? this.fullAngle + e - i : e - i;\n                l.globals.dataChanged && r.shouldSetPrevPaths && r.prevEndAngle && (n = o.getPiePath({\n                    me: o,\n                    startAngle: r.prevStartAngle,\n                    angle: r.prevEndAngle < r.prevStartAngle ? this.fullAngle + r.prevEndAngle - r.prevStartAngle : r.prevEndAngle - r.prevStartAngle,\n                    size: c\n                }), t.attr({\n                    d: n\n                })), 0 !== r.dur ? t.animate(r.dur, r.animBeginArr[r.i]).after(function() {\n                    \"pie\" !== o.chartType && \"donut\" !== o.chartType && \"polarArea\" !== o.chartType || this.animate(l.config.chart.animations.dynamicAnimation.speed).attr({\n                        \"stroke-width\": o.strokeWidth\n                    }), r.i === l.config.series.length - 1 && h.animationCompleted(t);\n                }).during(function(l) {\n                    d = g + (a - g) * l, r.animateStartingPos && (d = s + (a - s) * l, u = e - s + (i - (e - s)) * l), n = o.getPiePath({\n                        me: o,\n                        startAngle: u,\n                        angle: d,\n                        size: c\n                    }), t.node.setAttribute(\"data:pathOrig\", n), t.attr({\n                        d: n\n                    });\n                }) : (n = o.getPiePath({\n                    me: o,\n                    startAngle: u,\n                    angle: a,\n                    size: c\n                }), r.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute(\"data:pathOrig\", n), t.attr({\n                    d: n,\n                    \"stroke-width\": o.strokeWidth\n                }));\n            }\n        },\n        {\n            key: \"pieClicked\",\n            value: function(t) {\n                var e, i = this.w, a = this, s = a.sliceSizes[t] + (i.config.plotOptions.pie.expandOnClick ? 4 : 0), r = i.globals.dom.Paper.findOne(\".apexcharts-\".concat(a.chartType.toLowerCase(), \"-slice-\").concat(t));\n                if (\"true\" !== r.attr(\"data:pieClicked\")) {\n                    var n = i.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\");\n                    Array.prototype.forEach.call(n, function(t) {\n                        t.setAttribute(\"data:pieClicked\", \"false\");\n                        var e = t.getAttribute(\"data:pathOrig\");\n                        e && t.setAttribute(\"d\", e);\n                    }), i.globals.capturedDataPointIndex = t, r.attr(\"data:pieClicked\", \"true\");\n                    var o = parseInt(r.attr(\"data:startAngle\"), 10), l = parseInt(r.attr(\"data:angle\"), 10);\n                    e = a.getPiePath({\n                        me: a,\n                        startAngle: o,\n                        angle: l,\n                        size: s\n                    }), 360 !== l && r.plot(e);\n                } else {\n                    r.attr({\n                        \"data:pieClicked\": \"false\"\n                    }), this.revertDataLabelsInner(r.node, this.donutDataLabels);\n                    var h = r.attr(\"data:pathOrig\");\n                    r.attr({\n                        d: h\n                    });\n                }\n            }\n        },\n        {\n            key: \"getChangedPath\",\n            value: function(t, e) {\n                var i = \"\";\n                return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({\n                    me: this,\n                    startAngle: t,\n                    angle: e - t,\n                    size: this.size\n                })), i;\n            }\n        },\n        {\n            key: \"getPiePath\",\n            value: function(t) {\n                var e, i = t.me, a = t.startAngle, s = t.angle, r = t.size, n = new Mi(this.ctx), o = a, l = Math.PI * (o - 90) / 180, h = s + a;\n                Math.ceil(h) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(h) > this.fullAngle && (h -= this.fullAngle);\n                var c = Math.PI * (h - 90) / 180, d = i.centerX + r * Math.cos(l), u = i.centerY + r * Math.sin(l), g = i.centerX + r * Math.cos(c), p = i.centerY + r * Math.sin(c), f = v.polarToCartesian(i.centerX, i.centerY, i.donutSize, h), x = v.polarToCartesian(i.centerX, i.centerY, i.donutSize, o), b = s > 180 ? 1 : 0, m = [\n                    \"M\",\n                    d,\n                    u,\n                    \"A\",\n                    r,\n                    r,\n                    0,\n                    b,\n                    1,\n                    g,\n                    p\n                ];\n                return e = \"donut\" === i.chartType ? [].concat(m, [\n                    \"L\",\n                    f.x,\n                    f.y,\n                    \"A\",\n                    i.donutSize,\n                    i.donutSize,\n                    0,\n                    b,\n                    0,\n                    x.x,\n                    x.y,\n                    \"L\",\n                    d,\n                    u,\n                    \"z\"\n                ]).join(\" \") : \"pie\" === i.chartType || \"polarArea\" === i.chartType ? [].concat(m, [\n                    \"L\",\n                    i.centerX,\n                    i.centerY,\n                    \"L\",\n                    d,\n                    u\n                ]).join(\" \") : [].concat(m).join(\" \"), n.roundPathCorners(e, 2 * this.strokeWidth);\n            }\n        },\n        {\n            key: \"drawPolarElements\",\n            value: function(t) {\n                var e = this.w, i = new ta(this.ctx), a = new Mi(this.ctx), s = new Ra(this.ctx), r = a.group(), n = a.group(), o = i.niceScale(0, Math.ceil(this.maxY), 0), l = o.result.reverse(), h = o.result.length;\n                this.maxY = o.niceMax;\n                for(var c = e.globals.radialSize, d = c / (h - 1), u = 0; u < h - 1; u++){\n                    var g = a.drawCircle(c);\n                    if (g.attr({\n                        cx: this.centerX,\n                        cy: this.centerY,\n                        fill: \"none\",\n                        \"stroke-width\": e.config.plotOptions.polarArea.rings.strokeWidth,\n                        stroke: e.config.plotOptions.polarArea.rings.strokeColor\n                    }), e.config.yaxis[0].show) {\n                        var p = s.drawYAxisTexts(this.centerX, this.centerY - c + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, u, l[u]);\n                        n.add(p);\n                    }\n                    r.add(g), c -= d;\n                }\n                this.drawSpokes(t), t.add(r), t.add(n);\n            }\n        },\n        {\n            key: \"renderInnerDataLabels\",\n            value: function(t, e, i) {\n                var a = this.w, s = new Mi(this.ctx), r = e.total.show;\n                t.node.innerHTML = \"\", t.node.style.opacity = i.opacity;\n                var n, o, l = i.centerX, h = this.donutDataLabels.total.label ? i.centerY : i.centerY - i.centerY / 6;\n                n = void 0 === e.name.color ? a.globals.colors[0] : e.name.color;\n                var c = e.name.fontSize, d = e.name.fontFamily, u = e.name.fontWeight;\n                o = void 0 === e.value.color ? a.config.chart.foreColor : e.value.color;\n                var g = e.value.formatter, p = \"\", f = \"\";\n                if (r ? (n = e.total.color, c = e.total.fontSize, d = e.total.fontFamily, u = e.total.fontWeight, f = this.donutDataLabels.total.label ? e.total.label : \"\", p = e.total.formatter(a)) : 1 === a.globals.series.length && (p = g(a.globals.series[0], a), f = a.globals.seriesNames[0]), f && (f = e.name.formatter(f, e.total.show, a)), e.name.show) {\n                    var x = s.drawText({\n                        x: l,\n                        y: h + parseFloat(e.name.offsetY),\n                        text: f,\n                        textAnchor: \"middle\",\n                        foreColor: n,\n                        fontSize: c,\n                        fontWeight: u,\n                        fontFamily: d\n                    });\n                    x.node.classList.add(\"apexcharts-datalabel-label\"), t.add(x);\n                }\n                if (e.value.show) {\n                    var b = e.name.show ? parseFloat(e.value.offsetY) + 16 : e.value.offsetY, m = s.drawText({\n                        x: l,\n                        y: h + b,\n                        text: p,\n                        textAnchor: \"middle\",\n                        foreColor: o,\n                        fontWeight: e.value.fontWeight,\n                        fontSize: e.value.fontSize,\n                        fontFamily: e.value.fontFamily\n                    });\n                    m.node.classList.add(\"apexcharts-datalabel-value\"), t.add(m);\n                }\n                return t;\n            }\n        },\n        {\n            key: \"printInnerLabels\",\n            value: function(t, e, i, a) {\n                var s, r = this.w;\n                a ? s = void 0 === t.name.color ? r.globals.colors[parseInt(a.parentNode.getAttribute(\"rel\"), 10) - 1] : t.name.color : r.globals.series.length > 1 && t.total.show && (s = t.total.color);\n                var n = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-label\"), o = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-value\");\n                i = (0, t.value.formatter)(i, r), a || \"function\" != typeof t.total.formatter || (i = t.total.formatter(r));\n                var l = e === t.total.label;\n                e = this.donutDataLabels.total.label ? t.name.formatter(e, l, r) : \"\", null !== n && (n.textContent = e), null !== o && (o.textContent = i), null !== n && (n.style.fill = s);\n            }\n        },\n        {\n            key: \"printDataLabelsInner\",\n            value: function(t, e) {\n                var i = this.w, a = t.getAttribute(\"data:value\"), s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute(\"rel\"), 10) - 1];\n                i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);\n                var r = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n                null !== r && (r.style.opacity = 1);\n            }\n        },\n        {\n            key: \"drawSpokes\",\n            value: function(t) {\n                var e = this, i = this.w, a = new Mi(this.ctx), s = i.config.plotOptions.polarArea.spokes;\n                if (0 !== s.strokeWidth) {\n                    for(var r = [], n = 360 / i.globals.series.length, o = 0; o < i.globals.series.length; o++)r.push(v.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize, i.config.plotOptions.pie.startAngle + n * o));\n                    r.forEach(function(i, r) {\n                        var n = a.drawLine(i.x, i.y, e.centerX, e.centerY, Array.isArray(s.connectorColors) ? s.connectorColors[r] : s.connectorColors);\n                        t.add(n);\n                    });\n                }\n            }\n        },\n        {\n            key: \"revertDataLabelsInner\",\n            value: function() {\n                var t = this.w;\n                if (this.donutDataLabels.show) {\n                    var e = t.globals.dom.Paper.findOne(\".apexcharts-datalabels-group\"), i = this.renderInnerDataLabels(e, this.donutDataLabels, {\n                        hollowSize: this.donutSize,\n                        centerX: this.centerX,\n                        centerY: this.centerY,\n                        opacity: this.donutDataLabels.show\n                    });\n                    t.globals.dom.Paper.findOne(\".apexcharts-radialbar, .apexcharts-pie\").add(i);\n                }\n            }\n        }\n    ]), t;\n}(), Ya = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;\n        var a = this.w;\n        this.graphics = new Mi(this.ctx), this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = a.globals.svgHeight < a.globals.svgWidth ? a.globals.gridHeight : a.globals.gridWidth, this.isLog = a.config.yaxis[0].logarithmic, this.logBase = a.config.yaxis[0].logBase, this.coreUtils = new Pi(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, a.globals.maxY, 0) : a.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : a.globals.minY, this.polygons = a.config.plotOptions.radar.polygons, this.strokeWidth = a.config.stroke.show ? a.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - a.config.chart.dropShadow.blur, a.config.xaxis.labels.show && (this.size = this.size - a.globals.xAxisLabelsWidth / 1.75), void 0 !== a.config.plotOptions.radar.size && (this.size = a.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this, i = this.w, a = new ji(this.ctx), s = [], r = new qi(this.ctx);\n                t.length && (this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;\n                var n = i.globals.gridWidth / 2, o = i.globals.gridHeight / 2, l = n + i.config.plotOptions.radar.offsetX, h = o + i.config.plotOptions.radar.offsetY, c = this.graphics.group({\n                    class: \"apexcharts-radar-series apexcharts-plot-series\",\n                    transform: \"translate(\".concat(l || 0, \", \").concat(h || 0, \")\")\n                }), d = [], g = null, p = null;\n                if (this.yaxisLabels = this.graphics.group({\n                    class: \"apexcharts-yaxis\"\n                }), t.forEach(function(t, n) {\n                    var o = t.length === i.globals.dataPoints, l = e.graphics.group().attr({\n                        class: \"apexcharts-series\",\n                        \"data:longestSeries\": o,\n                        seriesName: v.escapeString(i.globals.seriesNames[n]),\n                        rel: n + 1,\n                        \"data:realIndex\": n\n                    });\n                    e.dataRadiusOfPercent[n] = [], e.dataRadius[n] = [], e.angleArr[n] = [], t.forEach(function(t, i) {\n                        var a = Math.abs(e.maxValue - e.minValue);\n                        t -= e.minValue, e.isLog && (t = e.coreUtils.getLogVal(e.logBase, t, 0)), e.dataRadiusOfPercent[n][i] = t / a, e.dataRadius[n][i] = e.dataRadiusOfPercent[n][i] * e.size, e.angleArr[n][i] = i * e.disAngle;\n                    }), d = e.getDataPointsPos(e.dataRadius[n], e.angleArr[n]);\n                    var h = e.createPaths(d, {\n                        x: 0,\n                        y: 0\n                    });\n                    g = e.graphics.group({\n                        class: \"apexcharts-series-markers-wrap apexcharts-element-hidden\"\n                    }), p = e.graphics.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": n\n                    }), i.globals.delayedElements.push({\n                        el: g.node,\n                        index: n\n                    });\n                    var c = {\n                        i: n,\n                        realIndex: n,\n                        animationDelay: n,\n                        initialSpeed: i.config.chart.animations.speed,\n                        dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,\n                        className: \"apexcharts-radar\",\n                        shouldClipToGrid: !1,\n                        bindEventsOnPaths: !1,\n                        stroke: i.globals.stroke.colors[n],\n                        strokeLineCap: i.config.stroke.lineCap\n                    }, f = null;\n                    i.globals.previousPaths.length > 0 && (f = e.getPreviousPath(n));\n                    for(var x = 0; x < h.linePathsTo.length; x++){\n                        var b = e.graphics.renderPaths(u(u({}, c), {}, {\n                            pathFrom: null === f ? h.linePathsFrom[x] : f,\n                            pathTo: h.linePathsTo[x],\n                            strokeWidth: Array.isArray(e.strokeWidth) ? e.strokeWidth[n] : e.strokeWidth,\n                            fill: \"none\",\n                            drawShadow: !1\n                        }));\n                        l.add(b);\n                        var m = a.fillPath({\n                            seriesNumber: n\n                        }), y = e.graphics.renderPaths(u(u({}, c), {}, {\n                            pathFrom: null === f ? h.areaPathsFrom[x] : f,\n                            pathTo: h.areaPathsTo[x],\n                            strokeWidth: 0,\n                            fill: m,\n                            drawShadow: !1\n                        }));\n                        if (i.config.chart.dropShadow.enabled) {\n                            var w = new Li(e.ctx), k = i.config.chart.dropShadow;\n                            w.dropShadow(y, Object.assign({}, k, {\n                                noUserSpaceOnUse: !0\n                            }), n);\n                        }\n                        l.add(y);\n                    }\n                    t.forEach(function(t, a) {\n                        var s = new Vi(e.ctx).getMarkerConfig({\n                            cssClass: \"apexcharts-marker\",\n                            seriesIndex: n,\n                            dataPointIndex: a\n                        }), o = e.graphics.drawMarker(d[a].x, d[a].y, s);\n                        o.attr(\"rel\", a), o.attr(\"j\", a), o.attr(\"index\", n), o.node.setAttribute(\"default-marker-size\", s.pSize);\n                        var h = e.graphics.group({\n                            class: \"apexcharts-series-markers\"\n                        });\n                        h && h.add(o), g.add(h), l.add(g);\n                        var c = i.config.dataLabels;\n                        if (c.enabled) {\n                            var f = c.formatter(i.globals.series[n][a], {\n                                seriesIndex: n,\n                                dataPointIndex: a,\n                                w: i\n                            });\n                            r.plotDataLabelsText({\n                                x: d[a].x,\n                                y: d[a].y,\n                                text: f,\n                                textAnchor: \"middle\",\n                                i: n,\n                                j: n,\n                                parent: p,\n                                offsetCorrection: !1,\n                                dataLabelsConfig: u({}, c)\n                            });\n                        }\n                        l.add(p);\n                    }), s.push(l);\n                }), this.drawPolygons({\n                    parent: c\n                }), i.config.xaxis.labels.show) {\n                    var f = this.drawXAxisTexts();\n                    c.add(f);\n                }\n                return s.forEach(function(t) {\n                    c.add(t);\n                }), c.add(this.yaxisLabels), c;\n            }\n        },\n        {\n            key: \"drawPolygons\",\n            value: function(t) {\n                for(var e = this, i = this.w, a = t.parent, s = new Ra(this.ctx), r = i.globals.yAxisScale[0].result.reverse(), n = r.length, o = [], l = this.size / (n - 1), h = 0; h < n; h++)o[h] = l * h;\n                o.reverse();\n                var c = [], d = [];\n                o.forEach(function(t, i) {\n                    var a = v.getPolygonPos(t, e.dataPointsLen), s = \"\";\n                    a.forEach(function(t, a) {\n                        if (0 === i) {\n                            var r = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[a] : e.polygons.connectorColors);\n                            d.push(r);\n                        }\n                        0 === a && e.yaxisLabelsTextsPos.push({\n                            x: t.x,\n                            y: t.y\n                        }), s += t.x + \",\" + t.y + \" \";\n                    }), c.push(s);\n                }), c.forEach(function(t, s) {\n                    var r = e.polygons.strokeColors, n = e.polygons.strokeWidth, o = e.graphics.drawPolygon(t, Array.isArray(r) ? r[s] : r, Array.isArray(n) ? n[s] : n, i.globals.radarPolygons.fill.colors[s]);\n                    a.add(o);\n                }), d.forEach(function(t) {\n                    a.add(t);\n                }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t, i) {\n                    var a = s.drawYAxisTexts(t.x, t.y, i, r[i]);\n                    e.yaxisLabels.add(a);\n                });\n            }\n        },\n        {\n            key: \"drawXAxisTexts\",\n            value: function() {\n                var t = this, e = this.w, i = e.config.xaxis.labels, a = this.graphics.group({\n                    class: \"apexcharts-xaxis\"\n                }), s = v.getPolygonPos(this.size, this.dataPointsLen);\n                return e.globals.labels.forEach(function(r, n) {\n                    var o = e.config.xaxis.labels.formatter, l = new qi(t.ctx);\n                    if (s[n]) {\n                        var h = t.getTextPos(s[n], t.size), c = o(r, {\n                            seriesIndex: -1,\n                            dataPointIndex: n,\n                            w: e\n                        });\n                        l.plotDataLabelsText({\n                            x: h.newX,\n                            y: h.newY,\n                            text: c,\n                            textAnchor: h.textAnchor,\n                            i: n,\n                            j: n,\n                            parent: a,\n                            className: \"apexcharts-xaxis-label\",\n                            color: Array.isArray(i.style.colors) && i.style.colors[n] ? i.style.colors[n] : \"#a8a8a8\",\n                            dataLabelsConfig: u({\n                                textAnchor: h.textAnchor,\n                                dropShadow: {\n                                    enabled: !1\n                                }\n                            }, i),\n                            offsetCorrection: !1\n                        }).on(\"click\", function(i) {\n                            if (\"function\" == typeof e.config.chart.events.xAxisLabelClick) {\n                                var a = Object.assign({}, e, {\n                                    labelIndex: n\n                                });\n                                e.config.chart.events.xAxisLabelClick(i, t.ctx, a);\n                            }\n                        });\n                    }\n                }), a;\n            }\n        },\n        {\n            key: \"createPaths\",\n            value: function(t, e) {\n                var i = this, a = [], s = [], r = [], n = [];\n                if (t.length) {\n                    s = [\n                        this.graphics.move(e.x, e.y)\n                    ], n = [\n                        this.graphics.move(e.x, e.y)\n                    ];\n                    var o = this.graphics.move(t[0].x, t[0].y), l = this.graphics.move(t[0].x, t[0].y);\n                    t.forEach(function(e, a) {\n                        o += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), a === t.length - 1 && (o += \"Z\", l += \"Z\");\n                    }), a.push(o), r.push(l);\n                }\n                return {\n                    linePathsFrom: s,\n                    linePathsTo: a,\n                    areaPathsFrom: n,\n                    areaPathsTo: r\n                };\n            }\n        },\n        {\n            key: \"getTextPos\",\n            value: function(t, e) {\n                var i = \"middle\", a = t.x, s = t.y;\n                return Math.abs(t.x) >= 10 ? t.x > 0 ? (i = \"start\", a += 10) : t.x < 0 && (i = \"end\", a -= 10) : i = \"middle\", Math.abs(t.y) >= e - 10 && (t.y < 0 ? s -= 10 : t.y > 0 && (s += 10)), {\n                    textAnchor: i,\n                    newX: a,\n                    newY: s\n                };\n            }\n        },\n        {\n            key: \"getPreviousPath\",\n            value: function(t) {\n                for(var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++){\n                    var s = e.globals.previousPaths[a];\n                    s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"getDataPointsPos\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;\n                t = t || [], e = e || [];\n                for(var a = [], s = 0; s < i; s++){\n                    var r = {};\n                    r.x = t[s] * Math.sin(e[s]), r.y = -t[s] * Math.cos(e[s]), a.push(r);\n                }\n                return a;\n            }\n        }\n    ]), t;\n}(), Ha = function(t) {\n    h(r, Ea);\n    var a = n(r);\n    function r(t) {\n        var s;\n        i(this, r), (s = a.call(this, t)).ctx = t, s.w = t.w, s.animBeginArr = [\n            0\n        ], s.animDur = 0;\n        var n = s.w;\n        return s.startAngle = n.config.plotOptions.radialBar.startAngle, s.endAngle = n.config.plotOptions.radialBar.endAngle, s.totalAngle = Math.abs(n.config.plotOptions.radialBar.endAngle - n.config.plotOptions.radialBar.startAngle), s.trackStartAngle = n.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = n.config.plotOptions.radialBar.track.endAngle, s.barLabels = s.w.config.plotOptions.radialBar.barLabels, s.donutDataLabels = s.w.config.plotOptions.radialBar.dataLabels, s.radialDataLabels = s.donutDataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.margin = parseInt(n.config.plotOptions.radialBar.track.margin, 10), s.onBarLabelClick = s.onBarLabelClick.bind(e(s)), s;\n    }\n    return s(r, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = i.group({\n                    class: \"apexcharts-radialbar\"\n                });\n                if (e.globals.noData) return a;\n                var s = i.group(), r = this.defaultSize / 2, n = e.globals.gridWidth / 2, o = this.defaultSize / 2.05;\n                e.config.chart.sparkline.enabled || (o = o - e.config.stroke.width - e.config.chart.dropShadow.blur);\n                var l = e.globals.fill.colors;\n                if (e.config.plotOptions.radialBar.track.show) {\n                    var h = this.drawTracks({\n                        size: o,\n                        centerX: n,\n                        centerY: r,\n                        colorArr: l,\n                        series: t\n                    });\n                    s.add(h);\n                }\n                var c = this.drawArcs({\n                    size: o,\n                    centerX: n,\n                    centerY: r,\n                    colorArr: l,\n                    series: t\n                }), d = 360;\n                e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);\n                var u = (360 - d) / 360;\n                if (e.globals.radialSize = o - o * u, this.radialDataLabels.value.show) {\n                    var g = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);\n                    e.globals.radialSize += g * u;\n                }\n                return s.add(c.g), \"front\" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), a.add(s), a;\n            }\n        },\n        {\n            key: \"drawTracks\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = i.group({\n                    class: \"apexcharts-tracks\"\n                }), s = new Li(this.ctx), r = new ji(this.ctx), n = this.getStrokeWidth(t);\n                t.size = t.size - n / 2;\n                for(var o = 0; o < t.series.length; o++){\n                    var l = i.group({\n                        class: \"apexcharts-radialbar-track apexcharts-track\"\n                    });\n                    a.add(l), l.attr({\n                        rel: o + 1\n                    }), t.size = t.size - n - this.margin;\n                    var h = e.config.plotOptions.radialBar.track, c = r.fillPath({\n                        seriesNumber: 0,\n                        size: t.size,\n                        fillColors: Array.isArray(h.background) ? h.background[o] : h.background,\n                        solid: !0\n                    }), d = this.trackStartAngle, u = this.trackEndAngle;\n                    Math.abs(u) + Math.abs(d) >= 360 && (u = 360 - Math.abs(this.startAngle) - .1);\n                    var g = i.drawPath({\n                        d: \"\",\n                        stroke: c,\n                        strokeWidth: n * parseInt(h.strokeWidth, 10) / 100,\n                        fill: \"none\",\n                        strokeOpacity: h.opacity,\n                        classes: \"apexcharts-radialbar-area\"\n                    });\n                    if (h.dropShadow.enabled) {\n                        var p = h.dropShadow;\n                        s.dropShadow(g, p);\n                    }\n                    l.add(g), g.attr(\"id\", \"apexcharts-radialbarTrack-\" + o), this.animatePaths(g, {\n                        centerX: t.centerX,\n                        centerY: t.centerY,\n                        endAngle: u,\n                        startAngle: d,\n                        size: t.size,\n                        i: o,\n                        totalItems: 2,\n                        animBeginArr: 0,\n                        dur: 0,\n                        isTrack: !0\n                    });\n                }\n                return a;\n            }\n        },\n        {\n            key: \"drawArcs\",\n            value: function(t) {\n                var e = this.w, i = new Mi(this.ctx), a = new ji(this.ctx), s = new Li(this.ctx), r = i.group(), n = this.getStrokeWidth(t);\n                t.size = t.size - n / 2;\n                var o = e.config.plotOptions.radialBar.hollow.background, l = t.size - n * t.series.length - this.margin * t.series.length - n * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h = l - e.config.plotOptions.radialBar.hollow.margin;\n                void 0 !== e.config.plotOptions.radialBar.hollow.image && (o = this.drawHollowImage(t, r, l, o));\n                var c = this.drawHollow({\n                    size: h,\n                    centerX: t.centerX,\n                    centerY: t.centerY,\n                    fill: o || \"transparent\"\n                });\n                if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n                    var d = e.config.plotOptions.radialBar.hollow.dropShadow;\n                    s.dropShadow(c, d);\n                }\n                var u = 1;\n                !this.radialDataLabels.total.show && e.globals.series.length > 1 && (u = 0);\n                var g = null;\n                if (this.radialDataLabels.show) {\n                    var p = e.globals.dom.Paper.findOne(\".apexcharts-datalabels-group\");\n                    g = this.renderInnerDataLabels(p, this.radialDataLabels, {\n                        hollowSize: l,\n                        centerX: t.centerX,\n                        centerY: t.centerY,\n                        opacity: u\n                    });\n                }\n                \"back\" === e.config.plotOptions.radialBar.hollow.position && (r.add(c), g && r.add(g));\n                var f = !1;\n                e.config.plotOptions.radialBar.inverseOrder && (f = !0);\n                for(var x = f ? t.series.length - 1 : 0; f ? x >= 0 : x < t.series.length; f ? x-- : x++){\n                    var b = i.group({\n                        class: \"apexcharts-series apexcharts-radial-series\",\n                        seriesName: v.escapeString(e.globals.seriesNames[x])\n                    });\n                    r.add(b), b.attr({\n                        rel: x + 1,\n                        \"data:realIndex\": x\n                    }), this.ctx.series.addCollapsedClassToSeries(b, x), t.size = t.size - n - this.margin;\n                    var m = a.fillPath({\n                        seriesNumber: x,\n                        size: t.size,\n                        value: t.series[x]\n                    }), y = this.startAngle, w = void 0, k = v.negToZero(t.series[x] > 100 ? 100 : t.series[x]) / 100, A = Math.round(this.totalAngle * k) + this.startAngle, C = void 0;\n                    e.globals.dataChanged && (w = this.startAngle, C = Math.round(this.totalAngle * v.negToZero(e.globals.previousPaths[x]) / 100) + w), Math.abs(A) + Math.abs(y) > 360 && (A -= .01), Math.abs(C) + Math.abs(w) > 360 && (C -= .01);\n                    var S = A - y, L = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[x] : e.config.stroke.dashArray, M = i.drawPath({\n                        d: \"\",\n                        stroke: m,\n                        strokeWidth: n,\n                        fill: \"none\",\n                        fillOpacity: e.config.fill.opacity,\n                        classes: \"apexcharts-radialbar-area apexcharts-radialbar-slice-\" + x,\n                        strokeDashArray: L\n                    });\n                    if (Mi.setAttrs(M.node, {\n                        \"data:angle\": S,\n                        \"data:value\": t.series[x]\n                    }), e.config.chart.dropShadow.enabled) {\n                        var P = e.config.chart.dropShadow;\n                        s.dropShadow(M, P, x);\n                    }\n                    if (s.setSelectionFilter(M, 0, x), this.addListeners(M, this.radialDataLabels), b.add(M), M.attr({\n                        index: 0,\n                        j: x\n                    }), this.barLabels.enabled) {\n                        var I = v.polarToCartesian(t.centerX, t.centerY, t.size, y), T = this.barLabels.formatter(e.globals.seriesNames[x], {\n                            seriesIndex: x,\n                            w: e\n                        }), z = [\n                            \"apexcharts-radialbar-label\"\n                        ];\n                        this.barLabels.onClick || z.push(\"apexcharts-no-click\");\n                        var X = this.barLabels.useSeriesColors ? e.globals.colors[x] : e.config.chart.foreColor;\n                        X || (X = e.config.chart.foreColor);\n                        var R = I.x + this.barLabels.offsetX, E = I.y + this.barLabels.offsetY, Y = i.drawText({\n                            x: R,\n                            y: E,\n                            text: T,\n                            textAnchor: \"end\",\n                            dominantBaseline: \"middle\",\n                            fontFamily: this.barLabels.fontFamily,\n                            fontWeight: this.barLabels.fontWeight,\n                            fontSize: this.barLabels.fontSize,\n                            foreColor: X,\n                            cssClass: z.join(\" \")\n                        });\n                        Y.on(\"click\", this.onBarLabelClick), Y.attr({\n                            rel: x + 1\n                        }), 0 !== y && Y.attr({\n                            \"transform-origin\": \"\".concat(R, \" \").concat(E),\n                            transform: \"rotate(\".concat(y, \" 0 0)\")\n                        }), b.add(Y);\n                    }\n                    var H = 0;\n                    !this.initialAnim || e.globals.resized || e.globals.dataChanged || (H = e.config.chart.animations.speed), e.globals.dataChanged && (H = e.config.chart.animations.dynamicAnimation.speed), this.animDur = H / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(M, {\n                        centerX: t.centerX,\n                        centerY: t.centerY,\n                        endAngle: A,\n                        startAngle: y,\n                        prevEndAngle: C,\n                        prevStartAngle: w,\n                        size: t.size,\n                        i: x,\n                        totalItems: 2,\n                        animBeginArr: this.animBeginArr,\n                        dur: H,\n                        shouldSetPrevPaths: !0\n                    });\n                }\n                return {\n                    g: r,\n                    elHollow: c,\n                    dataLabels: g\n                };\n            }\n        },\n        {\n            key: \"drawHollow\",\n            value: function(t) {\n                var e = new Mi(this.ctx).drawCircle(2 * t.size);\n                return e.attr({\n                    class: \"apexcharts-radialbar-hollow\",\n                    cx: t.centerX,\n                    cy: t.centerY,\n                    r: t.size,\n                    fill: t.fill\n                }), e;\n            }\n        },\n        {\n            key: \"drawHollowImage\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = new ji(this.ctx), n = v.randomId(), o = s.config.plotOptions.radialBar.hollow.image;\n                if (s.config.plotOptions.radialBar.hollow.imageClipped) r.clippedImgArea({\n                    width: i,\n                    height: i,\n                    image: o,\n                    patternID: \"pattern\".concat(s.globals.cuid).concat(n)\n                }), a = \"url(#pattern\".concat(s.globals.cuid).concat(n, \")\");\n                else {\n                    var l = s.config.plotOptions.radialBar.hollow.imageWidth, h = s.config.plotOptions.radialBar.hollow.imageHeight;\n                    if (void 0 === l && void 0 === h) {\n                        var c = s.globals.dom.Paper.image(o, function(e) {\n                            this.move(t.centerX - e.width / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY);\n                        });\n                        e.add(c);\n                    } else {\n                        var d = s.globals.dom.Paper.image(o, function(e) {\n                            this.move(t.centerX - l / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);\n                        });\n                        e.add(d);\n                    }\n                }\n                return a;\n            }\n        },\n        {\n            key: \"getStrokeWidth\",\n            value: function(t) {\n                var e = this.w;\n                return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin;\n            }\n        },\n        {\n            key: \"onBarLabelClick\",\n            value: function(t) {\n                var e = parseInt(t.target.getAttribute(\"rel\"), 10) - 1, i = this.barLabels.onClick, a = this.w;\n                i && i(a.globals.seriesNames[e], {\n                    w: a,\n                    seriesIndex: e\n                });\n            }\n        }\n    ]), r;\n}(), Oa = function(t) {\n    h(a, Pa);\n    var e = n(a);\n    function a() {\n        return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [\n        {\n            key: \"draw\",\n            value: function(t, e) {\n                var i = this.w, a = new Mi(this.ctx);\n                this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = i.globals.seriesRangeStart, this.seriesRangeEnd = i.globals.seriesRangeEnd, this.barHelpers.initVariables(t);\n                for(var s = a.group({\n                    class: \"apexcharts-rangebar-series apexcharts-plot-series\"\n                }), r = 0; r < t.length; r++){\n                    var n, o, l, h, c = void 0, d = void 0, g = i.globals.comboCharts ? e[r] : r, p = this.barHelpers.getGroupIndex(g).columnGroupIndex, f = a.group({\n                        class: \"apexcharts-series\",\n                        seriesName: v.escapeString(i.globals.seriesNames[g]),\n                        rel: r + 1,\n                        \"data:realIndex\": g\n                    });\n                    this.ctx.series.addCollapsedClassToSeries(f, g), t[r].length > 0 && (this.visibleI = this.visibleI + 1);\n                    var x = 0, b = 0, m = 0;\n                    this.yRatio.length > 1 && (this.yaxisIndex = i.globals.seriesYAxisReverseMap[g][0], m = g);\n                    var y = this.barHelpers.initialPositions(g);\n                    d = y.y, h = y.zeroW, c = y.x, b = y.barWidth, x = y.barHeight, n = y.xDivision, o = y.yDivision, l = y.zeroH;\n                    for(var w = a.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": g\n                    }), k = a.group({\n                        class: \"apexcharts-rangebar-goals-markers\"\n                    }), A = 0; A < i.globals.dataPoints; A++){\n                        var C = this.barHelpers.getStrokeWidth(r, A, g), S = this.seriesRangeStart[r][A], L = this.seriesRangeEnd[r][A], M = null, P = null, I = null, T = {\n                            x: c,\n                            y: d,\n                            strokeWidth: C,\n                            elSeries: f\n                        }, z = this.seriesLen;\n                        if (i.config.plotOptions.bar.rangeBarGroupRows && (z = 1), void 0 === i.config.series[r].data[A]) break;\n                        if (this.isHorizontal) {\n                            I = d + x * this.visibleI;\n                            var X = (o - x * z) / 2;\n                            if (i.config.series[r].data[A].x) {\n                                var R = this.detectOverlappingBars({\n                                    i: r,\n                                    j: A,\n                                    barYPosition: I,\n                                    srty: X,\n                                    barHeight: x,\n                                    yDivision: o,\n                                    initPositions: y\n                                });\n                                x = R.barHeight, I = R.barYPosition;\n                            }\n                            b = (M = this.drawRangeBarPaths(u({\n                                indexes: {\n                                    i: r,\n                                    j: A,\n                                    realIndex: g\n                                },\n                                barHeight: x,\n                                barYPosition: I,\n                                zeroW: h,\n                                yDivision: o,\n                                y1: S,\n                                y2: L\n                            }, T))).barWidth;\n                        } else {\n                            i.globals.isXNumeric && (c = (i.globals.seriesX[r][A] - i.globals.minX) / this.xRatio - b / 2), P = c + b * this.visibleI;\n                            var E = (n - b * z) / 2;\n                            if (i.config.series[r].data[A].x) {\n                                var Y = this.detectOverlappingBars({\n                                    i: r,\n                                    j: A,\n                                    barXPosition: P,\n                                    srtx: E,\n                                    barWidth: b,\n                                    xDivision: n,\n                                    initPositions: y\n                                });\n                                b = Y.barWidth, P = Y.barXPosition;\n                            }\n                            x = (M = this.drawRangeColumnPaths(u({\n                                indexes: {\n                                    i: r,\n                                    j: A,\n                                    realIndex: g,\n                                    translationsIndex: m\n                                },\n                                barWidth: b,\n                                barXPosition: P,\n                                zeroH: l,\n                                xDivision: n\n                            }, T))).barHeight;\n                        }\n                        var H = this.barHelpers.drawGoalLine({\n                            barXPosition: M.barXPosition,\n                            barYPosition: I,\n                            goalX: M.goalX,\n                            goalY: M.goalY,\n                            barHeight: x,\n                            barWidth: b\n                        });\n                        H && k.add(H), d = M.y, c = M.x;\n                        var O = this.barHelpers.getPathFillColor(t, r, A, g);\n                        this.renderSeries({\n                            realIndex: g,\n                            pathFill: O.color,\n                            lineFill: O.useRangeColor ? O.color : i.globals.stroke.colors[g],\n                            j: A,\n                            i: r,\n                            x: c,\n                            y: d,\n                            y1: S,\n                            y2: L,\n                            pathFrom: M.pathFrom,\n                            pathTo: M.pathTo,\n                            strokeWidth: C,\n                            elSeries: f,\n                            series: t,\n                            barHeight: x,\n                            barWidth: b,\n                            barXPosition: P,\n                            barYPosition: I,\n                            columnGroupIndex: p,\n                            elDataLabelsWrap: w,\n                            elGoalsMarkers: k,\n                            visibleSeries: this.visibleI,\n                            type: \"rangebar\"\n                        });\n                    }\n                    s.add(f);\n                }\n                return s;\n            }\n        },\n        {\n            key: \"detectOverlappingBars\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = t.barYPosition, s = t.barXPosition, r = t.srty, n = t.srtx, o = t.barHeight, l = t.barWidth, h = t.yDivision, c = t.xDivision, d = t.initPositions, u = this.w, g = [], p = u.config.series[e].data[i].rangeName, f = u.config.series[e].data[i].x, x = Array.isArray(f) ? f.join(\" \") : f, b = u.globals.labels.map(function(t) {\n                    return Array.isArray(t) ? t.join(\" \") : t;\n                }).indexOf(x), m = u.globals.seriesRange[e].findIndex(function(t) {\n                    return t.x === x && t.overlaps.length > 0;\n                });\n                return this.isHorizontal ? (a = u.config.plotOptions.bar.rangeBarGroupRows ? r + h * b : r + o * this.visibleI + h * b, m > -1 && !u.config.plotOptions.bar.rangeBarOverlap && (g = u.globals.seriesRange[e][m].overlaps).indexOf(p) > -1 && (a = (o = d.barHeight / g.length) * this.visibleI + h * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + o * (this.visibleI + g.indexOf(p)) + h * b)) : (b > -1 && !u.globals.timescaleLabels.length && (s = u.config.plotOptions.bar.rangeBarGroupRows ? n + c * b : n + l * this.visibleI + c * b), m > -1 && !u.config.plotOptions.bar.rangeBarOverlap && (g = u.globals.seriesRange[e][m].overlaps).indexOf(p) > -1 && (s = (l = d.barWidth / g.length) * this.visibleI + c * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l * (this.visibleI + g.indexOf(p)) + c * b)), {\n                    barYPosition: a,\n                    barXPosition: s,\n                    barHeight: o,\n                    barWidth: l\n                };\n            }\n        },\n        {\n            key: \"drawRangeColumnPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x, a = t.xDivision, s = t.barWidth, r = t.barXPosition, n = t.zeroH, o = this.w, l = e.i, h = e.j, c = e.realIndex, d = e.translationsIndex, u = this.yRatio[d], g = this.getRangeValue(c, h), p = Math.min(g.start, g.end), f = Math.max(g.start, g.end);\n                void 0 === this.series[l][h] || null === this.series[l][h] ? p = n : (p = n - p / u, f = n - f / u);\n                var x = Math.abs(f - p), b = this.barHelpers.getColumnPaths({\n                    barXPosition: r,\n                    barWidth: s,\n                    y1: p,\n                    y2: f,\n                    strokeWidth: this.strokeWidth,\n                    series: this.seriesRangeEnd,\n                    realIndex: c,\n                    i: c,\n                    j: h,\n                    w: o\n                });\n                if (o.globals.isXNumeric) {\n                    var m = this.getBarXForNumericXAxis({\n                        x: i,\n                        j: h,\n                        realIndex: c,\n                        barWidth: s\n                    });\n                    i = m.x, r = m.barXPosition;\n                } else i += a;\n                return {\n                    pathTo: b.pathTo,\n                    pathFrom: b.pathFrom,\n                    barHeight: x,\n                    x: i,\n                    y: g.start < 0 && g.end < 0 ? p : f,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, n, l, h, d),\n                    barXPosition: r\n                };\n            }\n        },\n        {\n            key: \"preventBarOverflow\",\n            value: function(t) {\n                var e = this.w;\n                return t < 0 && (t = 0), t > e.globals.gridWidth && (t = e.globals.gridWidth), t;\n            }\n        },\n        {\n            key: \"drawRangeBarPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.y, a = t.y1, s = t.y2, r = t.yDivision, n = t.barHeight, o = t.barYPosition, l = t.zeroW, h = this.w, c = e.realIndex, d = e.j, u = this.preventBarOverflow(l + a / this.invertedYRatio), g = this.preventBarOverflow(l + s / this.invertedYRatio), p = this.getRangeValue(c, d), f = Math.abs(g - u), x = this.barHelpers.getBarpaths({\n                    barYPosition: o,\n                    barHeight: n,\n                    x1: u,\n                    x2: g,\n                    strokeWidth: this.strokeWidth,\n                    series: this.seriesRangeEnd,\n                    i: c,\n                    realIndex: c,\n                    j: d,\n                    w: h\n                });\n                return h.globals.isXNumeric || (i += r), {\n                    pathTo: x.pathTo,\n                    pathFrom: x.pathFrom,\n                    barWidth: f,\n                    x: p.start < 0 && p.end < 0 ? u : g,\n                    goalX: this.barHelpers.getGoalValues(\"x\", l, null, c, d),\n                    y: i\n                };\n            }\n        },\n        {\n            key: \"getRangeValue\",\n            value: function(t, e) {\n                var i = this.w;\n                return {\n                    start: i.globals.seriesRangeStart[t][e],\n                    end: i.globals.seriesRangeEnd[t][e]\n                };\n            }\n        }\n    ]), a;\n}(), Fa = function() {\n    function t(e) {\n        i(this, t), this.w = e.w, this.lineCtx = e;\n    }\n    return s(t, [\n        {\n            key: \"sameValueSeriesFix\",\n            value: function(t, e) {\n                var i = this.w;\n                if ((\"gradient\" === i.config.fill.type || \"gradient\" === i.config.fill.type[t]) && new Pi(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {\n                    var a = e[t].slice();\n                    a[a.length - 1] = a[a.length - 1] + 1e-6, e[t] = a;\n                }\n                return e;\n            }\n        },\n        {\n            key: \"calculatePoints\",\n            value: function(t) {\n                var e = t.series, i = t.realIndex, a = t.x, s = t.y, r = t.i, n = t.j, o = t.prevY, l = this.w, h = [], c = [], d = this.lineCtx.categoryAxisCorrection + l.config.markers.offsetX;\n                return l.globals.isXNumeric && (d = (l.globals.seriesX[i][0] - l.globals.minX) / this.lineCtx.xRatio + l.config.markers.offsetX), 0 === n && (h.push(d), c.push(v.isNumber(e[r][0]) ? o + l.config.markers.offsetY : null)), h.push(a + l.config.markers.offsetX), c.push(v.isNumber(e[r][n + 1]) ? s + l.config.markers.offsetY : null), {\n                    x: h,\n                    y: c\n                };\n            }\n        },\n        {\n            key: \"checkPreviousPaths\",\n            value: function(t) {\n                for(var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, r = 0; r < s.globals.previousPaths.length; r++){\n                    var n = s.globals.previousPaths[r];\n                    (\"line\" === n.type || \"area\" === n.type) && n.paths.length > 0 && parseInt(n.realIndex, 10) === parseInt(a, 10) && (\"line\" === n.type ? (this.lineCtx.appendPathFrom = !1, e = s.globals.previousPaths[r].paths[0].d) : \"area\" === n.type && (this.lineCtx.appendPathFrom = !1, i = s.globals.previousPaths[r].paths[0].d, s.config.stroke.show && s.globals.previousPaths[r].paths[1] && (e = s.globals.previousPaths[r].paths[1].d)));\n                }\n                return {\n                    pathFromLine: e,\n                    pathFromArea: i\n                };\n            }\n        },\n        {\n            key: \"determineFirstPrevY\",\n            value: function(t) {\n                var e, i, a, s = t.i, r = t.realIndex, n = t.series, o = t.prevY, l = t.lineYPosition, h = t.translationsIndex, c = this.w, d = c.config.chart.stacked && !c.globals.comboCharts || c.config.chart.stacked && c.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[r]) || void 0 === e ? void 0 : e.type) || \"column\" === (null === (i = this.w.config.series[r]) || void 0 === i ? void 0 : i.type));\n                if (void 0 !== (null === (a = n[s]) || void 0 === a ? void 0 : a[0])) o = (l = d && s > 0 ? this.lineCtx.prevSeriesY[s - 1][0] : this.lineCtx.zeroY) - n[s][0] / this.lineCtx.yRatio[h] + 2 * (this.lineCtx.isReversed ? n[s][0] / this.lineCtx.yRatio[h] : 0);\n                else if (d && s > 0 && void 0 === n[s][0]) {\n                    for(var u = s - 1; u >= 0; u--)if (null !== n[u][0] && void 0 !== n[u][0]) {\n                        o = l = this.lineCtx.prevSeriesY[u][0];\n                        break;\n                    }\n                }\n                return {\n                    prevY: o,\n                    lineYPosition: l\n                };\n            }\n        }\n    ]), t;\n}(), Da = function(t) {\n    for(var e, i, a, s, r = function(t) {\n        for(var e = [], i = t[0], a = t[1], s = e[0] = Wa(i, a), r = 1, n = t.length - 1; r < n; r++)i = a, a = t[r + 1], e[r] = .5 * (s + (s = Wa(i, a)));\n        return e[r] = s, e;\n    }(t), n = t.length - 1, o = [], l = 0; l < n; l++)a = Wa(t[l], t[l + 1]), Math.abs(a) < 1e-6 ? r[l] = r[l + 1] = 0 : (s = (e = r[l] / a) * e + (i = r[l + 1] / a) * i) > 9 && (s = 3 * a / Math.sqrt(s), r[l] = s * e, r[l + 1] = s * i);\n    for(var h = 0; h <= n; h++)s = (t[Math.min(n, h + 1)][0] - t[Math.max(0, h - 1)][0]) / (6 * (1 + r[h] * r[h])), o.push([\n        s || 0,\n        r[h] * s || 0\n    ]);\n    return o;\n}, _a = function(t) {\n    var e = Da(t), i = t[1], a = t[0], s = [], r = e[1], n = e[0];\n    s.push(a, [\n        a[0] + n[0],\n        a[1] + n[1],\n        i[0] - r[0],\n        i[1] - r[1],\n        i[0],\n        i[1]\n    ]);\n    for(var o = 2, l = e.length; o < l; o++){\n        var h = t[o], c = e[o];\n        s.push([\n            h[0] - c[0],\n            h[1] - c[1],\n            h[0],\n            h[1]\n        ]);\n    }\n    return s;\n}, Na = function(t, e, i) {\n    var a = t.slice(e, i);\n    if (e) {\n        if (i - e > 1 && a[1].length < 6) {\n            var s = a[0].length;\n            a[1] = [\n                2 * a[0][s - 2] - a[0][s - 4],\n                2 * a[0][s - 1] - a[0][s - 3]\n            ].concat(a[1]);\n        }\n        a[0] = a[0].slice(-2);\n    }\n    return a;\n};\nfunction Wa(t, e) {\n    return (e[1] - t[1]) / (e[0] - t[0]);\n}\nvar Ba = function() {\n    function t(e, a, s) {\n        i(this, t), this.ctx = e, this.w = e.w, this.xyRatios = a, this.pointsChart = !(\"bubble\" !== this.w.config.chart.type && \"scatter\" !== this.w.config.chart.type) || s, this.scatter = new Ui(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Fa(this), this.markers = new Vi(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t, e, i, a) {\n                var s, r = this.w, n = new Mi(this.ctx), o = r.globals.comboCharts ? e : r.config.chart.type, l = n.group({\n                    class: \"apexcharts-\".concat(o, \"-series apexcharts-plot-series\")\n                }), h = new Pi(this.ctx, r);\n                this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = h.getLogSeries(t), this.yRatio = h.getLogYRatios(this.yRatio), this.prevSeriesY = [];\n                for(var c = [], d = 0; d < t.length; d++){\n                    t = this.lineHelpers.sameValueSeriesFix(d, t);\n                    var g = r.globals.comboCharts ? i[d] : d, p = this.yRatio.length > 1 ? g : 0;\n                    this._initSerieVariables(t, d, g);\n                    var f = [], x = [], b = [], m = r.globals.padHorizontal + this.categoryAxisCorrection;\n                    this.ctx.series.addCollapsedClassToSeries(this.elSeries, g), r.globals.isXNumeric && r.globals.seriesX.length > 0 && (m = (r.globals.seriesX[g][0] - r.globals.minX) / this.xRatio), b.push(m);\n                    var v, y = m, w = void 0, k = y, A = this.zeroY, C = this.zeroY;\n                    A = this.lineHelpers.determineFirstPrevY({\n                        i: d,\n                        realIndex: g,\n                        series: t,\n                        prevY: A,\n                        lineYPosition: 0,\n                        translationsIndex: p\n                    }).prevY, \"monotoneCubic\" === r.config.stroke.curve && null === t[d][0] ? f.push(null) : f.push(A), v = A;\n                    \"rangeArea\" === o && (w = C = this.lineHelpers.determineFirstPrevY({\n                        i: d,\n                        realIndex: g,\n                        series: a,\n                        prevY: C,\n                        lineYPosition: 0,\n                        translationsIndex: p\n                    }).prevY, x.push(null !== f[0] ? C : null));\n                    var S = this._calculatePathsFrom({\n                        type: o,\n                        series: t,\n                        i: d,\n                        realIndex: g,\n                        translationsIndex: p,\n                        prevX: k,\n                        prevY: A,\n                        prevY2: C\n                    }), L = [\n                        f[0]\n                    ], M = [\n                        x[0]\n                    ], P = {\n                        type: o,\n                        series: t,\n                        realIndex: g,\n                        translationsIndex: p,\n                        i: d,\n                        x: m,\n                        y: 1,\n                        pX: y,\n                        pY: v,\n                        pathsFrom: S,\n                        linePaths: [],\n                        areaPaths: [],\n                        seriesIndex: i,\n                        lineYPosition: 0,\n                        xArrj: b,\n                        yArrj: f,\n                        y2Arrj: x,\n                        seriesRangeEnd: a\n                    }, I = this._iterateOverDataPoints(u(u({}, P), {}, {\n                        iterations: \"rangeArea\" === o ? t[d].length - 1 : void 0,\n                        isRangeStart: !0\n                    }));\n                    if (\"rangeArea\" === o) {\n                        for(var T = this._calculatePathsFrom({\n                            series: a,\n                            i: d,\n                            realIndex: g,\n                            prevX: k,\n                            prevY: C\n                        }), z = this._iterateOverDataPoints(u(u({}, P), {}, {\n                            series: a,\n                            xArrj: [\n                                m\n                            ],\n                            yArrj: L,\n                            y2Arrj: M,\n                            pY: w,\n                            areaPaths: I.areaPaths,\n                            pathsFrom: T,\n                            iterations: a[d].length - 1,\n                            isRangeStart: !1\n                        })), X = I.linePaths.length / 2, R = 0; R < X; R++)I.linePaths[R] = z.linePaths[R + X] + I.linePaths[R];\n                        I.linePaths.splice(X), I.pathFromLine = z.pathFromLine + I.pathFromLine;\n                    } else I.pathFromArea += \"z\";\n                    this._handlePaths({\n                        type: o,\n                        realIndex: g,\n                        i: d,\n                        paths: I\n                    }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c.push(this.elSeries);\n                }\n                if (void 0 !== (null === (s = r.config.series[0]) || void 0 === s ? void 0 : s.zIndex) && c.sort(function(t, e) {\n                    return Number(t.node.getAttribute(\"zIndex\")) - Number(e.node.getAttribute(\"zIndex\"));\n                }), r.config.chart.stacked) for(var E = c.length - 1; E >= 0; E--)l.add(c[E]);\n                else for(var Y = 0; Y < c.length; Y++)l.add(c[Y]);\n                return l;\n            }\n        },\n        {\n            key: \"_initSerieVariables\",\n            value: function(t, e, i) {\n                var a = this.w, s = new Mi(this.ctx);\n                this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - (\"on\" === a.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width;\n                var r = 0;\n                if (this.yRatio.length > 1 && (this.yaxisIndex = a.globals.seriesYAxisReverseMap[i], r = i), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a.globals.gridHeight - this.baseLineY[r] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a.globals.gridHeight || \"end\" === a.config.plotOptions.area.fillTo) && (this.areaBottomY = a.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s.group({\n                    class: \"apexcharts-series\",\n                    zIndex: void 0 !== a.config.series[i].zIndex ? a.config.series[i].zIndex : i,\n                    seriesName: v.escapeString(a.globals.seriesNames[i])\n                }), this.elPointsMain = s.group({\n                    class: \"apexcharts-series-markers-wrap\",\n                    \"data:realIndex\": i\n                }), a.globals.hasNullValues) {\n                    var n = this.markers.plotChartMarkers({\n                        pointsPos: {\n                            x: [\n                                0\n                            ],\n                            y: [\n                                a.globals.gridHeight + a.globals.markers.largestSize\n                            ]\n                        },\n                        seriesIndex: e,\n                        j: 0,\n                        pSize: .1,\n                        alwaysDrawMarker: !0,\n                        isVirtualPoint: !0\n                    });\n                    null !== n && this.elPointsMain.add(n);\n                }\n                this.elDataLabelsWrap = s.group({\n                    class: \"apexcharts-datalabels\",\n                    \"data:realIndex\": i\n                });\n                var o = t[e].length === a.globals.dataPoints;\n                this.elSeries.attr({\n                    \"data:longestSeries\": o,\n                    rel: e + 1,\n                    \"data:realIndex\": i\n                }), this.appendPathFrom = !0;\n            }\n        },\n        {\n            key: \"_calculatePathsFrom\",\n            value: function(t) {\n                var e, i, a, s, r = t.type, n = t.series, o = t.i, l = t.realIndex, h = t.translationsIndex, c = t.prevX, d = t.prevY, u = t.prevY2, g = this.w, p = new Mi(this.ctx);\n                if (null === n[o][0]) {\n                    for(var f = 0; f < n[o].length; f++)if (null !== n[o][f]) {\n                        c = this.xDivision * f, d = this.zeroY - n[o][f] / this.yRatio[h], e = p.move(c, d), i = p.move(c, this.areaBottomY);\n                        break;\n                    }\n                } else e = p.move(c, d), \"rangeArea\" === r && (e = p.move(c, u) + p.line(c, d)), i = p.move(c, this.areaBottomY) + p.line(c, d);\n                if (a = p.move(0, this.areaBottomY) + p.line(0, this.areaBottomY), s = p.move(0, this.areaBottomY) + p.line(0, this.areaBottomY), g.globals.previousPaths.length > 0) {\n                    var x = this.lineHelpers.checkPreviousPaths({\n                        pathFromLine: a,\n                        pathFromArea: s,\n                        realIndex: l\n                    });\n                    a = x.pathFromLine, s = x.pathFromArea;\n                }\n                return {\n                    prevX: c,\n                    prevY: d,\n                    linePath: e,\n                    areaPath: i,\n                    pathFromLine: a,\n                    pathFromArea: s\n                };\n            }\n        },\n        {\n            key: \"_handlePaths\",\n            value: function(t) {\n                var e = t.type, i = t.realIndex, a = t.i, s = t.paths, r = this.w, n = new Mi(this.ctx), o = new ji(this.ctx);\n                this.prevSeriesY.push(s.yArrj), r.globals.seriesXvalues[i] = s.xArrj, r.globals.seriesYvalues[i] = s.yArrj;\n                var l = r.config.forecastDataPoints;\n                if (l.count > 0 && \"rangeArea\" !== e) {\n                    var h = r.globals.seriesXvalues[i][r.globals.seriesXvalues[i].length - l.count - 1], c = n.drawRect(h, 0, r.globals.gridWidth, r.globals.gridHeight, 0);\n                    r.globals.dom.elForecastMask.appendChild(c.node);\n                    var d = n.drawRect(0, 0, h, r.globals.gridHeight, 0);\n                    r.globals.dom.elNonForecastMask.appendChild(d.node);\n                }\n                this.pointsChart || r.globals.delayedElements.push({\n                    el: this.elPointsMain.node,\n                    index: i\n                });\n                var g = {\n                    i: a,\n                    realIndex: i,\n                    animationDelay: a,\n                    initialSpeed: r.config.chart.animations.speed,\n                    dataChangeSpeed: r.config.chart.animations.dynamicAnimation.speed,\n                    className: \"apexcharts-\".concat(e)\n                };\n                if (\"area\" === e) for(var p = o.fillPath({\n                    seriesNumber: i\n                }), f = 0; f < s.areaPaths.length; f++){\n                    var x = n.renderPaths(u(u({}, g), {}, {\n                        pathFrom: s.pathFromArea,\n                        pathTo: s.areaPaths[f],\n                        stroke: \"none\",\n                        strokeWidth: 0,\n                        strokeLineCap: null,\n                        fill: p\n                    }));\n                    this.elSeries.add(x);\n                }\n                if (r.config.stroke.show && !this.pointsChart) {\n                    var b = null;\n                    if (\"line\" === e) b = o.fillPath({\n                        seriesNumber: i,\n                        i: a\n                    });\n                    else if (\"solid\" === r.config.stroke.fill.type) b = r.globals.stroke.colors[i];\n                    else {\n                        var m = r.config.fill;\n                        r.config.fill = r.config.stroke.fill, b = o.fillPath({\n                            seriesNumber: i,\n                            i: a\n                        }), r.config.fill = m;\n                    }\n                    for(var v = 0; v < s.linePaths.length; v++){\n                        var y = b;\n                        \"rangeArea\" === e && (y = o.fillPath({\n                            seriesNumber: i\n                        }));\n                        var w = u(u({}, g), {}, {\n                            pathFrom: s.pathFromLine,\n                            pathTo: s.linePaths[v],\n                            stroke: b,\n                            strokeWidth: this.strokeWidth,\n                            strokeLineCap: r.config.stroke.lineCap,\n                            fill: \"rangeArea\" === e ? y : \"none\"\n                        }), k = n.renderPaths(w);\n                        if (this.elSeries.add(k), k.attr(\"fill-rule\", \"evenodd\"), l.count > 0 && \"rangeArea\" !== e) {\n                            var A = n.renderPaths(w);\n                            A.node.setAttribute(\"stroke-dasharray\", l.dashArray), l.strokeWidth && A.node.setAttribute(\"stroke-width\", l.strokeWidth), this.elSeries.add(A), A.attr(\"clip-path\", \"url(#forecastMask\".concat(r.globals.cuid, \")\")), k.attr(\"clip-path\", \"url(#nonForecastMask\".concat(r.globals.cuid, \")\"));\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"_iterateOverDataPoints\",\n            value: function(t) {\n                var e, i, a = this, s = t.type, r = t.series, n = t.iterations, o = t.realIndex, l = t.translationsIndex, h = t.i, c = t.x, d = t.y, u = t.pX, g = t.pY, p = t.pathsFrom, f = t.linePaths, x = t.areaPaths, b = t.seriesIndex, m = t.lineYPosition, y = t.xArrj, w = t.yArrj, k = t.y2Arrj, A = t.isRangeStart, C = t.seriesRangeEnd, S = this.w, L = new Mi(this.ctx), M = this.yRatio, P = p.prevY, I = p.linePath, T = p.areaPath, z = p.pathFromLine, X = p.pathFromArea, R = v.isNumber(S.globals.minYArr[o]) ? S.globals.minYArr[o] : S.globals.minY;\n                n || (n = S.globals.dataPoints > 1 ? S.globals.dataPoints - 1 : S.globals.dataPoints);\n                var E = function(t, e) {\n                    return e - t / M[l] + 2 * (a.isReversed ? t / M[l] : 0);\n                }, Y = d, H = S.config.chart.stacked && !S.globals.comboCharts || S.config.chart.stacked && S.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[o]) || void 0 === e ? void 0 : e.type) || \"column\" === (null === (i = this.w.config.series[o]) || void 0 === i ? void 0 : i.type)), O = S.config.stroke.curve;\n                Array.isArray(O) && (O = Array.isArray(b) ? O[b[h]] : O[h]);\n                for(var F, D = 0, _ = 0; _ < n && 0 !== r[h].length; _++){\n                    var N = void 0 === r[h][_ + 1] || null === r[h][_ + 1];\n                    if (S.globals.isXNumeric) {\n                        var W = S.globals.seriesX[o][_ + 1];\n                        void 0 === S.globals.seriesX[o][_ + 1] && (W = S.globals.seriesX[o][n - 1]), c = (W - S.globals.minX) / this.xRatio;\n                    } else c += this.xDivision;\n                    if (H) if (h > 0 && S.globals.collapsedSeries.length < S.config.series.length - 1) {\n                        m = this.prevSeriesY[function(t) {\n                            for(var e = t; e > 0; e--){\n                                if (!(S.globals.collapsedSeriesIndices.indexOf((null == b ? void 0 : b[e]) || e) > -1)) return e;\n                                e--;\n                            }\n                            return 0;\n                        }(h - 1)][_ + 1];\n                    } else m = this.zeroY;\n                    else m = this.zeroY;\n                    N ? d = E(R, m) : (d = E(r[h][_ + 1], m), \"rangeArea\" === s && (Y = E(C[h][_ + 1], m))), y.push(null === r[h][_ + 1] ? null : c), !N || \"smooth\" !== S.config.stroke.curve && \"monotoneCubic\" !== S.config.stroke.curve ? (w.push(d), k.push(Y)) : (w.push(null), k.push(null));\n                    var B = this.lineHelpers.calculatePoints({\n                        series: r,\n                        x: c,\n                        y: d,\n                        realIndex: o,\n                        i: h,\n                        j: _,\n                        prevY: P\n                    }), G = this._createPaths({\n                        type: s,\n                        series: r,\n                        i: h,\n                        realIndex: o,\n                        j: _,\n                        x: c,\n                        y: d,\n                        y2: Y,\n                        xArrj: y,\n                        yArrj: w,\n                        y2Arrj: k,\n                        pX: u,\n                        pY: g,\n                        pathState: D,\n                        segmentStartX: F,\n                        linePath: I,\n                        areaPath: T,\n                        linePaths: f,\n                        areaPaths: x,\n                        curve: O,\n                        isRangeStart: A\n                    });\n                    x = G.areaPaths, f = G.linePaths, u = G.pX, g = G.pY, D = G.pathState, F = G.segmentStartX, T = G.areaPath, I = G.linePath, !this.appendPathFrom || S.globals.hasNullValues || \"monotoneCubic\" === O && \"rangeArea\" === s || (z += L.line(c, this.areaBottomY), X += L.line(c, this.areaBottomY)), this.handleNullDataPoints(r, B, h, _, o), this._handleMarkersAndLabels({\n                        type: s,\n                        pointsPos: B,\n                        i: h,\n                        j: _,\n                        realIndex: o,\n                        isRangeStart: A\n                    });\n                }\n                return {\n                    yArrj: w,\n                    xArrj: y,\n                    pathFromArea: X,\n                    areaPaths: x,\n                    pathFromLine: z,\n                    linePaths: f,\n                    linePath: I,\n                    areaPath: T\n                };\n            }\n        },\n        {\n            key: \"_handleMarkersAndLabels\",\n            value: function(t) {\n                var e = t.type, i = t.pointsPos, a = t.isRangeStart, s = t.i, r = t.j, n = t.realIndex, o = this.w, l = new qi(this.ctx);\n                if (this.pointsChart) this.scatter.draw(this.elSeries, r, {\n                    realIndex: n,\n                    pointsPos: i,\n                    zRatio: this.zRatio,\n                    elParent: this.elPointsMain\n                });\n                else {\n                    o.globals.series[s].length > 1 && this.elPointsMain.node.classList.add(\"apexcharts-element-hidden\");\n                    var h = this.markers.plotChartMarkers({\n                        pointsPos: i,\n                        seriesIndex: n,\n                        j: r + 1\n                    });\n                    null !== h && this.elPointsMain.add(h);\n                }\n                var c = l.drawDataLabel({\n                    type: e,\n                    isRangeStart: a,\n                    pos: i,\n                    i: n,\n                    j: r + 1\n                });\n                null !== c && this.elDataLabelsWrap.add(c);\n            }\n        },\n        {\n            key: \"_createPaths\",\n            value: function(t) {\n                var e = t.type, i = t.series, a = t.i;\n                t.realIndex;\n                var s, r = t.j, n = t.x, o = t.y, l = t.xArrj, h = t.yArrj, c = t.y2, d = t.y2Arrj, u = t.pX, g = t.pY, p = t.pathState, f = t.segmentStartX, x = t.linePath, b = t.areaPath, m = t.linePaths, v = t.areaPaths, y = t.curve, w = t.isRangeStart, k = new Mi(this.ctx), A = this.areaBottomY, C = \"rangeArea\" === e, S = \"rangeArea\" === e && w;\n                switch(y){\n                    case \"monotoneCubic\":\n                        var L = w ? h : d;\n                        switch(p){\n                            case 0:\n                                if (null === L[r + 1]) break;\n                                p = 1;\n                            case 1:\n                                if (!(C ? l.length === i[a].length : r === i[a].length - 2)) break;\n                            case 2:\n                                var M = w ? l : l.slice().reverse(), P = w ? L : L.slice().reverse(), I = (s = P, M.map(function(t, e) {\n                                    return [\n                                        t,\n                                        s[e]\n                                    ];\n                                }).filter(function(t) {\n                                    return null !== t[1];\n                                })), T = I.length > 1 ? _a(I) : I, z = [];\n                                C && (S ? v = I : z = v.reverse());\n                                var X = 0, R = 0;\n                                if ((function(t, e) {\n                                    for(var i = function(t) {\n                                        var e = [], i = 0;\n                                        return t.forEach(function(t) {\n                                            null !== t ? i++ : i > 0 && (e.push(i), i = 0);\n                                        }), i > 0 && e.push(i), e;\n                                    }(t), a = [], s = 0, r = 0; s < i.length; r += i[s++])a[s] = Na(e, r, r + i[s]);\n                                    return a;\n                                })(P, T).forEach(function(t) {\n                                    X++;\n                                    var e = function(t) {\n                                        for(var e = \"\", i = 0; i < t.length; i++){\n                                            var a = t[i], s = a.length;\n                                            s > 4 ? (e += \"C\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]), e += \", \".concat(a[4], \", \").concat(a[5])) : s > 2 && (e += \"S\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]));\n                                        }\n                                        return e;\n                                    }(t), i = R, a = (R += t.length) - 1;\n                                    S ? x = k.move(I[i][0], I[i][1]) + e : C ? x = k.move(z[i][0], z[i][1]) + k.line(I[i][0], I[i][1]) + e + k.line(z[a][0], z[a][1]) : (x = k.move(I[i][0], I[i][1]) + e, b = x + k.line(I[a][0], A) + k.line(I[i][0], A) + \"z\", v.push(b)), m.push(x);\n                                }), C && X > 1 && !S) {\n                                    var E = m.slice(X).reverse();\n                                    m.splice(X), E.forEach(function(t) {\n                                        return m.push(t);\n                                    });\n                                }\n                                p = 0;\n                        }\n                        break;\n                    case \"smooth\":\n                        var Y = .35 * (n - u);\n                        if (null === i[a][r]) p = 0;\n                        else switch(p){\n                            case 0:\n                                if (f = u, x = S ? k.move(u, d[r]) + k.line(u, g) : k.move(u, g), b = k.move(u, g), null === i[a][r + 1] || void 0 === i[a][r + 1]) {\n                                    m.push(x), v.push(b);\n                                    break;\n                                }\n                                if (p = 1, r < i[a].length - 2) {\n                                    var H = k.curve(u + Y, g, n - Y, o, n, o);\n                                    x += H, b += H;\n                                    break;\n                                }\n                            case 1:\n                                if (null === i[a][r + 1]) x += S ? k.line(u, c) : k.move(u, g), b += k.line(u, A) + k.line(f, A) + \"z\", m.push(x), v.push(b), p = -1;\n                                else {\n                                    var O = k.curve(u + Y, g, n - Y, o, n, o);\n                                    x += O, b += O, r >= i[a].length - 2 && (S && (x += k.curve(n, o, n, o, n, c) + k.move(n, c)), b += k.curve(n, o, n, o, n, A) + k.line(f, A) + \"z\", m.push(x), v.push(b), p = -1);\n                                }\n                        }\n                        u = n, g = o;\n                        break;\n                    default:\n                        var F = function(t, e, i) {\n                            var a = [];\n                            switch(t){\n                                case \"stepline\":\n                                    a = k.line(e, null, \"H\") + k.line(null, i, \"V\");\n                                    break;\n                                case \"linestep\":\n                                    a = k.line(null, i, \"V\") + k.line(e, null, \"H\");\n                                    break;\n                                case \"straight\":\n                                    a = k.line(e, i);\n                            }\n                            return a;\n                        };\n                        if (null === i[a][r]) p = 0;\n                        else switch(p){\n                            case 0:\n                                if (f = u, x = S ? k.move(u, d[r]) + k.line(u, g) : k.move(u, g), b = k.move(u, g), null === i[a][r + 1] || void 0 === i[a][r + 1]) {\n                                    m.push(x), v.push(b);\n                                    break;\n                                }\n                                if (p = 1, r < i[a].length - 2) {\n                                    var D = F(y, n, o);\n                                    x += D, b += D;\n                                    break;\n                                }\n                            case 1:\n                                if (null === i[a][r + 1]) x += S ? k.line(u, c) : k.move(u, g), b += k.line(u, A) + k.line(f, A) + \"z\", m.push(x), v.push(b), p = -1;\n                                else {\n                                    var _ = F(y, n, o);\n                                    x += _, b += _, r >= i[a].length - 2 && (S && (x += k.line(n, c)), b += k.line(n, A) + k.line(f, A) + \"z\", m.push(x), v.push(b), p = -1);\n                                }\n                        }\n                        u = n, g = o;\n                }\n                return {\n                    linePaths: m,\n                    areaPaths: v,\n                    pX: u,\n                    pY: g,\n                    pathState: p,\n                    segmentStartX: f,\n                    linePath: x,\n                    areaPath: b\n                };\n            }\n        },\n        {\n            key: \"handleNullDataPoints\",\n            value: function(t, e, i, a, s) {\n                var r = this.w;\n                if (null === t[i][a] && r.config.markers.showNullDataPoints || 1 === t[i].length) {\n                    var n = this.strokeWidth - r.config.markers.strokeWidth / 2;\n                    n > 0 || (n = 0);\n                    var o = this.markers.plotChartMarkers({\n                        pointsPos: e,\n                        seriesIndex: s,\n                        j: a + 1,\n                        pSize: n,\n                        alwaysDrawMarker: !0\n                    });\n                    null !== o && this.elPointsMain.add(o);\n                }\n            }\n        }\n    ]), t;\n}();\nwindow.TreemapSquared = {}, window.TreemapSquared.generate = function() {\n    function t(e, i, a, s) {\n        this.xoffset = e, this.yoffset = i, this.height = s, this.width = a, this.shortestEdge = function() {\n            return Math.min(this.height, this.width);\n        }, this.getCoordinates = function(t) {\n            var e, i = [], a = this.xoffset, s = this.yoffset, n = r(t) / this.height, o = r(t) / this.width;\n            if (this.width >= this.height) for(e = 0; e < t.length; e++)i.push([\n                a,\n                s,\n                a + n,\n                s + t[e] / n\n            ]), s += t[e] / n;\n            else for(e = 0; e < t.length; e++)i.push([\n                a,\n                s,\n                a + t[e] / o,\n                s + o\n            ]), a += t[e] / o;\n            return i;\n        }, this.cutArea = function(e) {\n            var i;\n            if (this.width >= this.height) {\n                var a = e / this.height, s = this.width - a;\n                i = new t(this.xoffset + a, this.yoffset, s, this.height);\n            } else {\n                var r = e / this.width, n = this.height - r;\n                i = new t(this.xoffset, this.yoffset + r, this.width, n);\n            }\n            return i;\n        };\n    }\n    function e(e, a, s, n, o) {\n        n = void 0 === n ? 0 : n, o = void 0 === o ? 0 : o;\n        var l = i(function(t, e) {\n            var i, a = [], s = e / r(t);\n            for(i = 0; i < t.length; i++)a[i] = t[i] * s;\n            return a;\n        }(e, a * s), [], new t(n, o, a, s), []);\n        return function(t) {\n            var e, i, a = [];\n            for(e = 0; e < t.length; e++)for(i = 0; i < t[e].length; i++)a.push(t[e][i]);\n            return a;\n        }(l);\n    }\n    function i(t, e, s, n) {\n        var o, l, h;\n        if (0 !== t.length) return o = s.shortestEdge(), function(t, e, i) {\n            var s;\n            if (0 === t.length) return !0;\n            (s = t.slice()).push(e);\n            var r = a(t, i), n = a(s, i);\n            return r >= n;\n        }(e, l = t[0], o) ? (e.push(l), i(t.slice(1), e, s, n)) : (h = s.cutArea(r(e), n), n.push(s.getCoordinates(e)), i(t, [], h, n)), n;\n        n.push(s.getCoordinates(e));\n    }\n    function a(t, e) {\n        var i = Math.min.apply(Math, t), a = Math.max.apply(Math, t), s = r(t);\n        return Math.max(Math.pow(e, 2) * a / Math.pow(s, 2), Math.pow(s, 2) / (Math.pow(e, 2) * i));\n    }\n    function s(t) {\n        return t && t.constructor === Array;\n    }\n    function r(t) {\n        var e, i = 0;\n        for(e = 0; e < t.length; e++)i += t[e];\n        return i;\n    }\n    function n(t) {\n        var e, i = 0;\n        if (s(t[0])) for(e = 0; e < t.length; e++)i += n(t[e]);\n        else i = r(t);\n        return i;\n    }\n    return function t(i, a, r, o, l) {\n        o = void 0 === o ? 0 : o, l = void 0 === l ? 0 : l;\n        var h, c, d = [], u = [];\n        if (s(i[0])) {\n            for(c = 0; c < i.length; c++)d[c] = n(i[c]);\n            for(h = e(d, a, r, o, l), c = 0; c < i.length; c++)u.push(t(i[c], h[c][2] - h[c][0], h[c][3] - h[c][1], h[c][0], h[c][1]));\n        } else u = e(i, a, r, o, l);\n        return u;\n    };\n}();\nvar Ga = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = e, this.w = e.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new za(e), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];\n    }\n    return s(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this, i = this.w, a = new Mi(this.ctx), s = new ji(this.ctx), r = a.group({\n                    class: \"apexcharts-treemap\"\n                });\n                if (i.globals.noData) return r;\n                var n = [];\n                return t.forEach(function(t) {\n                    var e = t.map(function(t) {\n                        return Math.abs(t);\n                    });\n                    n.push(e);\n                }), this.negRange = this.helpers.checkColorRange(), i.config.series.forEach(function(t, i) {\n                    t.data.forEach(function(t) {\n                        Array.isArray(e.labels[i]) || (e.labels[i] = []), e.labels[i].push(t.x);\n                    });\n                }), window.TreemapSquared.generate(n, i.globals.gridWidth, i.globals.gridHeight).forEach(function(n, o) {\n                    var l = a.group({\n                        class: \"apexcharts-series apexcharts-treemap-series\",\n                        seriesName: v.escapeString(i.globals.seriesNames[o]),\n                        rel: o + 1,\n                        \"data:realIndex\": o\n                    });\n                    if (i.config.chart.dropShadow.enabled) {\n                        var h = i.config.chart.dropShadow;\n                        new Li(e.ctx).dropShadow(r, h, o);\n                    }\n                    var c = a.group({\n                        class: \"apexcharts-data-labels\"\n                    }), d = {\n                        xMin: 1 / 0,\n                        yMin: 1 / 0,\n                        xMax: -1 / 0,\n                        yMax: -1 / 0\n                    };\n                    n.forEach(function(r, n) {\n                        var h = r[0], c = r[1], u = r[2], g = r[3];\n                        d.xMin = Math.min(d.xMin, h), d.yMin = Math.min(d.yMin, c), d.xMax = Math.max(d.xMax, u), d.yMax = Math.max(d.yMax, g);\n                        var p = e.helpers.getShadeColor(i.config.chart.type, o, n, e.negRange), f = p.color, x = s.fillPath({\n                            color: f,\n                            seriesNumber: o,\n                            dataPointIndex: n\n                        }), b = a.drawRect(h, c, u - h, g - c, i.config.plotOptions.treemap.borderRadius, \"#fff\", 1, e.strokeWidth, i.config.plotOptions.treemap.useFillColorAsStroke ? f : i.globals.stroke.colors[o]);\n                        b.attr({\n                            cx: h,\n                            cy: c,\n                            index: o,\n                            i: o,\n                            j: n,\n                            width: u - h,\n                            height: g - c,\n                            fill: x\n                        }), b.node.classList.add(\"apexcharts-treemap-rect\"), e.helpers.addListeners(b);\n                        var m = {\n                            x: h + (u - h) / 2,\n                            y: c + (g - c) / 2,\n                            width: 0,\n                            height: 0\n                        }, v = {\n                            x: h,\n                            y: c,\n                            width: u - h,\n                            height: g - c\n                        };\n                        if (i.config.chart.animations.enabled && !i.globals.dataChanged) {\n                            var y = 1;\n                            i.globals.resized || (y = i.config.chart.animations.speed), e.animateTreemap(b, m, v, y);\n                        }\n                        if (i.globals.dataChanged) {\n                            var w = 1;\n                            e.dynamicAnim.enabled && i.globals.shouldAnimate && (w = e.dynamicAnim.speed, i.globals.previousPaths[o] && i.globals.previousPaths[o][n] && i.globals.previousPaths[o][n].rect && (m = i.globals.previousPaths[o][n].rect), e.animateTreemap(b, m, v, w));\n                        }\n                        var k = e.getFontSize(r), A = i.config.dataLabels.formatter(e.labels[o][n], {\n                            value: i.globals.series[o][n],\n                            seriesIndex: o,\n                            dataPointIndex: n,\n                            w: i\n                        });\n                        \"truncate\" === i.config.plotOptions.treemap.dataLabels.format && (k = parseInt(i.config.dataLabels.style.fontSize, 10), A = e.truncateLabels(A, k, h, c, u, g));\n                        var C = null;\n                        i.globals.series[o][n] && (C = e.helpers.calculateDataLabels({\n                            text: A,\n                            x: (h + u) / 2,\n                            y: (c + g) / 2 + e.strokeWidth / 2 + k / 3,\n                            i: o,\n                            j: n,\n                            colorProps: p,\n                            fontSize: k,\n                            series: t\n                        })), i.config.dataLabels.enabled && C && e.rotateToFitLabel(C, k, A, h, c, u, g), l.add(b), null !== C && l.add(C);\n                    });\n                    var u = i.config.plotOptions.treemap.seriesTitle;\n                    if (i.config.series.length > 1 && u && u.show) {\n                        var g = i.config.series[o].name || \"\";\n                        if (g && d.xMin < 1 / 0 && d.yMin < 1 / 0) {\n                            var p = u.offsetX, f = u.offsetY, x = u.borderColor, b = u.borderWidth, m = u.borderRadius, y = u.style, w = y.color || i.config.chart.foreColor, k = {\n                                left: y.padding.left,\n                                right: y.padding.right,\n                                top: y.padding.top,\n                                bottom: y.padding.bottom\n                            }, A = a.getTextRects(g, y.fontSize, y.fontFamily), C = A.width + k.left + k.right, S = A.height + k.top + k.bottom, L = d.xMin + (p || 0), M = d.yMin + (f || 0), P = a.drawRect(L, M, C, S, m, y.background, 1, b, x), I = a.drawText({\n                                x: L + k.left,\n                                y: M + k.top + .75 * A.height,\n                                text: g,\n                                fontSize: y.fontSize,\n                                fontFamily: y.fontFamily,\n                                fontWeight: y.fontWeight,\n                                foreColor: w,\n                                cssClass: y.cssClass || \"\"\n                            });\n                            l.add(P), l.add(I);\n                        }\n                    }\n                    l.add(c), r.add(l);\n                }), r;\n            }\n        },\n        {\n            key: \"getFontSize\",\n            value: function(t) {\n                var e = this.w;\n                var i = function t(e) {\n                    var i, a = 0;\n                    if (Array.isArray(e[0])) for(i = 0; i < e.length; i++)a += t(e[i]);\n                    else for(i = 0; i < e.length; i++)a += e[i].length;\n                    return a;\n                }(this.labels) / function t(e) {\n                    var i, a = 0;\n                    if (Array.isArray(e[0])) for(i = 0; i < e.length; i++)a += t(e[i]);\n                    else for(i = 0; i < e.length; i++)a += 1;\n                    return a;\n                }(this.labels);\n                return function(t, a) {\n                    var s = t * a, r = Math.pow(s, .5);\n                    return Math.min(r / i, parseInt(e.config.dataLabels.style.fontSize, 10));\n                }(t[2] - t[0], t[3] - t[1]);\n            }\n        },\n        {\n            key: \"rotateToFitLabel\",\n            value: function(t, e, i, a, s, r, n) {\n                var o = new Mi(this.ctx), l = o.getTextRects(i, e);\n                if (l.width + this.w.config.stroke.width + 5 > r - a && l.width <= n - s) {\n                    var h = o.rotateAroundCenter(t.node);\n                    t.node.setAttribute(\"transform\", \"rotate(-90 \".concat(h.x, \" \").concat(h.y, \") translate(\").concat(l.height / 3, \")\"));\n                }\n            }\n        },\n        {\n            key: \"truncateLabels\",\n            value: function(t, e, i, a, s, r) {\n                var n = new Mi(this.ctx), o = n.getTextRects(t, e).width + this.w.config.stroke.width + 5 > s - i && r - a > s - i ? r - a : s - i, l = n.getTextBasedOnMaxWidth({\n                    text: t,\n                    maxWidth: o,\n                    fontSize: e\n                });\n                return t.length !== l.length && o / e < 5 ? \"\" : l;\n            }\n        },\n        {\n            key: \"animateTreemap\",\n            value: function(t, e, i, a) {\n                var s = new y(this.ctx);\n                s.animateRect(t, e, i, a, function() {\n                    s.animationCompleted(t);\n                });\n            }\n        }\n    ]), t;\n}(), ja = 86400, Va = 10 / ja, Ua = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;\n    }\n    return s(t, [\n        {\n            key: \"calculateTimeScaleTicks\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                if (a.globals.allSeriesCollapsed) return a.globals.labels = [], a.globals.timescaleLabels = [], [];\n                var s = new zi(this.ctx), r = (e - t) / 864e5;\n                this.determineInterval(r), a.globals.disableZoomIn = !1, a.globals.disableZoomOut = !1, r < Va ? a.globals.disableZoomIn = !0 : r > 5e4 && (a.globals.disableZoomOut = !0);\n                var n = s.getTimeUnitsfromTimestamp(t, e, this.utc), o = a.globals.gridWidth / r, l = o / 24, h = l / 60, c = h / 60, d = Math.floor(24 * r), g = Math.floor(1440 * r), p = Math.floor(r * ja), f = Math.floor(r), x = Math.floor(r / 30), b = Math.floor(r / 365), m = {\n                    minMillisecond: n.minMillisecond,\n                    minSecond: n.minSecond,\n                    minMinute: n.minMinute,\n                    minHour: n.minHour,\n                    minDate: n.minDate,\n                    minMonth: n.minMonth,\n                    minYear: n.minYear\n                }, v = {\n                    firstVal: m,\n                    currentMillisecond: m.minMillisecond,\n                    currentSecond: m.minSecond,\n                    currentMinute: m.minMinute,\n                    currentHour: m.minHour,\n                    currentMonthDate: m.minDate,\n                    currentDate: m.minDate,\n                    currentMonth: m.minMonth,\n                    currentYear: m.minYear,\n                    daysWidthOnXAxis: o,\n                    hoursWidthOnXAxis: l,\n                    minutesWidthOnXAxis: h,\n                    secondsWidthOnXAxis: c,\n                    numberOfSeconds: p,\n                    numberOfMinutes: g,\n                    numberOfHours: d,\n                    numberOfDays: f,\n                    numberOfMonths: x,\n                    numberOfYears: b\n                };\n                switch(this.tickInterval){\n                    case \"years\":\n                        this.generateYearScale(v);\n                        break;\n                    case \"months\":\n                    case \"half_year\":\n                        this.generateMonthScale(v);\n                        break;\n                    case \"months_days\":\n                    case \"months_fortnight\":\n                    case \"days\":\n                    case \"week_days\":\n                        this.generateDayScale(v);\n                        break;\n                    case \"hours\":\n                        this.generateHourScale(v);\n                        break;\n                    case \"minutes_fives\":\n                    case \"minutes\":\n                        this.generateMinuteScale(v);\n                        break;\n                    case \"seconds_tens\":\n                    case \"seconds_fives\":\n                    case \"seconds\":\n                        this.generateSecondScale(v);\n                }\n                var y = this.timeScaleArray.map(function(t) {\n                    var e = {\n                        position: t.position,\n                        unit: t.unit,\n                        year: t.year,\n                        day: t.day ? t.day : 1,\n                        hour: t.hour ? t.hour : 0,\n                        month: t.month + 1\n                    };\n                    return \"month\" === t.unit ? u(u({}, e), {}, {\n                        day: 1,\n                        value: t.value + 1\n                    }) : \"day\" === t.unit || \"hour\" === t.unit ? u(u({}, e), {}, {\n                        value: t.value\n                    }) : \"minute\" === t.unit ? u(u({}, e), {}, {\n                        value: t.value,\n                        minute: t.value\n                    }) : \"second\" === t.unit ? u(u({}, e), {}, {\n                        value: t.value,\n                        minute: t.minute,\n                        second: t.second\n                    }) : t;\n                });\n                return y.filter(function(t) {\n                    var e = 1, s = Math.ceil(a.globals.gridWidth / 120), r = t.value;\n                    void 0 !== a.config.xaxis.tickAmount && (s = a.config.xaxis.tickAmount), y.length > s && (e = Math.floor(y.length / s));\n                    var n = !1, o = !1;\n                    switch(i.tickInterval){\n                        case \"years\":\n                            \"year\" === t.unit && (n = !0);\n                            break;\n                        case \"half_year\":\n                            e = 7, \"year\" === t.unit && (n = !0);\n                            break;\n                        case \"months\":\n                            e = 1, \"year\" === t.unit && (n = !0);\n                            break;\n                        case \"months_fortnight\":\n                            e = 15, \"year\" !== t.unit && \"month\" !== t.unit || (n = !0), 30 === r && (o = !0);\n                            break;\n                        case \"months_days\":\n                            e = 10, \"month\" === t.unit && (n = !0), 30 === r && (o = !0);\n                            break;\n                        case \"week_days\":\n                            e = 8, \"month\" === t.unit && (n = !0);\n                            break;\n                        case \"days\":\n                            e = 1, \"month\" === t.unit && (n = !0);\n                            break;\n                        case \"hours\":\n                            \"day\" === t.unit && (n = !0);\n                            break;\n                        case \"minutes_fives\":\n                        case \"seconds_fives\":\n                            r % 5 != 0 && (o = !0);\n                            break;\n                        case \"seconds_tens\":\n                            r % 10 != 0 && (o = !0);\n                    }\n                    if (\"hours\" === i.tickInterval || \"minutes_fives\" === i.tickInterval || \"seconds_tens\" === i.tickInterval || \"seconds_fives\" === i.tickInterval) {\n                        if (!o) return !0;\n                    } else if ((r % e == 0 || n) && !o) return !0;\n                });\n            }\n        },\n        {\n            key: \"recalcDimensionsBasedOnFormat\",\n            value: function(t, e) {\n                var i = this.w, a = this.formatDates(t), s = this.removeOverlappingTS(a);\n                i.globals.timescaleLabels = s.slice(), new pa(this.ctx).plotCoords();\n            }\n        },\n        {\n            key: \"determineInterval\",\n            value: function(t) {\n                var e = 24 * t, i = 60 * e;\n                switch(!0){\n                    case t / 365 > 5:\n                        this.tickInterval = \"years\";\n                        break;\n                    case t > 800:\n                        this.tickInterval = \"half_year\";\n                        break;\n                    case t > 180:\n                        this.tickInterval = \"months\";\n                        break;\n                    case t > 90:\n                        this.tickInterval = \"months_fortnight\";\n                        break;\n                    case t > 60:\n                        this.tickInterval = \"months_days\";\n                        break;\n                    case t > 30:\n                        this.tickInterval = \"week_days\";\n                        break;\n                    case t > 2:\n                        this.tickInterval = \"days\";\n                        break;\n                    case e > 2.4:\n                        this.tickInterval = \"hours\";\n                        break;\n                    case i > 15:\n                        this.tickInterval = \"minutes_fives\";\n                        break;\n                    case i > 5:\n                        this.tickInterval = \"minutes\";\n                        break;\n                    case i > 1:\n                        this.tickInterval = \"seconds_tens\";\n                        break;\n                    case 60 * i > 20:\n                        this.tickInterval = \"seconds_fives\";\n                        break;\n                    default:\n                        this.tickInterval = \"seconds\";\n                }\n            }\n        },\n        {\n            key: \"generateYearScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonth, a = t.currentYear, s = t.daysWidthOnXAxis, r = t.numberOfYears, n = e.minYear, o = 0, l = new zi(this.ctx), h = \"year\";\n                if (e.minDate > 1 || e.minMonth > 0) {\n                    var c = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);\n                    o = (l.determineDaysOfYear(e.minYear) - c + 1) * s, n = e.minYear + 1, this.timeScaleArray.push({\n                        position: o,\n                        value: n,\n                        unit: h,\n                        year: n,\n                        month: v.monthMod(i + 1)\n                    });\n                } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({\n                    position: o,\n                    value: n,\n                    unit: h,\n                    year: a,\n                    month: v.monthMod(i + 1)\n                });\n                for(var d = n, u = o, g = 0; g < r; g++)d++, u = l.determineDaysOfYear(d - 1) * s + u, this.timeScaleArray.push({\n                    position: u,\n                    value: d,\n                    unit: h,\n                    year: d,\n                    month: 1\n                });\n            }\n        },\n        {\n            key: \"generateMonthScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonthDate, a = t.currentMonth, s = t.currentYear, r = t.daysWidthOnXAxis, n = t.numberOfMonths, o = a, l = 0, h = new zi(this.ctx), c = \"month\", d = 0;\n                if (e.minDate > 1) {\n                    l = (h.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * r, o = v.monthMod(a + 1);\n                    var u = s + d, g = v.monthMod(o), p = o;\n                    0 === o && (c = \"year\", p = u, g = 1, u += d += 1), this.timeScaleArray.push({\n                        position: l,\n                        value: p,\n                        unit: c,\n                        year: u,\n                        month: g\n                    });\n                } else this.timeScaleArray.push({\n                    position: l,\n                    value: o,\n                    unit: c,\n                    year: s,\n                    month: v.monthMod(a)\n                });\n                for(var f = o + 1, x = l, b = 0, m = 1; b < n; b++, m++){\n                    0 === (f = v.monthMod(f)) ? (c = \"year\", d += 1) : c = \"month\";\n                    var y = this._getYear(s, f, d);\n                    x = h.determineDaysOfMonths(f, y) * r + x;\n                    var w = 0 === f ? y : f;\n                    this.timeScaleArray.push({\n                        position: x,\n                        value: w,\n                        unit: c,\n                        year: y,\n                        month: 0 === f ? 1 : f\n                    }), f++;\n                }\n            }\n        },\n        {\n            key: \"generateDayScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonth, a = t.currentYear, s = t.hoursWidthOnXAxis, r = t.numberOfDays, n = new zi(this.ctx), o = \"day\", l = e.minDate + 1, h = l, c = function(t, e, i) {\n                    return t > n.determineDaysOfMonths(e + 1, i) ? (h = 1, o = \"month\", u = e += 1, e) : e;\n                }, d = (24 - e.minHour) * s, u = l, g = c(h, i, a);\n                0 === e.minHour && 1 === e.minDate ? (d = 0, u = v.monthMod(e.minMonth), o = \"month\", h = e.minDate) : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && (d = 0, l = e.minDate, u = l, g = c(h = l, i, a), 1 !== u && (o = \"day\")), this.timeScaleArray.push({\n                    position: d,\n                    value: u,\n                    unit: o,\n                    year: this._getYear(a, g, 0),\n                    month: v.monthMod(g),\n                    day: h\n                });\n                for(var p = d, f = 0; f < r; f++){\n                    o = \"day\", g = c(h += 1, g, this._getYear(a, g, 0));\n                    var x = this._getYear(a, g, 0);\n                    p = 24 * s + p;\n                    var b = 1 === h ? v.monthMod(g) : h;\n                    this.timeScaleArray.push({\n                        position: p,\n                        value: b,\n                        unit: o,\n                        year: x,\n                        month: v.monthMod(g),\n                        day: b\n                    });\n                }\n            }\n        },\n        {\n            key: \"generateHourScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentDate, a = t.currentMonth, s = t.currentYear, r = t.minutesWidthOnXAxis, n = t.numberOfHours, o = new zi(this.ctx), l = \"hour\", h = function(t, e) {\n                    return t > o.determineDaysOfMonths(e + 1, s) && (f = 1, e += 1), {\n                        month: e,\n                        date: f\n                    };\n                }, c = function(t, e) {\n                    return t > o.determineDaysOfMonths(e + 1, s) ? e += 1 : e;\n                }, d = 60 - (e.minMinute + e.minSecond / 60), u = d * r, g = e.minHour + 1, p = g;\n                60 === d && (u = 0, p = g = e.minHour);\n                var f = i;\n                p >= 24 && (p = 0, l = \"day\", g = f += 1);\n                var x = h(f, a).month;\n                x = c(f, x), g > 31 && (g = f = 1), this.timeScaleArray.push({\n                    position: u,\n                    value: g,\n                    unit: l,\n                    day: f,\n                    hour: p,\n                    year: s,\n                    month: v.monthMod(x)\n                }), p++;\n                for(var b = u, m = 0; m < n; m++){\n                    if (l = \"hour\", p >= 24) p = 0, l = \"day\", x = h(f += 1, x).month, x = c(f, x);\n                    var y = this._getYear(s, x, 0);\n                    b = 60 * r + b;\n                    var w = 0 === p ? f : p;\n                    this.timeScaleArray.push({\n                        position: b,\n                        value: w,\n                        unit: l,\n                        hour: p,\n                        day: f,\n                        year: y,\n                        month: v.monthMod(x)\n                    }), p++;\n                }\n            }\n        },\n        {\n            key: \"generateMinuteScale\",\n            value: function(t) {\n                for(var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, n = t.currentMonth, o = t.currentYear, l = t.minutesWidthOnXAxis, h = t.secondsWidthOnXAxis, c = t.numberOfMinutes, d = a + 1, u = r, g = n, p = o, f = s, x = (60 - i - e / 1e3) * h, b = 0; b < c; b++)d >= 60 && (d = 0, 24 === (f += 1) && (f = 0)), this.timeScaleArray.push({\n                    position: x,\n                    value: d,\n                    unit: \"minute\",\n                    hour: f,\n                    minute: d,\n                    day: u,\n                    year: this._getYear(p, g, 0),\n                    month: v.monthMod(g)\n                }), x += l, d++;\n            }\n        },\n        {\n            key: \"generateSecondScale\",\n            value: function(t) {\n                for(var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, n = t.currentMonth, o = t.currentYear, l = t.secondsWidthOnXAxis, h = t.numberOfSeconds, c = i + 1, d = a, u = r, g = n, p = o, f = s, x = (1e3 - e) / 1e3 * l, b = 0; b < h; b++)c >= 60 && (c = 0, ++d >= 60 && (d = 0, 24 === ++f && (f = 0))), this.timeScaleArray.push({\n                    position: x,\n                    value: c,\n                    unit: \"second\",\n                    hour: f,\n                    minute: d,\n                    second: c,\n                    day: u,\n                    year: this._getYear(p, g, 0),\n                    month: v.monthMod(g)\n                }), x += l, c++;\n            }\n        },\n        {\n            key: \"createRawDateString\",\n            value: function(t, e) {\n                var i = t.year;\n                return 0 === t.month && (t.month = 1), i += \"-\" + (\"0\" + t.month.toString()).slice(-2), \"day\" === t.unit ? i += \"day\" === t.unit ? \"-\" + (\"0\" + e).slice(-2) : \"-01\" : i += \"-\" + (\"0\" + (t.day ? t.day : \"1\")).slice(-2), \"hour\" === t.unit ? i += \"hour\" === t.unit ? \"T\" + (\"0\" + e).slice(-2) : \"T00\" : i += \"T\" + (\"0\" + (t.hour ? t.hour : \"0\")).slice(-2), \"minute\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":\" + (t.minute ? (\"0\" + t.minute).slice(-2) : \"00\"), \"second\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":00\", this.utc && (i += \".000Z\"), i;\n            }\n        },\n        {\n            key: \"formatDates\",\n            value: function(t) {\n                var e = this, i = this.w;\n                return t.map(function(t) {\n                    var a = t.value.toString(), s = new zi(e.ctx), r = e.createRawDateString(t, a), n = s.getDate(s.parseDate(r));\n                    if (e.utc || (n = s.getDate(s.parseDateWithTimezone(r))), void 0 === i.config.xaxis.labels.format) {\n                        var o = \"dd MMM\", l = i.config.xaxis.labels.datetimeFormatter;\n                        \"year\" === t.unit && (o = l.year), \"month\" === t.unit && (o = l.month), \"day\" === t.unit && (o = l.day), \"hour\" === t.unit && (o = l.hour), \"minute\" === t.unit && (o = l.minute), \"second\" === t.unit && (o = l.second), a = s.formatDate(n, o);\n                    } else a = s.formatDate(n, i.config.xaxis.labels.format);\n                    return {\n                        dateString: r,\n                        position: t.position,\n                        value: a,\n                        unit: t.unit,\n                        year: t.year,\n                        month: t.month\n                    };\n                });\n            }\n        },\n        {\n            key: \"removeOverlappingTS\",\n            value: function(t) {\n                var e, i = this, a = new Mi(this.ctx), s = !1;\n                t.length > 0 && t[0].value && t.every(function(e) {\n                    return e.value.length === t[0].value.length;\n                }) && (s = !0, e = a.getTextRects(t[0].value).width);\n                var r = 0, n = t.map(function(n, o) {\n                    if (o > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {\n                        var l = s ? e : a.getTextRects(t[r].value).width, h = t[r].position;\n                        return n.position > h + l + 10 ? (r = o, n) : null;\n                    }\n                    return n;\n                });\n                return n = n.filter(function(t) {\n                    return null !== t;\n                });\n            }\n        },\n        {\n            key: \"_getYear\",\n            value: function(t, e, i) {\n                return t + Math.floor(e / 12) + i;\n            }\n        }\n    ]), t;\n}(), qa = function() {\n    function t(e, a) {\n        i(this, t), this.ctx = a, this.w = a.w, this.el = e;\n    }\n    return s(t, [\n        {\n            key: \"setupElements\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config, a = i.chart.type;\n                e.axisCharts = [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangeBar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"boxPlot\",\n                    \"scatter\",\n                    \"bubble\",\n                    \"radar\",\n                    \"heatmap\",\n                    \"treemap\"\n                ].includes(a), e.xyCharts = [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangeBar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"boxPlot\",\n                    \"scatter\",\n                    \"bubble\"\n                ].includes(a), e.isBarHorizontal = [\n                    \"bar\",\n                    \"rangeBar\",\n                    \"boxPlot\"\n                ].includes(a) && i.plotOptions.bar.horizontal, e.chartClass = \".apexcharts\".concat(e.chartID), e.dom.baseEl = this.el, e.dom.elWrap = document.createElement(\"div\"), Mi.setAttrs(e.dom.elWrap, {\n                    id: e.chartClass.substring(1),\n                    class: \"apexcharts-canvas \".concat(e.chartClass.substring(1))\n                }), this.el.appendChild(e.dom.elWrap), e.dom.Paper = window.SVG().addTo(e.dom.elWrap), e.dom.Paper.attr({\n                    class: \"apexcharts-svg\",\n                    \"xmlns:data\": \"ApexChartsNS\",\n                    transform: \"translate(\".concat(i.chart.offsetX, \", \").concat(i.chart.offsetY, \")\")\n                }), e.dom.Paper.node.style.background = \"dark\" !== i.theme.mode || i.chart.background ? \"light\" !== i.theme.mode || i.chart.background ? i.chart.background : \"#fff\" : \"#343A3F\", this.setSVGDimensions(), e.dom.elLegendForeign = document.createElementNS(e.SVGNS, \"foreignObject\"), Mi.setAttrs(e.dom.elLegendForeign, {\n                    x: 0,\n                    y: 0,\n                    width: e.svgWidth,\n                    height: e.svgHeight\n                }), e.dom.elLegendWrap = document.createElement(\"div\"), e.dom.elLegendWrap.classList.add(\"apexcharts-legend\"), e.dom.elWrap.appendChild(e.dom.elLegendWrap), e.dom.Paper.node.appendChild(e.dom.elLegendForeign), e.dom.elGraphical = e.dom.Paper.group().attr({\n                    class: \"apexcharts-inner apexcharts-graphical\"\n                }), e.dom.elDefs = e.dom.Paper.defs(), e.dom.Paper.add(e.dom.elGraphical), e.dom.elGraphical.add(e.dom.elDefs);\n            }\n        },\n        {\n            key: \"plotChartType\",\n            value: function(t, e) {\n                var i = this.w, a = this.ctx, s = i.config, r = i.globals, n = {\n                    line: {\n                        series: [],\n                        i: []\n                    },\n                    area: {\n                        series: [],\n                        i: []\n                    },\n                    scatter: {\n                        series: [],\n                        i: []\n                    },\n                    bubble: {\n                        series: [],\n                        i: []\n                    },\n                    bar: {\n                        series: [],\n                        i: []\n                    },\n                    candlestick: {\n                        series: [],\n                        i: []\n                    },\n                    boxPlot: {\n                        series: [],\n                        i: []\n                    },\n                    rangeBar: {\n                        series: [],\n                        i: []\n                    },\n                    rangeArea: {\n                        series: [],\n                        seriesRangeEnd: [],\n                        i: []\n                    }\n                }, o = s.chart.type || \"line\", l = null, h = 0;\n                r.series.forEach(function(e, a) {\n                    var s = \"column\" === t[a].type ? \"bar\" : t[a].type || (\"column\" === o ? \"bar\" : o);\n                    n[s] ? (\"rangeArea\" === s ? (n[s].series.push(r.seriesRangeStart[a]), n[s].seriesRangeEnd.push(r.seriesRangeEnd[a])) : n[s].series.push(e), n[s].i.push(a), \"bar\" === s && (i.globals.columnSeries = n.bar)) : [\n                        \"heatmap\",\n                        \"treemap\",\n                        \"pie\",\n                        \"donut\",\n                        \"polarArea\",\n                        \"radialBar\",\n                        \"radar\"\n                    ].includes(s) ? l = s : console.warn(\"You have specified an unrecognized series type (\".concat(s, \").\")), o !== s && \"scatter\" !== s && h++;\n                }), h > 0 && (l && console.warn(\"Chart or series type \".concat(l, \" cannot appear with other chart or series types.\")), n.bar.series.length > 0 && s.plotOptions.bar.horizontal && (h -= n.bar.series.length, n.bar = {\n                    series: [],\n                    i: []\n                }, i.globals.columnSeries = {\n                    series: [],\n                    i: []\n                }, console.warn(\"Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`\"))), r.comboCharts || (r.comboCharts = h > 0);\n                var c = new Ba(a, e), d = new Ta(a, e);\n                a.pie = new Ea(a);\n                var u = new Ha(a);\n                a.rangeBar = new Oa(a, e);\n                var g = new Ya(a), p = [];\n                if (r.comboCharts) {\n                    var x, b, m = new Pi(a);\n                    if (n.area.series.length > 0) (x = p).push.apply(x, f(m.drawSeriesByGroup(n.area, r.areaGroups, \"area\", c)));\n                    if (n.bar.series.length > 0) if (s.chart.stacked) {\n                        var v = new Ia(a, e);\n                        p.push(v.draw(n.bar.series, n.bar.i));\n                    } else a.bar = new Pa(a, e), p.push(a.bar.draw(n.bar.series, n.bar.i));\n                    if (n.rangeArea.series.length > 0 && p.push(c.draw(n.rangeArea.series, \"rangeArea\", n.rangeArea.i, n.rangeArea.seriesRangeEnd)), n.line.series.length > 0) (b = p).push.apply(b, f(m.drawSeriesByGroup(n.line, r.lineGroups, \"line\", c)));\n                    if (n.candlestick.series.length > 0 && p.push(d.draw(n.candlestick.series, \"candlestick\", n.candlestick.i)), n.boxPlot.series.length > 0 && p.push(d.draw(n.boxPlot.series, \"boxPlot\", n.boxPlot.i)), n.rangeBar.series.length > 0 && p.push(a.rangeBar.draw(n.rangeBar.series, n.rangeBar.i)), n.scatter.series.length > 0) {\n                        var y = new Ba(a, e, !0);\n                        p.push(y.draw(n.scatter.series, \"scatter\", n.scatter.i));\n                    }\n                    if (n.bubble.series.length > 0) {\n                        var w = new Ba(a, e, !0);\n                        p.push(w.draw(n.bubble.series, \"bubble\", n.bubble.i));\n                    }\n                } else switch(s.chart.type){\n                    case \"line\":\n                        p = c.draw(r.series, \"line\");\n                        break;\n                    case \"area\":\n                        p = c.draw(r.series, \"area\");\n                        break;\n                    case \"bar\":\n                        if (s.chart.stacked) p = new Ia(a, e).draw(r.series);\n                        else a.bar = new Pa(a, e), p = a.bar.draw(r.series);\n                        break;\n                    case \"candlestick\":\n                        p = new Ta(a, e).draw(r.series, \"candlestick\");\n                        break;\n                    case \"boxPlot\":\n                        p = new Ta(a, e).draw(r.series, s.chart.type);\n                        break;\n                    case \"rangeBar\":\n                        p = a.rangeBar.draw(r.series);\n                        break;\n                    case \"rangeArea\":\n                        p = c.draw(r.seriesRangeStart, \"rangeArea\", void 0, r.seriesRangeEnd);\n                        break;\n                    case \"heatmap\":\n                        p = new Xa(a, e).draw(r.series);\n                        break;\n                    case \"treemap\":\n                        p = new Ga(a, e).draw(r.series);\n                        break;\n                    case \"pie\":\n                    case \"donut\":\n                    case \"polarArea\":\n                        p = a.pie.draw(r.series);\n                        break;\n                    case \"radialBar\":\n                        p = u.draw(r.series);\n                        break;\n                    case \"radar\":\n                        p = g.draw(r.series);\n                        break;\n                    default:\n                        p = c.draw(r.series);\n                }\n                return p;\n            }\n        },\n        {\n            key: \"setSVGDimensions\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config;\n                i.chart.width = i.chart.width || \"100%\", i.chart.height = i.chart.height || \"auto\", e.svgWidth = i.chart.width, e.svgHeight = i.chart.height;\n                var a = v.getDimensions(this.el), s = i.chart.width.toString().split(/[0-9]+/g).pop();\n                \"%\" === s ? v.isNumber(a[0]) && (0 === a[0].width && (a = v.getDimensions(this.el.parentNode)), e.svgWidth = a[0] * parseInt(i.chart.width, 10) / 100) : \"px\" !== s && \"\" !== s || (e.svgWidth = parseInt(i.chart.width, 10));\n                var r = String(i.chart.height).toString().split(/[0-9]+/g).pop();\n                if (\"auto\" !== e.svgHeight && \"\" !== e.svgHeight) if (\"%\" === r) {\n                    var n = v.getDimensions(this.el.parentNode);\n                    e.svgHeight = n[1] * parseInt(i.chart.height, 10) / 100;\n                } else e.svgHeight = parseInt(i.chart.height, 10);\n                else e.svgHeight = e.axisCharts ? e.svgWidth / 1.61 : e.svgWidth / 1.2;\n                if (e.svgWidth = Math.max(e.svgWidth, 0), e.svgHeight = Math.max(e.svgHeight, 0), Mi.setAttrs(e.dom.Paper.node, {\n                    width: e.svgWidth,\n                    height: e.svgHeight\n                }), \"%\" !== r) {\n                    var o = i.chart.sparkline.enabled ? 0 : e.axisCharts ? i.chart.parentHeightOffset : 0;\n                    e.dom.Paper.node.parentNode.parentNode.style.minHeight = \"\".concat(e.svgHeight + o, \"px\");\n                }\n                e.dom.elWrap.style.width = \"\".concat(e.svgWidth, \"px\"), e.dom.elWrap.style.height = \"\".concat(e.svgHeight, \"px\");\n            }\n        },\n        {\n            key: \"shiftGraphPosition\",\n            value: function() {\n                var t = this.w.globals, e = t.translateY, i = t.translateX;\n                Mi.setAttrs(t.dom.elGraphical.node, {\n                    transform: \"translate(\".concat(i, \", \").concat(e, \")\")\n                });\n            }\n        },\n        {\n            key: \"resizeNonAxisCharts\",\n            value: function() {\n                var t = this.w, e = t.globals, i = 0, a = t.config.chart.sparkline.enabled ? 1 : 15;\n                a += t.config.grid.padding.bottom, [\n                    \"top\",\n                    \"bottom\"\n                ].includes(t.config.legend.position) && t.config.legend.show && !t.config.legend.floating && (i = new xa(this.ctx).legendHelpers.getLegendDimensions().clwh + 7);\n                var s = t.globals.dom.baseEl.querySelector(\".apexcharts-radialbar, .apexcharts-pie\"), r = 2.05 * t.globals.radialSize;\n                if (s && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {\n                    var n = v.getBoundingClientRect(s);\n                    r = n.bottom;\n                    var o = n.bottom - n.top;\n                    r = Math.max(2.05 * t.globals.radialSize, o);\n                }\n                var l = Math.ceil(r + e.translateY + i + a);\n                e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute(\"height\", l), t.config.chart.height && String(t.config.chart.height).includes(\"%\") || (e.dom.elWrap.style.height = \"\".concat(l, \"px\"), Mi.setAttrs(e.dom.Paper.node, {\n                    height: l\n                }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = \"\".concat(l, \"px\"));\n            }\n        },\n        {\n            key: \"coreCalculations\",\n            value: function() {\n                new ea(this.ctx).init();\n            }\n        },\n        {\n            key: \"resetGlobals\",\n            value: function() {\n                var t = this, e = function() {\n                    return t.w.config.series.map(function() {\n                        return [];\n                    });\n                }, i = new Bi, a = this.w.globals;\n                i.initGlobalVars(a), a.seriesXvalues = e(), a.seriesYvalues = e();\n            }\n        },\n        {\n            key: \"isMultipleY\",\n            value: function() {\n                return !!(Array.isArray(this.w.config.yaxis) && this.w.config.yaxis.length > 1) && (this.w.globals.isMultipleYAxis = !0, !0);\n            }\n        },\n        {\n            key: \"xySettings\",\n            value: function() {\n                var t = this.w, e = null;\n                if (t.globals.axisCharts) {\n                    if (\"back\" === t.config.xaxis.crosshairs.position && new na(this.ctx).drawXCrosshairs(), \"back\" === t.config.yaxis[0].crosshairs.position && new na(this.ctx).drawYCrosshairs(), \"datetime\" === t.config.xaxis.type && void 0 === t.config.xaxis.labels.formatter) {\n                        this.ctx.timeScale = new Ua(this.ctx);\n                        var i = [];\n                        isFinite(t.globals.minX) && isFinite(t.globals.maxX) && !t.globals.isBarHorizontal ? i = this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minX, t.globals.maxX) : t.globals.isBarHorizontal && (i = this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minY, t.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);\n                    }\n                    e = new Pi(this.ctx).getCalculatedRatios();\n                }\n                return e;\n            }\n        },\n        {\n            key: \"updateSourceChart\",\n            value: function(t) {\n                this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({\n                    chart: {\n                        selection: {\n                            xaxis: {\n                                min: t.w.globals.minX,\n                                max: t.w.globals.maxX\n                            }\n                        }\n                    }\n                }, !1, !1);\n            }\n        },\n        {\n            key: \"setupBrushHandler\",\n            value: function() {\n                var t = this, e = this.ctx, i = this.w;\n                if (i.config.chart.brush.enabled && \"function\" != typeof i.config.chart.events.selection) {\n                    var a = Array.isArray(i.config.chart.brush.targets) ? i.config.chart.brush.targets : [\n                        i.config.chart.brush.target\n                    ];\n                    a.forEach(function(i) {\n                        var a = e.constructor.getChartByID(i);\n                        a.w.globals.brushSource = t.ctx, \"function\" != typeof a.w.config.chart.events.zoomed && (a.w.config.chart.events.zoomed = function() {\n                            return t.updateSourceChart(a);\n                        }), \"function\" != typeof a.w.config.chart.events.scrolled && (a.w.config.chart.events.scrolled = function() {\n                            return t.updateSourceChart(a);\n                        });\n                    }), i.config.chart.events.selection = function(t, i) {\n                        a.forEach(function(t) {\n                            e.constructor.getChartByID(t).ctx.updateHelpers._updateOptions({\n                                xaxis: {\n                                    min: i.xaxis.min,\n                                    max: i.xaxis.max\n                                }\n                            }, !1, !1, !1, !1);\n                        });\n                    };\n                }\n            }\n        }\n    ]), t;\n}(), Za = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"_updateOptions\",\n            value: function(t) {\n                var e = this, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n                return new Promise(function(n) {\n                    var o = [\n                        e.ctx\n                    ];\n                    s && (o = e.ctx.getSyncedCharts()), e.ctx.w.globals.isExecCalled && (o = [\n                        e.ctx\n                    ], e.ctx.w.globals.isExecCalled = !1), o.forEach(function(s, l) {\n                        var h = s.w;\n                        if (h.globals.shouldAnimate = a, i || (h.globals.resized = !0, h.globals.dataChanged = !0, a && s.series.getPreviousPaths()), t && \"object\" === b(t) && (s.config = new Wi(t), t = Pi.extendArrayProps(s.config, t, h), s.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series, h.config = v.extend(h.config, t), r && (h.globals.lastXAxis = t.xaxis ? v.clone(t.xaxis) : [], h.globals.lastYAxis = t.yaxis ? v.clone(t.yaxis) : [], h.globals.initialConfig = v.extend({}, h.config), h.globals.initialSeries = v.clone(h.config.series), t.series))) {\n                            for(var c = 0; c < h.globals.collapsedSeriesIndices.length; c++){\n                                var d = h.config.series[h.globals.collapsedSeriesIndices[c]];\n                                h.globals.collapsedSeries[c].data = h.globals.axisCharts ? d.data.slice() : d;\n                            }\n                            for(var u = 0; u < h.globals.ancillaryCollapsedSeriesIndices.length; u++){\n                                var g = h.config.series[h.globals.ancillaryCollapsedSeriesIndices[u]];\n                                h.globals.ancillaryCollapsedSeries[u].data = h.globals.axisCharts ? g.data.slice() : g;\n                            }\n                            s.series.emptyCollapsedSeries(h.config.series);\n                        }\n                        return s.update(t).then(function() {\n                            l === o.length - 1 && n(s);\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"_updateSeries\",\n            value: function(t, e) {\n                var i = this, a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n                return new Promise(function(s) {\n                    var r, n = i.w;\n                    return n.globals.shouldAnimate = e, n.globals.dataChanged = !0, e && i.ctx.series.getPreviousPaths(), n.globals.axisCharts ? (0 === (r = t.map(function(t, e) {\n                        return i._extendSeries(t, e);\n                    })).length && (r = [\n                        {\n                            data: []\n                        }\n                    ]), n.config.series = r) : n.config.series = t.slice(), a && (n.globals.initialConfig.series = v.clone(n.config.series), n.globals.initialSeries = v.clone(n.config.series)), i.ctx.update().then(function() {\n                        s(i.ctx);\n                    });\n                });\n            }\n        },\n        {\n            key: \"_extendSeries\",\n            value: function(t, e) {\n                var i = this.w, a = i.config.series[e];\n                return u(u({}, i.config.series[e]), {}, {\n                    name: t.name ? t.name : null == a ? void 0 : a.name,\n                    color: t.color ? t.color : null == a ? void 0 : a.color,\n                    type: t.type ? t.type : null == a ? void 0 : a.type,\n                    group: t.group ? t.group : null == a ? void 0 : a.group,\n                    hidden: void 0 !== t.hidden ? t.hidden : null == a ? void 0 : a.hidden,\n                    data: t.data ? t.data : null == a ? void 0 : a.data,\n                    zIndex: void 0 !== t.zIndex ? t.zIndex : e\n                });\n            }\n        },\n        {\n            key: \"toggleDataPointSelection\",\n            value: function(t, e) {\n                var i = this.w, a = null, s = \".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\");\n                return i.globals.axisCharts ? a = i.globals.dom.Paper.findOne(\"\".concat(s, \" path[j='\").concat(e, \"'], \").concat(s, \" circle[j='\").concat(e, \"'], \").concat(s, \" rect[j='\").concat(e, \"']\")) : void 0 === e && (a = i.globals.dom.Paper.findOne(\"\".concat(s, \" path[j='\").concat(t, \"']\")), \"pie\" !== i.config.chart.type && \"polarArea\" !== i.config.chart.type && \"donut\" !== i.config.chart.type || this.ctx.pie.pieClicked(t)), a ? (new Mi(this.ctx).pathMouseDown(a, null), a.node ? a.node : null) : (console.warn(\"toggleDataPointSelection: Element not found\"), null);\n            }\n        },\n        {\n            key: \"forceXAxisUpdate\",\n            value: function(t) {\n                var e = this.w;\n                if ([\n                    \"min\",\n                    \"max\"\n                ].forEach(function(i) {\n                    void 0 !== t.xaxis[i] && (e.config.xaxis[i] = t.xaxis[i], e.globals.lastXAxis[i] = t.xaxis[i]);\n                }), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {\n                    var i = new Ni(t);\n                    t = i.convertCatToNumericXaxis(t, this.ctx);\n                }\n                return t;\n            }\n        },\n        {\n            key: \"forceYAxisUpdate\",\n            value: function(t) {\n                return t.chart && t.chart.stacked && \"100%\" === t.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach(function(e, i) {\n                    t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n                }) : (t.yaxis.min = 0, t.yaxis.max = 100)), t;\n            }\n        },\n        {\n            key: \"revertDefaultAxisMinMax\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.globals.lastXAxis, s = i.globals.lastYAxis;\n                t && t.xaxis && (a = t.xaxis), t && t.yaxis && (s = t.yaxis), i.config.xaxis.min = a.min, i.config.xaxis.max = a.max;\n                var r = function(t) {\n                    void 0 !== s[t] && (i.config.yaxis[t].min = s[t].min, i.config.yaxis[t].max = s[t].max);\n                };\n                i.config.yaxis.map(function(t, a) {\n                    i.globals.zoomed || void 0 !== s[a] ? r(a) : void 0 !== e.ctx.opts.yaxis[a] && (t.min = e.ctx.opts.yaxis[a].min, t.max = e.ctx.opts.yaxis[a].max);\n                });\n            }\n        }\n    ]), t;\n}();\n!function() {\n    function t() {\n        for(var t = arguments.length > 0 && arguments[0] !== h ? arguments[0] : [], s = arguments.length > 1 ? arguments[1] : h, r = arguments.length > 2 ? arguments[2] : h, n = arguments.length > 3 ? arguments[3] : h, o = arguments.length > 4 ? arguments[4] : h, l = arguments.length > 5 ? arguments[5] : h, h = arguments.length > 6 ? arguments[6] : h, c = t.slice(s, r || h), d = n.slice(o, l || h), u = 0, g = {\n            pos: [\n                0,\n                0\n            ],\n            start: [\n                0,\n                0\n            ]\n        }, p = {\n            pos: [\n                0,\n                0\n            ],\n            start: [\n                0,\n                0\n            ]\n        };;){\n            if (c[u] = e.call(g, c[u]), d[u] = e.call(p, d[u]), c[u][0] != d[u][0] || \"M\" == c[u][0] || \"A\" == c[u][0] && (c[u][4] != d[u][4] || c[u][5] != d[u][5]) ? (Array.prototype.splice.apply(c, [\n                u,\n                1\n            ].concat(a.call(g, c[u]))), Array.prototype.splice.apply(d, [\n                u,\n                1\n            ].concat(a.call(p, d[u])))) : (c[u] = i.call(g, c[u]), d[u] = i.call(p, d[u])), ++u == c.length && u == d.length) break;\n            u == c.length && c.push([\n                \"C\",\n                g.pos[0],\n                g.pos[1],\n                g.pos[0],\n                g.pos[1],\n                g.pos[0],\n                g.pos[1]\n            ]), u == d.length && d.push([\n                \"C\",\n                p.pos[0],\n                p.pos[1],\n                p.pos[0],\n                p.pos[1],\n                p.pos[0],\n                p.pos[1]\n            ]);\n        }\n        return {\n            start: c,\n            dest: d\n        };\n    }\n    function e(t) {\n        switch(t[0]){\n            case \"z\":\n            case \"Z\":\n                t[0] = \"L\", t[1] = this.start[0], t[2] = this.start[1];\n                break;\n            case \"H\":\n                t[0] = \"L\", t[2] = this.pos[1];\n                break;\n            case \"V\":\n                t[0] = \"L\", t[2] = t[1], t[1] = this.pos[0];\n                break;\n            case \"T\":\n                t[0] = \"Q\", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];\n                break;\n            case \"S\":\n                t[0] = \"C\", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];\n        }\n        return t;\n    }\n    function i(t) {\n        var e = t.length;\n        return this.pos = [\n            t[e - 2],\n            t[e - 1]\n        ], -1 != \"SCQT\".indexOf(t[0]) && (this.reflection = [\n            2 * this.pos[0] - t[e - 4],\n            2 * this.pos[1] - t[e - 3]\n        ]), t;\n    }\n    function a(t) {\n        var e = [\n            t\n        ];\n        switch(t[0]){\n            case \"M\":\n                return this.pos = this.start = [\n                    t[1],\n                    t[2]\n                ], e;\n            case \"L\":\n                t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];\n                break;\n            case \"Q\":\n                t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;\n                break;\n            case \"A\":\n                e = function(t, e) {\n                    var i, a, s, r, n, o, l, h, c, d, u, g, p, f, x, b, m, v, y, w, k, A, C, S, L, M, P = Math.abs(e[1]), I = Math.abs(e[2]), T = e[3] % 360, z = e[4], X = e[5], R = e[6], E = e[7], Y = new bt(t), H = new bt(R, E), O = [];\n                    if (0 === P || 0 === I || Y.x === H.x && Y.y === H.y) return [\n                        [\n                            \"C\",\n                            Y.x,\n                            Y.y,\n                            H.x,\n                            H.y,\n                            H.x,\n                            H.y\n                        ]\n                    ];\n                    i = new bt((Y.x - H.x) / 2, (Y.y - H.y) / 2).transform((new vt).rotate(T)), a = i.x * i.x / (P * P) + i.y * i.y / (I * I), a > 1 && (P *= a = Math.sqrt(a), I *= a);\n                    s = (new vt).rotate(T).scale(1 / P, 1 / I).rotate(-T), Y = Y.transform(s), H = H.transform(s), r = [\n                        H.x - Y.x,\n                        H.y - Y.y\n                    ], o = r[0] * r[0] + r[1] * r[1], n = Math.sqrt(o), r[0] /= n, r[1] /= n, l = o < 4 ? Math.sqrt(1 - o / 4) : 0, z === X && (l *= -1);\n                    h = new bt((H.x + Y.x) / 2 + l * -r[1], (H.y + Y.y) / 2 + l * r[0]), c = new bt(Y.x - h.x, Y.y - h.y), d = new bt(H.x - h.x, H.y - h.y), u = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (u *= -1);\n                    g = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (g *= -1);\n                    X && u > g && (g += 2 * Math.PI);\n                    !X && u < g && (g -= 2 * Math.PI);\n                    for(f = Math.ceil(2 * Math.abs(u - g) / Math.PI), b = [], m = u, p = (g - u) / f, x = 4 * Math.tan(p / 4) / 3, k = 0; k <= f; k++)y = Math.cos(m), v = Math.sin(m), w = new bt(h.x + y, h.y + v), b[k] = [\n                        new bt(w.x + x * v, w.y - x * y),\n                        w,\n                        new bt(w.x - x * v, w.y + x * y)\n                    ], m += p;\n                    for(b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), s = (new vt).rotate(T).scale(P, I).rotate(-T), k = 0, A = b.length; k < A; k++)b[k][0] = b[k][0].transform(s), b[k][1] = b[k][1].transform(s), b[k][2] = b[k][2].transform(s);\n                    for(k = 1, A = b.length; k < A; k++)C = (w = b[k - 1][2]).x, S = w.y, L = (w = b[k][0]).x, M = w.y, R = (w = b[k][1]).x, E = w.y, O.push([\n                        \"C\",\n                        C,\n                        S,\n                        L,\n                        M,\n                        R,\n                        E\n                    ]);\n                    return O;\n                }(this.pos, t), t = e[0];\n        }\n        return t[0] = \"C\", this.pos = [\n            t[5],\n            t[6]\n        ], this.reflection = [\n            2 * t[5] - t[3],\n            2 * t[6] - t[4]\n        ], e;\n    }\n    function s() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = arguments.length > 1 ? arguments[1] : void 0;\n        if (!1 === e) return !1;\n        for(var i = e, a = t.length; i < a; ++i)if (\"M\" == t[i][0]) return i;\n        return !1;\n    }\n    Q(Ee, {\n        morph: function(e, i, a, r, n) {\n            for(var o = this.parse(e), l = this.parse(i), h = 0, c = 0, d = !1, u = !1; !1 !== h || !1 !== c;){\n                var g;\n                d = s(o, !1 !== h && h + 1), u = s(l, !1 !== c && c + 1), !1 === h && (h = 0 == (g = new Ee(p.start).bbox()).height || 0 == g.width ? o.push(o[0]) - 1 : o.push([\n                    \"M\",\n                    g.x + g.width / 2,\n                    g.y + g.height / 2\n                ]) - 1), !1 === c && (c = 0 == (g = new Ee(p.dest).bbox()).height || 0 == g.width ? l.push(l[0]) - 1 : l.push([\n                    \"M\",\n                    g.x + g.width / 2,\n                    g.y + g.height / 2\n                ]) - 1);\n                var p = t(o, h, d, l, c, u);\n                o = o.slice(0, h).concat(p.start, !1 === d ? [] : o.slice(d)), l = l.slice(0, c).concat(p.dest, !1 === u ? [] : l.slice(u)), h = !1 !== d && h + p.start.length, c = !1 !== u && c + p.dest.length;\n            }\n            this._array = o, this.destination = new Ee, this.destination._array = l;\n            var f = this.fromArray(o.map(function(t, e) {\n                var i = l[e].map(function(i, s) {\n                    return 0 === s ? i : r.step(t[s], l[e][s], a, n[e], n);\n                });\n                return i;\n            }));\n            return f;\n        }\n    });\n}();\nconst $a = (t)=>(t.changedTouches && (t = t.changedTouches[0]), {\n        x: t.clientX,\n        y: t.clientY\n    });\nclass Ja {\n    constructor(t){\n        t.remember(\"_draggable\", this), this.el = t, this.drag = this.drag.bind(this), this.startDrag = this.startDrag.bind(this), this.endDrag = this.endDrag.bind(this);\n    }\n    init(t) {\n        t ? (this.el.on(\"mousedown.drag\", this.startDrag), this.el.on(\"touchstart.drag\", this.startDrag, {\n            passive: !1\n        })) : (this.el.off(\"mousedown.drag\"), this.el.off(\"touchstart.drag\"));\n    }\n    startDrag(t) {\n        const e = !t.type.indexOf(\"mouse\");\n        if (e && 1 !== t.which && 0 !== t.buttons) return;\n        if (this.el.dispatch(\"beforedrag\", {\n            event: t,\n            handler: this\n        }).defaultPrevented) return;\n        t.preventDefault(), t.stopPropagation(), this.init(!1), this.box = this.el.bbox(), this.lastClick = this.el.point($a(t));\n        const i = (e ? \"mouseup\" : \"touchend\") + \".drag\";\n        zt(window, (e ? \"mousemove\" : \"touchmove\") + \".drag\", this.drag, this, {\n            passive: !1\n        }), zt(window, i, this.endDrag, this, {\n            passive: !1\n        }), this.el.fire(\"dragstart\", {\n            event: t,\n            handler: this,\n            box: this.box\n        });\n    }\n    drag(t) {\n        const { box: e, lastClick: i } = this, a = this.el.point($a(t)), s = a.x - i.x, r = a.y - i.y;\n        if (!s && !r) return e;\n        const n = e.x + s, o = e.y + r;\n        this.box = new kt(n, o, e.w, e.h), this.lastClick = a, this.el.dispatch(\"dragmove\", {\n            event: t,\n            handler: this,\n            box: this.box\n        }).defaultPrevented || this.move(n, o);\n    }\n    move(t, e) {\n        \"svg\" === this.el.type ? gi.prototype.move.call(this.el, t, e) : this.el.move(t, e);\n    }\n    endDrag(t) {\n        this.drag(t), this.el.fire(\"dragend\", {\n            event: t,\n            handler: this,\n            box: this.box\n        }), Xt(window, \"mousemove.drag\"), Xt(window, \"touchmove.drag\"), Xt(window, \"mouseup.drag\"), Xt(window, \"touchend.drag\"), this.init(!0);\n    }\n}\n/*!\n* @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 4.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias Schäfer\n* @license MIT\n*\n* BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)\n*/ function Qa(t, e, i, a = null) {\n    return function(s) {\n        s.preventDefault(), s.stopPropagation();\n        var r = s.pageX || s.touches[0].pageX, n = s.pageY || s.touches[0].pageY;\n        e.fire(t, {\n            x: r,\n            y: n,\n            event: s,\n            index: a,\n            points: i\n        });\n    };\n}\nfunction Ka([t, e], { a: i, b: a, c: s, d: r, e: n, f: o }) {\n    return [\n        t * i + e * s + n,\n        t * a + e * r + o\n    ];\n}\nQ(Gt, {\n    draggable (t = !0) {\n        return (this.remember(\"_draggable\") || new Ja(this)).init(t), this;\n    }\n});\nlet ts = class {\n    constructor(t){\n        this.el = t, t.remember(\"_selectHandler\", this), this.selection = new gi, this.order = [\n            \"lt\",\n            \"t\",\n            \"rt\",\n            \"r\",\n            \"rb\",\n            \"b\",\n            \"lb\",\n            \"l\",\n            \"rot\"\n        ], this.mutationHandler = this.mutationHandler.bind(this);\n        const e = F();\n        this.observer = new e.MutationObserver(this.mutationHandler);\n    }\n    init(t) {\n        this.createHandle = t.createHandle || this.createHandleFn, this.createRot = t.createRot || this.createRotFn, this.updateHandle = t.updateHandle || this.updateHandleFn, this.updateRot = t.updateRot || this.updateRotFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createResizeHandles(), this.updateResizeHandles(), this.createRotationHandle(), this.updateRotationHandle(), this.observer.observe(this.el.node, {\n            attributes: !0\n        });\n    }\n    active(t, e) {\n        if (!t) return this.selection.clear().remove(), void this.observer.disconnect();\n        this.init(e);\n    }\n    createSelection() {\n        this.selection.polygon(this.handlePoints).addClass(\"svg_select_shape\");\n    }\n    updateSelection() {\n        this.selection.get(0).plot(this.handlePoints);\n    }\n    createResizeHandles() {\n        this.handlePoints.forEach((t, e, i)=>{\n            const a = this.order[e];\n            this.createHandle.call(this, this.selection, t, e, i, a), this.selection.get(e + 1).addClass(\"svg_select_handle svg_select_handle_\" + a).on(\"mousedown.selection touchstart.selection\", Qa(a, this.el, this.handlePoints, e));\n        });\n    }\n    createHandleFn(t) {\n        t.polyline();\n    }\n    updateHandleFn(t, e, i, a) {\n        const s = a.at(i - 1), r = a[(i + 1) % a.length], n = e, o = [\n            n[0] - s[0],\n            n[1] - s[1]\n        ], l = [\n            n[0] - r[0],\n            n[1] - r[1]\n        ], h = Math.sqrt(o[0] * o[0] + o[1] * o[1]), c = Math.sqrt(l[0] * l[0] + l[1] * l[1]), d = [\n            o[0] / h,\n            o[1] / h\n        ], u = [\n            l[0] / c,\n            l[1] / c\n        ], g = [\n            n[0] - 10 * d[0],\n            n[1] - 10 * d[1]\n        ], p = [\n            n[0] - 10 * u[0],\n            n[1] - 10 * u[1]\n        ];\n        t.plot([\n            g,\n            n,\n            p\n        ]);\n    }\n    updateResizeHandles() {\n        this.handlePoints.forEach((t, e, i)=>{\n            const a = this.order[e];\n            this.updateHandle.call(this, this.selection.get(e + 1), t, e, i, a);\n        });\n    }\n    createRotFn(t) {\n        t.line(), t.circle(5);\n    }\n    getPoint(t) {\n        return this.handlePoints[this.order.indexOf(t)];\n    }\n    getPointHandle(t) {\n        return this.selection.get(this.order.indexOf(t) + 1);\n    }\n    updateRotFn(t, e) {\n        const i = this.getPoint(\"t\");\n        t.get(0).plot(i[0], i[1], e[0], e[1]), t.get(1).center(e[0], e[1]);\n    }\n    createRotationHandle() {\n        const t = this.selection.group().addClass(\"svg_select_handle_rot\").on(\"mousedown.selection touchstart.selection\", Qa(\"rot\", this.el, this.handlePoints));\n        this.createRot.call(this, t);\n    }\n    updateRotationHandle() {\n        const t = this.selection.findOne(\"g.svg_select_handle_rot\");\n        this.updateRot(t, this.rotationPoint, this.handlePoints);\n    }\n    updatePoints() {\n        const t = this.el.bbox(), e = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n        this.handlePoints = this.getHandlePoints(t).map((t)=>Ka(t, e)), this.rotationPoint = Ka(this.getRotationPoint(t), e);\n    }\n    getHandlePoints({ x: t, x2: e, y: i, y2: a, cx: s, cy: r } = this.el.bbox()) {\n        return [\n            [\n                t,\n                i\n            ],\n            [\n                s,\n                i\n            ],\n            [\n                e,\n                i\n            ],\n            [\n                e,\n                r\n            ],\n            [\n                e,\n                a\n            ],\n            [\n                s,\n                a\n            ],\n            [\n                t,\n                a\n            ],\n            [\n                t,\n                r\n            ]\n        ];\n    }\n    getRotationPoint({ y: t, cx: e } = this.el.bbox()) {\n        return [\n            e,\n            t - 20\n        ];\n    }\n    mutationHandler() {\n        this.updatePoints(), this.updateSelection(), this.updateResizeHandles(), this.updateRotationHandle();\n    }\n};\nconst es = (t)=>function(e = !0, i = {}) {\n        \"object\" == typeof e && (i = e, e = !0);\n        let a = this.remember(\"_\" + t.name);\n        return a || (e.prototype instanceof ts ? (a = new e(this), e = !0) : a = new t(this), this.remember(\"_\" + t.name, a)), a.active(e, i), this;\n    };\n/*!\n* @svgdotjs/svg.resize.js - An extension for svg.js which allows to resize elements which are selected\n* @version 2.0.4\n* https://github.com/svgdotjs/svg.resize.js\n*\n* @copyright [object Object]\n* @license MIT\n*\n* BUILT: Fri Sep 13 2024 12:43:14 GMT+0200 (Central European Summer Time)\n*/ /*!\n* @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 4.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias Schäfer\n* @license MIT\n*\n* BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)\n*/ function is(t, e, i, a = null) {\n    return function(s) {\n        s.preventDefault(), s.stopPropagation();\n        var r = s.pageX || s.touches[0].pageX, n = s.pageY || s.touches[0].pageY;\n        e.fire(t, {\n            x: r,\n            y: n,\n            event: s,\n            index: a,\n            points: i\n        });\n    };\n}\nfunction as([t, e], { a: i, b: a, c: s, d: r, e: n, f: o }) {\n    return [\n        t * i + e * s + n,\n        t * a + e * r + o\n    ];\n}\nQ(Gt, {\n    select: es(ts)\n}), Q([\n    Ge,\n    je,\n    xe\n], {\n    pointSelect: es(class {\n        constructor(t){\n            this.el = t, t.remember(\"_pointSelectHandler\", this), this.selection = new gi, this.order = [\n                \"lt\",\n                \"t\",\n                \"rt\",\n                \"r\",\n                \"rb\",\n                \"b\",\n                \"lb\",\n                \"l\",\n                \"rot\"\n            ], this.mutationHandler = this.mutationHandler.bind(this);\n            const e = F();\n            this.observer = new e.MutationObserver(this.mutationHandler);\n        }\n        init(t) {\n            this.createHandle = t.createHandle || this.createHandleFn, this.updateHandle = t.updateHandle || this.updateHandleFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createPointHandles(), this.updatePointHandles(), this.observer.observe(this.el.node, {\n                attributes: !0\n            });\n        }\n        active(t, e) {\n            if (!t) return this.selection.clear().remove(), void this.observer.disconnect();\n            this.init(e);\n        }\n        createSelection() {\n            this.selection.polygon(this.points).addClass(\"svg_select_shape_pointSelect\");\n        }\n        updateSelection() {\n            this.selection.get(0).plot(this.points);\n        }\n        createPointHandles() {\n            this.points.forEach((t, e, i)=>{\n                this.createHandle.call(this, this.selection, t, e, i), this.selection.get(e + 1).addClass(\"svg_select_handle_point\").on(\"mousedown.selection touchstart.selection\", Qa(\"point\", this.el, this.points, e));\n            });\n        }\n        createHandleFn(t) {\n            t.circle(5);\n        }\n        updateHandleFn(t, e) {\n            t.center(e[0], e[1]);\n        }\n        updatePointHandles() {\n            this.points.forEach((t, e, i)=>{\n                this.updateHandle.call(this, this.selection.get(e + 1), t, e, i);\n            });\n        }\n        updatePoints() {\n            const t = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n            this.points = this.el.array().map((e)=>Ka(e, t));\n        }\n        mutationHandler() {\n            this.updatePoints(), this.updateSelection(), this.updatePointHandles();\n        }\n    })\n});\nclass ss {\n    constructor(t){\n        this.el = t, t.remember(\"_selectHandler\", this), this.selection = new gi, this.order = [\n            \"lt\",\n            \"t\",\n            \"rt\",\n            \"r\",\n            \"rb\",\n            \"b\",\n            \"lb\",\n            \"l\",\n            \"rot\"\n        ], this.mutationHandler = this.mutationHandler.bind(this);\n        const e = F();\n        this.observer = new e.MutationObserver(this.mutationHandler);\n    }\n    init(t) {\n        this.createHandle = t.createHandle || this.createHandleFn, this.createRot = t.createRot || this.createRotFn, this.updateHandle = t.updateHandle || this.updateHandleFn, this.updateRot = t.updateRot || this.updateRotFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createResizeHandles(), this.updateResizeHandles(), this.createRotationHandle(), this.updateRotationHandle(), this.observer.observe(this.el.node, {\n            attributes: !0\n        });\n    }\n    active(t, e) {\n        if (!t) return this.selection.clear().remove(), void this.observer.disconnect();\n        this.init(e);\n    }\n    createSelection() {\n        this.selection.polygon(this.handlePoints).addClass(\"svg_select_shape\");\n    }\n    updateSelection() {\n        this.selection.get(0).plot(this.handlePoints);\n    }\n    createResizeHandles() {\n        this.handlePoints.forEach((t, e, i)=>{\n            const a = this.order[e];\n            this.createHandle.call(this, this.selection, t, e, i, a), this.selection.get(e + 1).addClass(\"svg_select_handle svg_select_handle_\" + a).on(\"mousedown.selection touchstart.selection\", is(a, this.el, this.handlePoints, e));\n        });\n    }\n    createHandleFn(t) {\n        t.polyline();\n    }\n    updateHandleFn(t, e, i, a) {\n        const s = a.at(i - 1), r = a[(i + 1) % a.length], n = e, o = [\n            n[0] - s[0],\n            n[1] - s[1]\n        ], l = [\n            n[0] - r[0],\n            n[1] - r[1]\n        ], h = Math.sqrt(o[0] * o[0] + o[1] * o[1]), c = Math.sqrt(l[0] * l[0] + l[1] * l[1]), d = [\n            o[0] / h,\n            o[1] / h\n        ], u = [\n            l[0] / c,\n            l[1] / c\n        ], g = [\n            n[0] - 10 * d[0],\n            n[1] - 10 * d[1]\n        ], p = [\n            n[0] - 10 * u[0],\n            n[1] - 10 * u[1]\n        ];\n        t.plot([\n            g,\n            n,\n            p\n        ]);\n    }\n    updateResizeHandles() {\n        this.handlePoints.forEach((t, e, i)=>{\n            const a = this.order[e];\n            this.updateHandle.call(this, this.selection.get(e + 1), t, e, i, a);\n        });\n    }\n    createRotFn(t) {\n        t.line(), t.circle(5);\n    }\n    getPoint(t) {\n        return this.handlePoints[this.order.indexOf(t)];\n    }\n    getPointHandle(t) {\n        return this.selection.get(this.order.indexOf(t) + 1);\n    }\n    updateRotFn(t, e) {\n        const i = this.getPoint(\"t\");\n        t.get(0).plot(i[0], i[1], e[0], e[1]), t.get(1).center(e[0], e[1]);\n    }\n    createRotationHandle() {\n        const t = this.selection.group().addClass(\"svg_select_handle_rot\").on(\"mousedown.selection touchstart.selection\", is(\"rot\", this.el, this.handlePoints));\n        this.createRot.call(this, t);\n    }\n    updateRotationHandle() {\n        const t = this.selection.findOne(\"g.svg_select_handle_rot\");\n        this.updateRot(t, this.rotationPoint, this.handlePoints);\n    }\n    updatePoints() {\n        const t = this.el.bbox(), e = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n        this.handlePoints = this.getHandlePoints(t).map((t)=>as(t, e)), this.rotationPoint = as(this.getRotationPoint(t), e);\n    }\n    getHandlePoints({ x: t, x2: e, y: i, y2: a, cx: s, cy: r } = this.el.bbox()) {\n        return [\n            [\n                t,\n                i\n            ],\n            [\n                s,\n                i\n            ],\n            [\n                e,\n                i\n            ],\n            [\n                e,\n                r\n            ],\n            [\n                e,\n                a\n            ],\n            [\n                s,\n                a\n            ],\n            [\n                t,\n                a\n            ],\n            [\n                t,\n                r\n            ]\n        ];\n    }\n    getRotationPoint({ y: t, cx: e } = this.el.bbox()) {\n        return [\n            e,\n            t - 20\n        ];\n    }\n    mutationHandler() {\n        this.updatePoints(), this.updateSelection(), this.updateResizeHandles(), this.updateRotationHandle();\n    }\n}\nconst rs = (t)=>function(e = !0, i = {}) {\n        \"object\" == typeof e && (i = e, e = !0);\n        let a = this.remember(\"_\" + t.name);\n        return a || (e.prototype instanceof ss ? (a = new e(this), e = !0) : a = new t(this), this.remember(\"_\" + t.name, a)), a.active(e, i), this;\n    };\nQ(Gt, {\n    select: rs(ss)\n}), Q([\n    Ge,\n    je,\n    xe\n], {\n    pointSelect: rs(class {\n        constructor(t){\n            this.el = t, t.remember(\"_pointSelectHandler\", this), this.selection = new gi, this.order = [\n                \"lt\",\n                \"t\",\n                \"rt\",\n                \"r\",\n                \"rb\",\n                \"b\",\n                \"lb\",\n                \"l\",\n                \"rot\"\n            ], this.mutationHandler = this.mutationHandler.bind(this);\n            const e = F();\n            this.observer = new e.MutationObserver(this.mutationHandler);\n        }\n        init(t) {\n            this.createHandle = t.createHandle || this.createHandleFn, this.updateHandle = t.updateHandle || this.updateHandleFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createPointHandles(), this.updatePointHandles(), this.observer.observe(this.el.node, {\n                attributes: !0\n            });\n        }\n        active(t, e) {\n            if (!t) return this.selection.clear().remove(), void this.observer.disconnect();\n            this.init(e);\n        }\n        createSelection() {\n            this.selection.polygon(this.points).addClass(\"svg_select_shape_pointSelect\");\n        }\n        updateSelection() {\n            this.selection.get(0).plot(this.points);\n        }\n        createPointHandles() {\n            this.points.forEach((t, e, i)=>{\n                this.createHandle.call(this, this.selection, t, e, i), this.selection.get(e + 1).addClass(\"svg_select_handle_point\").on(\"mousedown.selection touchstart.selection\", is(\"point\", this.el, this.points, e));\n            });\n        }\n        createHandleFn(t) {\n            t.circle(5);\n        }\n        updateHandleFn(t, e) {\n            t.center(e[0], e[1]);\n        }\n        updatePointHandles() {\n            this.points.forEach((t, e, i)=>{\n                this.updateHandle.call(this, this.selection.get(e + 1), t, e, i);\n            });\n        }\n        updatePoints() {\n            const t = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n            this.points = this.el.array().map((e)=>as(e, t));\n        }\n        mutationHandler() {\n            this.updatePoints(), this.updateSelection(), this.updatePointHandles();\n        }\n    })\n});\nconst ns = (t)=>(t.changedTouches && (t = t.changedTouches[0]), {\n        x: t.clientX,\n        y: t.clientY\n    }), os = (t)=>{\n    let e = 1 / 0, i = 1 / 0, a = -1 / 0, s = -1 / 0;\n    for(let r = 0; r < t.length; r++){\n        const n = t[r];\n        e = Math.min(e, n[0]), i = Math.min(i, n[1]), a = Math.max(a, n[0]), s = Math.max(s, n[1]);\n    }\n    return new kt(e, i, a - e, s - i);\n};\nclass ls {\n    constructor(t){\n        this.el = t, t.remember(\"_ResizeHandler\", this), this.lastCoordinates = null, this.eventType = \"\", this.lastEvent = null, this.handleResize = this.handleResize.bind(this), this.resize = this.resize.bind(this), this.endResize = this.endResize.bind(this), this.rotate = this.rotate.bind(this), this.movePoint = this.movePoint.bind(this);\n    }\n    active(t, e) {\n        this.preserveAspectRatio = e.preserveAspectRatio ?? !1, this.aroundCenter = e.aroundCenter ?? !1, this.grid = e.grid ?? 0, this.degree = e.degree ?? 0, this.el.off(\".resize\"), t && (this.el.on([\n            \"lt.resize\",\n            \"rt.resize\",\n            \"rb.resize\",\n            \"lb.resize\",\n            \"t.resize\",\n            \"r.resize\",\n            \"b.resize\",\n            \"l.resize\",\n            \"rot.resize\",\n            \"point.resize\"\n        ], this.handleResize), this.lastEvent && (\"rot\" === this.eventType ? this.rotate(this.lastEvent) : \"point\" === this.eventType ? this.movePoint(this.lastEvent) : this.resize(this.lastEvent)));\n    }\n    handleResize(t) {\n        this.eventType = t.type;\n        const { event: e, index: i, points: a } = t.detail, s = !e.type.indexOf(\"mouse\");\n        if (s && 1 !== (e.which || e.buttons)) return;\n        if (this.el.dispatch(\"beforeresize\", {\n            event: t,\n            handler: this\n        }).defaultPrevented) return;\n        this.box = this.el.bbox(), this.startPoint = this.el.point(ns(e)), this.index = i, this.points = a.slice();\n        const r = (s ? \"mousemove\" : \"touchmove\") + \".resize\", n = (s ? \"mouseup\" : \"touchcancel.resize touchend\") + \".resize\";\n        \"point\" === t.type ? zt(window, r, this.movePoint) : \"rot\" === t.type ? zt(window, r, this.rotate) : zt(window, r, this.resize), zt(window, n, this.endResize);\n    }\n    resize(t) {\n        this.lastEvent = t;\n        const e = this.snapToGrid(this.el.point(ns(t)));\n        let i = e.x - this.startPoint.x, a = e.y - this.startPoint.y;\n        this.preserveAspectRatio && this.aroundCenter && (i *= 2, a *= 2);\n        const s = this.box.x + i, r = this.box.y + a, n = this.box.x2 + i, o = this.box.y2 + a;\n        let l = new kt(this.box);\n        if (this.eventType.includes(\"l\") && (l.x = Math.min(s, this.box.x2), l.x2 = Math.max(s, this.box.x2)), this.eventType.includes(\"r\") && (l.x = Math.min(n, this.box.x), l.x2 = Math.max(n, this.box.x)), this.eventType.includes(\"t\") && (l.y = Math.min(r, this.box.y2), l.y2 = Math.max(r, this.box.y2)), this.eventType.includes(\"b\") && (l.y = Math.min(o, this.box.y), l.y2 = Math.max(o, this.box.y)), l.width = l.x2 - l.x, l.height = l.y2 - l.y, this.preserveAspectRatio) {\n            const t = l.width / this.box.width, e = l.height / this.box.height, i = [\n                \"lt\",\n                \"t\",\n                \"rt\",\n                \"r\",\n                \"rb\",\n                \"b\",\n                \"lb\",\n                \"l\"\n            ], a = (i.indexOf(this.eventType) + 4) % i.length, s = this.aroundCenter ? [\n                this.box.cx,\n                this.box.cy\n            ] : this.points[a];\n            let r = this.eventType.includes(\"t\") || this.eventType.includes(\"b\") ? e : t;\n            r = 2 === this.eventType.length ? Math.max(t, e) : r, l = function(t, e, i) {\n                const a = [\n                    [\n                        t.x,\n                        t.y\n                    ],\n                    [\n                        t.x + t.width,\n                        t.y\n                    ],\n                    [\n                        t.x + t.width,\n                        t.y + t.height\n                    ],\n                    [\n                        t.x,\n                        t.y + t.height\n                    ]\n                ].map(([t, a])=>{\n                    const s = t - e[0], r = (a - e[1]) * i;\n                    return [\n                        s * i + e[0],\n                        r + e[1]\n                    ];\n                });\n                return os(a);\n            }(this.box, s, r);\n        }\n        this.el.dispatch(\"resize\", {\n            box: new kt(l),\n            angle: 0,\n            eventType: this.eventType,\n            event: t,\n            handler: this\n        }).defaultPrevented || this.el.size(l.width, l.height).move(l.x, l.y);\n    }\n    movePoint(t) {\n        this.lastEvent = t;\n        const { x: e, y: i } = this.snapToGrid(this.el.point(ns(t))), a = this.el.array().slice();\n        a[this.index] = [\n            e,\n            i\n        ], this.el.dispatch(\"resize\", {\n            box: os(a),\n            angle: 0,\n            eventType: this.eventType,\n            event: t,\n            handler: this\n        }).defaultPrevented || this.el.plot(a);\n    }\n    rotate(t) {\n        this.lastEvent = t;\n        const e = this.startPoint, i = this.el.point(ns(t)), { cx: a, cy: s } = this.box, r = e.x - a, n = e.y - s, o = i.x - a, l = i.y - s, h = Math.sqrt(r * r + n * n) * Math.sqrt(o * o + l * l);\n        if (0 === h) return;\n        let c = Math.acos((r * o + n * l) / h) / Math.PI * 180;\n        if (!c) return;\n        i.x < e.x && (c = -c);\n        const d = new vt(this.el), { x: u, y: g } = new bt(a, s).transformO(d), { rotate: p } = d.decompose(), f = this.snapToAngle(p + c) - p;\n        this.el.dispatch(\"resize\", {\n            box: this.box,\n            angle: f,\n            eventType: this.eventType,\n            event: t,\n            handler: this\n        }).defaultPrevented || this.el.transform(d.rotateO(f, u, g));\n    }\n    endResize(t) {\n        \"rot\" !== this.eventType && \"point\" !== this.eventType && this.resize(t), this.lastEvent = null, this.eventType = \"\", Xt(window, \"mousemove.resize touchmove.resize\"), Xt(window, \"mouseup.resize touchend.resize\");\n    }\n    snapToGrid(t) {\n        return this.grid && (t.x = Math.round(t.x / this.grid) * this.grid, t.y = Math.round(t.y / this.grid) * this.grid), t;\n    }\n    snapToAngle(t) {\n        return this.degree && (t = Math.round(t / this.degree) * this.degree), t;\n    }\n}\nQ(Gt, {\n    resize: function(t = !0, e = {}) {\n        \"object\" == typeof t && (e = t, t = !0);\n        let i = this.remember(\"_ResizeHandler\");\n        return i || (t.prototype instanceof ls ? (i = new t(this), t = !0) : i = new ls(this), this.remember(\"_resizeHandler\", i)), i.active(t, e), this;\n    }\n}), void 0 === window.SVG && (window.SVG = yi), void 0 === window.Apex && (window.Apex = {});\nvar hs = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"initModules\",\n            value: function() {\n                this.ctx.publicMethods = [\n                    \"updateOptions\",\n                    \"updateSeries\",\n                    \"appendData\",\n                    \"appendSeries\",\n                    \"isSeriesHidden\",\n                    \"highlightSeries\",\n                    \"toggleSeries\",\n                    \"showSeries\",\n                    \"hideSeries\",\n                    \"setLocale\",\n                    \"resetSeries\",\n                    \"zoomX\",\n                    \"toggleDataPointSelection\",\n                    \"dataURI\",\n                    \"exportToCSV\",\n                    \"addXaxisAnnotation\",\n                    \"addYaxisAnnotation\",\n                    \"addPointAnnotation\",\n                    \"clearAnnotations\",\n                    \"removeAnnotation\",\n                    \"paper\",\n                    \"destroy\"\n                ], this.ctx.eventList = [\n                    \"click\",\n                    \"mousedown\",\n                    \"mousemove\",\n                    \"mouseleave\",\n                    \"touchstart\",\n                    \"touchmove\",\n                    \"touchleave\",\n                    \"mouseup\",\n                    \"touchend\"\n                ], this.ctx.animations = new y(this.ctx), this.ctx.axes = new ra(this.ctx), this.ctx.core = new qa(this.ctx.el, this.ctx), this.ctx.config = new Wi({}), this.ctx.data = new $i(this.ctx), this.ctx.grid = new Ki(this.ctx), this.ctx.graphics = new Mi(this.ctx), this.ctx.coreUtils = new Pi(this.ctx), this.ctx.crosshairs = new na(this.ctx), this.ctx.events = new aa(this.ctx), this.ctx.exports = new Ji(this.ctx), this.ctx.fill = new ji(this.ctx), this.ctx.localization = new sa(this.ctx), this.ctx.options = new Oi, this.ctx.responsive = new oa(this.ctx), this.ctx.series = new Zi(this.ctx), this.ctx.theme = new la(this.ctx), this.ctx.formatters = new Xi(this.ctx), this.ctx.titleSubtitle = new ha(this.ctx), this.ctx.legend = new xa(this.ctx), this.ctx.toolbar = new ba(this.ctx), this.ctx.tooltip = new Sa(this.ctx), this.ctx.dimensions = new pa(this.ctx), this.ctx.updateHelpers = new Za(this.ctx), this.ctx.zoomPanSelection = new ma(this.ctx), this.ctx.w.globals.tooltip = new Sa(this.ctx);\n            }\n        }\n    ]), t;\n}(), cs = function() {\n    function t(e) {\n        i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [\n        {\n            key: \"clear\",\n            value: function(t) {\n                var e = t.isUpdating;\n                this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({\n                    isUpdating: e\n                });\n            }\n        },\n        {\n            key: \"killSVG\",\n            value: function(t) {\n                t.each(function() {\n                    this.removeClass(\"*\"), this.off();\n                }, !0), t.clear();\n            }\n        },\n        {\n            key: \"clearDomElements\",\n            value: function(t) {\n                var e = this, i = t.isUpdating, a = this.w.globals.dom.Paper.node;\n                a.parentNode && a.parentNode.parentNode && !i && (a.parentNode.parentNode.style.minHeight = \"unset\");\n                var s = this.w.globals.dom.baseEl;\n                s && this.ctx.eventList.forEach(function(t) {\n                    s.removeEventListener(t, e.ctx.events.documentEvent);\n                });\n                var r = this.w.globals.dom;\n                if (null !== this.ctx.el) for(; this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);\n                this.killSVG(r.Paper), r.Paper.remove(), r.elWrap = null, r.elGraphical = null, r.elLegendWrap = null, r.elLegendForeign = null, r.baseEl = null, r.elGridRect = null, r.elGridRectMask = null, r.elGridRectBarMask = null, r.elGridRectMarkerMask = null, r.elForecastMask = null, r.elNonForecastMask = null, r.elDefs = null;\n            }\n        }\n    ]), t;\n}(), ds = new WeakMap;\nvar us = function() {\n    function t(e, a) {\n        i(this, t), this.opts = a, this.ctx = this, this.w = new Gi(a).init(), this.el = e, this.w.globals.cuid = v.randomId(), this.w.globals.chartID = this.w.config.chart.id ? v.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new hs(this).initModules(), this.lastUpdateOptions = null, this.create = v.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);\n    }\n    return s(t, [\n        {\n            key: \"render\",\n            value: function() {\n                var t = this;\n                return new Promise(function(e, i) {\n                    if (v.elementExists(t.el)) {\n                        void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({\n                            id: t.w.globals.chartID,\n                            group: t.w.config.chart.group,\n                            chart: t\n                        }), t.setLocale(t.w.config.chart.defaultLocale);\n                        var a = t.w.config.chart.events.beforeMount;\n                        \"function\" == typeof a && a(t, t.w), t.events.fireEvent(\"beforeMount\", [\n                            t,\n                            t.w\n                        ]), window.addEventListener(\"resize\", t.windowResizeHandler), function(t, e) {\n                            var i = !1;\n                            if (t.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n                                var a = t.getBoundingClientRect();\n                                \"none\" !== t.style.display && 0 !== a.width || (i = !0);\n                            }\n                            var s = new ResizeObserver(function(a) {\n                                i && e.call(t, a), i = !0;\n                            });\n                            t.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t.children).forEach(function(t) {\n                                return s.observe(t);\n                            }) : s.observe(t), ds.set(e, s);\n                        }(t.el.parentNode, t.parentResizeHandler);\n                        var s = t.el.getRootNode && t.el.getRootNode(), r = v.is(\"ShadowRoot\", s), n = t.el.ownerDocument, o = r ? s.getElementById(\"apexcharts-css\") : n.getElementById(\"apexcharts-css\");\n                        if (!o) {\n                            var l;\n                            (o = document.createElement(\"style\")).id = \"apexcharts-css\", o.textContent = '@keyframes opaque {\\n  0% {\\n    opacity: 0\\n  }\\n\\n  to {\\n    opacity: 1\\n  }\\n}\\n\\n@keyframes resizeanim {\\n\\n  0%,\\n  to {\\n    opacity: 0\\n  }\\n}\\n\\n.apexcharts-canvas {\\n  position: relative;\\n  direction: ltr !important;\\n  user-select: none\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0, 0, 0, .5);\\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)\\n}\\n\\n.apexcharts-inner {\\n  position: relative\\n}\\n\\n.apexcharts-text tspan {\\n  font-family: inherit\\n}\\n\\nrect.legend-mouseover-inactive,\\n.legend-mouseover-inactive rect,\\n.legend-mouseover-inactive path,\\n.legend-mouseover-inactive circle,\\n.legend-mouseover-inactive line,\\n.legend-mouseover-inactive text.apexcharts-yaxis-title-text,\\n.legend-mouseover-inactive text.apexcharts-yaxis-label {\\n  transition: .15s ease all;\\n  opacity: .2\\n}\\n\\n.apexcharts-legend-text {\\n  padding-left: 15px;\\n  margin-left: -15px;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, .96)\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark {\\n  color: #fff;\\n  background: rgba(30, 30, 30, .8)\\n}\\n\\n.apexcharts-tooltip * {\\n  font-family: inherit\\n}\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\\n  background: #eceff1;\\n  border-bottom: 1px solid #ddd\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, .7);\\n  border-bottom: 1px solid #333\\n}\\n\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  margin-left: 5px;\\n  font-weight: 600\\n}\\n\\n.apexcharts-tooltip-text-goals-label:empty,\\n.apexcharts-tooltip-text-goals-value:empty,\\n.apexcharts-tooltip-text-y-label:empty,\\n.apexcharts-tooltip-text-y-value:empty,\\n.apexcharts-tooltip-text-z-value:empty,\\n.apexcharts-tooltip-title:empty {\\n  display: none\\n}\\n\\n.apexcharts-tooltip-text-goals-label,\\n.apexcharts-tooltip-text-goals-value {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-tooltip-goals-group,\\n.apexcharts-tooltip-text-goals-label,\\n.apexcharts-tooltip-text-goals-value {\\n  display: flex\\n}\\n\\n.apexcharts-tooltip-text-goals-label:not(:empty),\\n.apexcharts-tooltip-text-goals-value:not(:empty) {\\n  margin-top: -6px\\n}\\n\\n.apexcharts-tooltip-marker {\\n  display: inline-block;\\n  position: relative;\\n  width: 16px;\\n  height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin-right: 4px;\\n  text-align: center;\\n  vertical-align: middle;\\n  color: inherit;\\n}\\n\\n.apexcharts-tooltip-marker::before {\\n  content: \"\";\\n  display: inline-block;\\n  width: 100%;\\n  text-align: center;\\n  color: currentcolor;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  font-size: 26px;\\n  font-family: Arial, Helvetica, sans-serif;\\n  line-height: 14px;\\n  font-weight: 900;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"circle\"]::before {\\n  content: \"\\\\25CF\";\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"square\"]::before,\\n.apexcharts-tooltip-marker[shape=\"rect\"]::before {\\n  content: \"\\\\25A0\";\\n  transform: translate(-1px, -2px);\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"line\"]::before {\\n  content: \"\\\\2500\";\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"diamond\"]::before {\\n  content: \"\\\\25C6\";\\n  font-size: 28px;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"triangle\"]::before {\\n  content: \"\\\\25B2\";\\n  font-size: 22px;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"cross\"]::before {\\n  content: \"\\\\2715\";\\n  font-size: 18px;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"plus\"]::before {\\n  content: \"\\\\2715\";\\n  transform: rotate(45deg) translate(-1px, -1px);\\n  font-size: 18px;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"star\"]::before {\\n  content: \"\\\\2605\";\\n  font-size: 18px;\\n}\\n\\n.apexcharts-tooltip-marker[shape=\"sparkle\"]::before {\\n  content: \"\\\\2726\";\\n  font-size: 20px;\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\\n  opacity: 1\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active,\\n.apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px\\n}\\n\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-custom-tooltip,\\n.apexcharts-tooltip-box {\\n  padding: 4px 8px\\n}\\n\\n.apexcharts-tooltip-boxPlot {\\n  display: flex;\\n  flex-direction: column-reverse\\n}\\n\\n.apexcharts-tooltip-box>div {\\n  margin: 4px 0\\n}\\n\\n.apexcharts-tooltip-box span.value {\\n  font-weight: 700\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: 700;\\n  display: block;\\n  margin-bottom: 5px\\n}\\n\\n.apexcharts-xaxistooltip,\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #eceff1;\\n  border: 1px solid #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip {\\n  padding: 9px 10px;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, .7);\\n  border: 1px solid rgba(0, 0, 0, .5);\\n  color: #fff\\n}\\n\\n.apexcharts-xaxistooltip:after,\\n.apexcharts-xaxistooltip:before {\\n  left: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-left: -6px\\n}\\n\\n.apexcharts-xaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-left: -7px\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after,\\n.apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%\\n}\\n\\n.apexcharts-xaxistooltip-top:after,\\n.apexcharts-xaxistooltip-top:before {\\n  top: 100%\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\\n  border-bottom-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\\n  border-top-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-yaxistooltip {\\n  padding: 4px 10px\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, .7);\\n  border: 1px solid rgba(0, 0, 0, .5);\\n  color: #fff\\n}\\n\\n.apexcharts-yaxistooltip:after,\\n.apexcharts-yaxistooltip:before {\\n  top: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-yaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-top: -6px\\n}\\n\\n.apexcharts-yaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-top: -7px\\n}\\n\\n.apexcharts-yaxistooltip-left:after,\\n.apexcharts-yaxistooltip-left:before {\\n  left: 100%\\n}\\n\\n.apexcharts-yaxistooltip-right:after,\\n.apexcharts-yaxistooltip-right:before {\\n  right: 100%\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\\n  border-left-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\\n  border-right-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-active {\\n  opacity: 1\\n}\\n\\n.apexcharts-yaxistooltip-hidden {\\n  display: none\\n}\\n\\n.apexcharts-xcrosshairs,\\n.apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xcrosshairs.apexcharts-active,\\n.apexcharts-ycrosshairs.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0\\n}\\n\\n.apexcharts-selection-rect {\\n  cursor: move\\n}\\n\\n.svg_select_shape {\\n  stroke-width: 1;\\n  stroke-dasharray: 10 10;\\n  stroke: black;\\n  stroke-opacity: 0.1;\\n  pointer-events: none;\\n  fill: none;\\n}\\n\\n.svg_select_handle {\\n  stroke-width: 3;\\n  stroke: black;\\n  fill: none;\\n}\\n\\n.svg_select_handle_r {\\n  cursor: e-resize;\\n}\\n\\n.svg_select_handle_l {\\n  cursor: w-resize;\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\\n  cursor: crosshair\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-pan-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-selection-icon,\\n.apexcharts-toolbar-custom-icon,\\n.apexcharts-zoom-icon,\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6e8192;\\n  text-align: center\\n}\\n\\n.apexcharts-menu-icon svg,\\n.apexcharts-reset-icon svg,\\n.apexcharts-zoom-icon svg,\\n.apexcharts-zoomin-icon svg,\\n.apexcharts-zoomout-icon svg {\\n  fill: #6e8192\\n}\\n\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(.76)\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\\n  fill: #f3f4f5\\n}\\n\\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\\n  fill: #008ffb\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\\n  fill: #333\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-selection-icon {\\n  position: relative\\n}\\n\\n.apexcharts-reset-icon {\\n  margin-left: 5px\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-zoom-icon {\\n  transform: scale(.85)\\n}\\n\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  transform: scale(.7)\\n}\\n\\n.apexcharts-zoomout-icon {\\n  margin-right: 3px\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0\\n}\\n\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6e8192;\\n  stroke-width: 2\\n}\\n\\n.apexcharts-pan-icon.apexcharts-selected svg {\\n  stroke: #008ffb\\n}\\n\\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\\n  stroke: #333\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0 6px 2px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: .15s ease all;\\n  pointer-events: none\\n}\\n\\n.apexcharts-menu.apexcharts-menu-open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-item:hover {\\n  background: #eee\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, .7);\\n  color: #fff\\n}\\n\\n@media screen and (min-width:768px) {\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1\\n  }\\n}\\n\\n.apexcharts-canvas .apexcharts-element-hidden,\\n.apexcharts-datalabel.apexcharts-element-hidden,\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hidden-element-shown {\\n  opacity: 1;\\n  transition: 0.25s ease all;\\n}\\n\\n.apexcharts-datalabel,\\n.apexcharts-datalabel-label,\\n.apexcharts-datalabel-value,\\n.apexcharts-datalabels,\\n.apexcharts-pie-label {\\n  cursor: default;\\n  pointer-events: none\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: .3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease\\n}\\n\\n.apexcharts-radialbar-label {\\n  cursor: pointer;\\n}\\n\\n.apexcharts-annotation-rect,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-gridline,\\n.apexcharts-line,\\n.apexcharts-point-annotation-label,\\n.apexcharts-radar-series path:not(.apexcharts-marker),\\n.apexcharts-radar-series polygon,\\n.apexcharts-toolbar svg,\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-xaxis-annotation-label,\\n.apexcharts-yaxis-annotation-label,\\n.apexcharts-zoom-rect,\\n.no-pointer-events {\\n  pointer-events: none\\n}\\n\\n.apexcharts-tooltip-active .apexcharts-marker {\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-radar-series .apexcharts-yaxis {\\n  pointer-events: none;\\n}\\n\\n.resize-triggers {\\n  animation: 1ms resizeanim;\\n  visibility: hidden;\\n  opacity: 0;\\n  height: 100%;\\n  width: 100%;\\n  overflow: hidden\\n}\\n\\n.contract-trigger:before,\\n.resize-triggers,\\n.resize-triggers>div {\\n  content: \" \";\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  left: 0\\n}\\n\\n.resize-triggers>div {\\n  height: 100%;\\n  width: 100%;\\n  background: #eee;\\n  overflow: auto\\n}\\n\\n.contract-trigger:before {\\n  overflow: hidden;\\n  width: 200%;\\n  height: 200%\\n}\\n\\n.apexcharts-bar-goals-markers {\\n  pointer-events: none\\n}\\n\\n.apexcharts-bar-shadows {\\n  pointer-events: none\\n}\\n\\n.apexcharts-rangebar-goals-markers {\\n  pointer-events: none\\n}\\n\\n.apexcharts-disable-transitions * {\\n  transition: none !important;\\n}';\n                            var h = (null === (l = t.opts.chart) || void 0 === l ? void 0 : l.nonce) || t.w.config.chart.nonce;\n                            h && o.setAttribute(\"nonce\", h), r ? s.prepend(o) : n.head.appendChild(o);\n                        }\n                        var c = t.create(t.w.config.series, {});\n                        if (!c) return e(t);\n                        t.mount(c).then(function() {\n                            \"function\" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent(\"mounted\", [\n                                t,\n                                t.w\n                            ]), e(c);\n                        }).catch(function(t) {\n                            i(t);\n                        });\n                    } else i(new Error(\"Element not found\"));\n                });\n            }\n        },\n        {\n            key: \"create\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                new hs(this).initModules();\n                var s = this.w.globals;\n                if (s.noData = !1, s.animationEnded = !1, !v.elementExists(this.el)) return s.animationEnded = !0, null;\n                (this.responsive.checkResponsiveConfig(e), a.config.xaxis.convertedCatToNumeric) && new Ni(a.config).convertCatToNumericXaxis(a.config, this.ctx);\n                if (this.core.setupElements(), \"treemap\" === a.config.chart.type && (a.config.grid.show = !1, a.config.yaxis[0].show = !1), 0 === s.svgWidth) return s.animationEnded = !0, null;\n                var r = t;\n                t.forEach(function(t, e) {\n                    t.hidden && (r = i.legend.legendHelpers.getSeriesAfterCollapsing({\n                        realIndex: e\n                    }));\n                });\n                var n = Pi.checkComboSeries(r, a.config.chart.type);\n                s.comboCharts = n.comboCharts, s.comboBarCount = n.comboBarCount;\n                var o = r.every(function(t) {\n                    return t.data && 0 === t.data.length;\n                });\n                (0 === r.length || o && s.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(r), this.theme.init(), new Vi(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), s.noData && s.collapsedSeries.length !== s.series.length && !a.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), s.axisCharts && (this.core.coreCalculations(), \"category\" !== a.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = a.globals.minX, this.ctx.toolbar.maxX = a.globals.maxX), this.formatters.heatmapLabelFormatters(), new Pi(this).getLargestMarkerSize(), this.dimensions.plotCoords();\n                var l = this.core.xySettings();\n                this.grid.createGridMask();\n                var h = this.core.plotChartType(r, l), c = new qi(this);\n                return c.bringForward(), a.config.dataLabels.background.enabled && c.dataLabelsBackground(), this.core.shiftGraphPosition(), a.globals.dataPoints > 50 && a.globals.dom.elWrap.classList.add(\"apexcharts-disable-transitions\"), {\n                    elGraph: h,\n                    xyRatios: l,\n                    dimensions: {\n                        plot: {\n                            left: a.globals.translateX,\n                            top: a.globals.translateY,\n                            width: a.globals.gridWidth,\n                            height: a.globals.gridHeight\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"mount\",\n            value: function() {\n                var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i = this, a = i.w;\n                return new Promise(function(s, r) {\n                    if (null === i.el) return r(new Error(\"Not enough data to display or target element not found\"));\n                    (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), i.grid = new Ki(i);\n                    var n, o, l = i.grid.drawGrid();\n                    (i.annotations = new Fi(i), i.annotations.drawImageAnnos(), i.annotations.drawTextAnnos(), \"back\" === a.config.grid.position) && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (n = l.elGridBorders) && void 0 !== n && n.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n                    if (Array.isArray(e.elGraph)) for(var h = 0; h < e.elGraph.length; h++)a.globals.dom.elGraphical.add(e.elGraph[h]);\n                    else a.globals.dom.elGraphical.add(e.elGraph);\n                    \"front\" === a.config.grid.position && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (o = l.elGridBorders) && void 0 !== o && o.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n                    \"front\" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(), \"front\" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(), \"treemap\" !== a.config.chart.type && i.axes.drawAxis(a.config.chart.type, l);\n                    var c = new Qi(t.ctx, l), d = new ia(t.ctx, l);\n                    if (null !== l && (c.xAxisLabelCorrections(l.xAxisTickWidth), d.setYAxisTextAlignments(), a.config.yaxis.map(function(t, e) {\n                        -1 === a.globals.ignoreYAxisIndexes.indexOf(e) && d.yAxisTitleRotate(e, t.opposite);\n                    })), i.annotations.drawAxesAnnotations(), !a.globals.noData) {\n                        if (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios), a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric || a.globals.isRangeBar)) (a.config.chart.zoom.enabled || a.config.chart.selection && a.config.chart.selection.enabled || a.config.chart.pan && a.config.chart.pan.enabled) && i.zoomPanSelection.init({\n                            xyRatios: e.xyRatios\n                        });\n                        else {\n                            var u = a.config.chart.toolbar.tools;\n                            [\n                                \"zoom\",\n                                \"zoomin\",\n                                \"zoomout\",\n                                \"selection\",\n                                \"pan\",\n                                \"reset\"\n                            ].forEach(function(t) {\n                                u[t] = !1;\n                            });\n                        }\n                        a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();\n                    }\n                    a.globals.memory.methodsToExec.length > 0 && a.globals.memory.methodsToExec.forEach(function(t) {\n                        t.method(t.params, !1, t.context);\n                    }), a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(), s(i);\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                window.removeEventListener(\"resize\", this.windowResizeHandler), function(t, e) {\n                    var i = ds.get(e);\n                    i && (i.disconnect(), ds.delete(e));\n                }(this.el.parentNode, this.parentResizeHandler);\n                var t = this.w.config.chart.id;\n                t && Apex._chartInstances.forEach(function(e, i) {\n                    e.id === v.escapeString(t) && Apex._chartInstances.splice(i, 1);\n                }), new cs(this.ctx).clear({\n                    isUpdating: !1\n                });\n            }\n        },\n        {\n            key: \"updateOptions\",\n            value: function(t) {\n                var e = this, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], n = this.w;\n                return n.globals.selection = void 0, this.lastUpdateOptions && JSON.stringify(this.lastUpdateOptions) === JSON.stringify(t) ? this : (this.lastUpdateOptions = v.clone(t), t.series && (this.series.resetSeries(!1, !0, !1), t.series.length && t.series[0].data && (t.series = t.series.map(function(t, i) {\n                    return e.updateHelpers._extendSeries(t, i);\n                })), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), n.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, i, a, s, r));\n            }\n        },\n        {\n            key: \"updateSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n                return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);\n            }\n        },\n        {\n            key: \"appendSeries\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a = this.w.config.series.slice();\n                return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);\n            }\n        },\n        {\n            key: \"appendData\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this;\n                i.w.globals.dataChanged = !0, i.series.getPreviousPaths();\n                for(var a = i.w.config.series.slice(), s = 0; s < a.length; s++)if (null !== t[s] && void 0 !== t[s]) for(var r = 0; r < t[s].data.length; r++)a[s].data.push(t[s].data[r]);\n                return i.w.config.series = a, e && (i.w.globals.initialSeries = v.clone(i.w.config.series)), this.update();\n            }\n        },\n        {\n            key: \"update\",\n            value: function(t) {\n                var e = this;\n                return new Promise(function(i, a) {\n                    if (e.lastUpdateOptions && JSON.stringify(e.lastUpdateOptions) === JSON.stringify(t)) return i(e);\n                    e.lastUpdateOptions = v.clone(t), new cs(e.ctx).clear({\n                        isUpdating: !0\n                    });\n                    var s = e.create(e.w.config.series, t);\n                    if (!s) return i(e);\n                    e.mount(s).then(function() {\n                        \"function\" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent(\"updated\", [\n                            e,\n                            e.w\n                        ]), e.w.globals.isDirty = !0, i(e);\n                    }).catch(function(t) {\n                        a(t);\n                    });\n                });\n            }\n        },\n        {\n            key: \"getSyncedCharts\",\n            value: function() {\n                var t = this.getGroupedCharts(), e = [\n                    this\n                ];\n                return t.length && (e = [], t.forEach(function(t) {\n                    e.push(t);\n                })), e;\n            }\n        },\n        {\n            key: \"getGroupedCharts\",\n            value: function() {\n                var t = this;\n                return Apex._chartInstances.filter(function(t) {\n                    if (t.group) return !0;\n                }).map(function(e) {\n                    return t.w.config.chart.group === e.group ? e.chart : t;\n                });\n            }\n        },\n        {\n            key: \"toggleSeries\",\n            value: function(t) {\n                return this.series.toggleSeries(t);\n            }\n        },\n        {\n            key: \"highlightSeriesOnLegendHover\",\n            value: function(t, e) {\n                return this.series.toggleSeriesOnHover(t, e);\n            }\n        },\n        {\n            key: \"showSeries\",\n            value: function(t) {\n                this.series.showSeries(t);\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                this.series.hideSeries(t);\n            }\n        },\n        {\n            key: \"highlightSeries\",\n            value: function(t) {\n                this.series.highlightSeries(t);\n            }\n        },\n        {\n            key: \"isSeriesHidden\",\n            value: function(t) {\n                this.series.isSeriesHidden(t);\n            }\n        },\n        {\n            key: \"resetSeries\",\n            value: function() {\n                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n                this.series.resetSeries(t, e);\n            }\n        },\n        {\n            key: \"addEventListener\",\n            value: function(t, e) {\n                this.events.addEventListener(t, e);\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function(t, e) {\n                this.events.removeEventListener(t, e);\n            }\n        },\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"addPointAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"clearAnnotations\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e = this;\n                t && (e = t), e.annotations.clearAnnotations(e);\n            }\n        },\n        {\n            key: \"removeAnnotation\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i = this;\n                e && (i = e), i.annotations.removeAnnotation(i, t);\n            }\n        },\n        {\n            key: \"getChartArea\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner\");\n            }\n        },\n        {\n            key: \"getSeriesTotalXRange\",\n            value: function(t, e) {\n                return this.coreUtils.getSeriesTotalsXRange(t, e);\n            }\n        },\n        {\n            key: \"getHighestValueInSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n                return new ea(this.ctx).getMinYMaxY(t).highestY;\n            }\n        },\n        {\n            key: \"getLowestValueInSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n                return new ea(this.ctx).getMinYMaxY(t).lowestY;\n            }\n        },\n        {\n            key: \"getSeriesTotal\",\n            value: function() {\n                return this.w.globals.seriesTotals;\n            }\n        },\n        {\n            key: \"toggleDataPointSelection\",\n            value: function(t, e) {\n                return this.updateHelpers.toggleDataPointSelection(t, e);\n            }\n        },\n        {\n            key: \"zoomX\",\n            value: function(t, e) {\n                this.ctx.toolbar.zoomUpdateOptions(t, e);\n            }\n        },\n        {\n            key: \"setLocale\",\n            value: function(t) {\n                this.localization.setCurrentLocaleValues(t);\n            }\n        },\n        {\n            key: \"dataURI\",\n            value: function(t) {\n                return new Ji(this.ctx).dataURI(t);\n            }\n        },\n        {\n            key: \"getSvgString\",\n            value: function(t) {\n                return new Ji(this.ctx).getSvgString(t);\n            }\n        },\n        {\n            key: \"exportToCSV\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n                return new Ji(this.ctx).exportToCSV(t);\n            }\n        },\n        {\n            key: \"paper\",\n            value: function() {\n                return this.w.globals.dom.Paper;\n            }\n        },\n        {\n            key: \"_parentResizeCallback\",\n            value: function() {\n                this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();\n            }\n        },\n        {\n            key: \"_windowResize\",\n            value: function() {\n                var t = this;\n                clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {\n                    t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update();\n                }, 150);\n            }\n        },\n        {\n            key: \"_windowResizeHandler\",\n            value: function() {\n                var t = this.w.config.chart.redrawOnWindowResize;\n                \"function\" == typeof t && (t = t()), t && this._windowResize();\n            }\n        }\n    ], [\n        {\n            key: \"getChartByID\",\n            value: function(t) {\n                var e = v.escapeString(t);\n                if (Apex._chartInstances) {\n                    var i = Apex._chartInstances.filter(function(t) {\n                        return t.id === e;\n                    })[0];\n                    return i && i.chart;\n                }\n            }\n        },\n        {\n            key: \"initOnLoad\",\n            value: function() {\n                for(var e = document.querySelectorAll(\"[data-apexcharts]\"), i = 0; i < e.length; i++){\n                    new t(e[i], JSON.parse(e[i].getAttribute(\"data-options\"))).render();\n                }\n            }\n        },\n        {\n            key: \"exec\",\n            value: function(t, e) {\n                var i = this.getChartByID(t);\n                if (i) {\n                    i.w.globals.isExecCalled = !0;\n                    var a = null;\n                    if (-1 !== i.publicMethods.indexOf(e)) {\n                        for(var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), n = 2; n < s; n++)r[n - 2] = arguments[n];\n                        a = i[e].apply(i, r);\n                    }\n                    return a;\n                }\n            }\n        },\n        {\n            key: \"merge\",\n            value: function(t, e) {\n                return v.extend(t, e);\n            }\n        }\n    ]), t;\n}();\nmodule.exports = us;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./node_modules/apexcharts/dist/apexcharts.common.js\n");

/***/ })

};
;